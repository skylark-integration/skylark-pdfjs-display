{"version":3,"sources":["skylark-pdfjs-display-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","__webpack_modules__","__unused_webpack_module","exports","__w_pdfjs_require__","Object","defineProperty","value","enumerable","get","_display_utils","addLinkAttributes","getFilenameFromUrl","LinkTarget","loadScript","PDFDateString","RenderingCancelledException","_api","build","getDocument","LoopbackPort","PDFDataRangeTransport","PDFWorker","version","_util","CMapCompressionType","createObjectURL","createPromiseCapability","createValidAbsoluteUrl","InvalidPDFException","MissingPDFException","OPS","PasswordResponses","PermissionFlag","removeNullCharacters","shadow","UnexpectedResponseException","UNSUPPORTED_FEATURES","Util","VerbosityLevel","_annotation_layer","AnnotationLayer","_api_compatibility","apiCompatibilityParams","_worker_options","GlobalWorkerOptions","_text_layer","renderTextLayer","_svg","SVGGraphics","isNodeJS","PDFNodeStream","setPDFNetworkStreamFactory","params","PDFNetworkStream","PDFFetchStream","isFetchSupported","isValidFetchUrl","url","link","target","rel","enabled","assert","urlNullRemoved","href","title","onclick","targetStr","NONE","SELF","BLANK","PARENT","TOP","DEFAULT_LINK_REL","deprecated","details","console","log","anchor","indexOf","query","end","Math","min","substring","lastIndexOf","src","removeScriptElement","Promise","resolve","reject","script","document","createElement","onload","evt","remove","onerror","Error","head","documentElement","appendChild","StatTimer","PageViewport","DOMSVGFactory","DOMCMapReaderFactory","DOMCanvasFactory","BaseCMapReaderFactory","BaseCanvasFactory","SVG_NS","[object Object]","this","constructor","unreachable","width","height","canvasAndContext","canvas","context","ownerDocument","globalThis","super","_document","getContext","baseUrl","isCompressed","compressionType","BINARY","_fetchData","catch","reason","baseURI","fetch","then","async","response","ok","statusText","cMapData","Uint8Array","arrayBuffer","stringToBytes","text","request","XMLHttpRequest","open","responseType","onreadystatechange","readyState","DONE","status","responseText","send","svg","createElementNS","setAttribute","type","viewBox","scale","rotation","offsetX","offsetY","dontFlip","centerX","centerY","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","offsetCanvasY","abs","transform","slice","x","y","applyTransform","rect","topLeft","bottomRight","applyInverseTransform","BaseException","msg","Response","prototype","ReadableStream","protocol","URL","ex","pdfDateStringRegex","started","create","times","warn","Date","now","push","start","outBuf","longest","time","duration","padEnd","join","input","isString","RegExp","matches","exec","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","UTC","arrayByteLength","arraysToBytes","arr","resultLength","pos","data","item","itemLength","byteLength","set","bytesToString","bytes","undefined","String","fromCharCode","apply","strBuf","chunkEnd","chunk","subarray","capability","isSettled","promise","absoluteUrl","_isValidProtocol","encodeToXmlString","str","buffer","ii","char","codePointAt","entity","XMLEntities","toString","toUpperCase","escapeString","replace","match","getModificationDate","date","getUTCFullYear","getUTCMonth","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getVerbosityLevel","verbosity","info","INFOS","isArrayBuffer","v","isArrayEqual","arr1","arr2","every","element","index","isAscii","test","isBool","isNum","isSameOrigin","otherUrl","base","origin","e","other","objectFromEntries","iterable","assign","fromEntries","objectSize","keys","NullCharactersRegExp","setVerbosityLevel","level","Number","isInteger","string32","stringToPDFString","charCodeAt","code","PDFStringTranslateTable","charAt","stringToUTF16BEString","buf","stringToUTF8String","decodeURIComponent","escape","utf8StringToString","unescape","encodeURIComponent","UnknownErrorException","TextRenderingMode","StreamType","PasswordException","PageActionEventType","IsLittleEndianCached","IsEvalSupportedCached","ImageKind","IDENTITY_MATRIX","FormatError","FontType","FONT_IDENTITY_MATRIX","DocumentActionEventType","AnnotationType","AnnotationStateModelType","AnnotationReviewState","AnnotationReplyType","AnnotationMarkedState","AnnotationFlag","AnnotationFieldFlag","AnnotationBorderStyleType","AnnotationActionEventType","AbortException","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","WC","WS","DS","WP","DP","O","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","unknown","forms","javaScript","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontGetPath","errorMarkedContent","NEED_PASSWORD","INCORRECT_PASSWORD","cond","prop","configurable","writable","message","buffer8","Uint32Array","isLittleEndian","Function","isEvalSupported","hexNumbers","Array","map","n","r","g","b","m1","m2","p","m","xt","yt","d","p1","p2","p3","p4","max","transpose","a","c","first","sqrt","sx","sy","rect1","rect2","compare","orderedX","sort","orderedY","result","normalizeRect","digits","contentType","forceDataSchema","blob","Blob","b1","b2","b3","d1","d2","d3","d4","60","62","38","34","39","__unused_webpack_exports","process","versions","nw","electron","PDFPageProxy","PDFDocumentProxy","DefaultCMapReaderFactory","DefaultCanvasFactory","_font_loader","_node_utils","_annotation_storage","_canvas","_is_node","_message_handler","_metadata","_optional_content_config","_transport_stream","_webgl","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","NodeCanvasFactory","NodeCMapReaderFactory","createPDFNetworkStream","pdfNetworkStreamFactory","task","PDFDocumentLoadingTask","source","range","rangeTransport","worker","key","window","pdfBytes","isNaN","location","rangeChunkSize","CMapReaderFactory","ignoreErrors","stopAtErrors","fontExtraProperties","pdfBug","maxImageSize","disableFontFace","disableRange","disableStream","disableAutoFetch","workerParams","port","workerPort","fromPort","_worker","docId","destroyed","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","PDFDataTransportStream","initialData","progressiveDone","httpHeaders","withCredentials","all","workerId","messageHandler","MessageHandler","postMessageTransfers","transport","WorkerTransport","_transport","_capability","pdfDataRangeTransport","sendWithPromise","apiVersion","password","docBaseUrl","nextDocumentId","onPassword","onProgress","onUnsupportedFeature","transportDestroyed","destroy","_rangeListeners","_progressListeners","_progressiveReadListeners","_progressiveDoneListeners","_readyCapability","listener","begin","loaded","total","pdfInfo","_pdfInfo","annotationStorage","AnnotationStorage","numPages","fingerprint","pageNumber","getPage","ref","getPageIndex","getDestinations","id","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getDocJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","downloadInfoCapability","getStats","startCleanup","loadingTask","loadingParams","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pageIndex","pageInfo","_pageIndex","_pageInfo","_ownerDocument","_stats","_pdfBug","commonObjs","objs","PDFObjects","cleanupAfterRender","pendingCleanup","_intentStates","Map","rotate","userUnit","view","intent","annotationsPromise","annotationsIntent","getAnnotations","_jsActionsPromise","getPageJSActions","canvasContext","viewport","enableWebGL","renderInteractiveForms","imageLayer","canvasFactory","background","optionalContentConfigPromise","renderingIntent","intentState","streamReaderCancelTimeout","clearTimeout","canvasFactoryInstance","webGLContext","WebGLContext","enable","displayReadyCapability","operatorList","fnArray","argsArray","lastChunk","_pumpOperatorList","getAll","complete","error","renderTasks","internalRenderTask","splice","_tryCleanup","_abortOperatorList","timeEnd","InternalRenderTask","callback","useRequestAnimationFrame","renderTask","transparency","optionalContentConfig","initializeGraphics","operatorListChanged","opListTask","opListReadCapability","normalizeWhitespace","disableCombineTextItems","sendWithStream","combineTextItems","highWaterMark","size","textContent","items","readableStream","streamTextContent","reader","getReader","styles","pump","read","done","pageCache","waitOn","force","completed","cancel","clear","resetStats","values","operatorListChunk","args","streamReader","_renderPageChunk","setTimeout","curIntentState","delete","cleanup","stats","defer","_listeners","_defer","_deferred","transfers","forEach","call","cloned","WeakMap","cloneValue","has","includes","byteOffset","isArray","desc","getOwnPropertyDescriptor","getPrototypeOf","hasOwnProperty","PDFWorkerClosure","pdfWorkerPorts","isWorkerDisabled","fallbackWorkerSrc","nextFakeWorkerId","fakeWorkerCapability","require","pdfjsFilePath","currentScript","getWorkerSrc","workerSrc","getMainThreadWorkerMessageHandler","mainWorkerMessageHandler","pdfjsWorker","WorkerMessageHandler","setupFakeWorkerGlobal","loader","eval","createCDNWrapper","wrapper","_port","_webWorker","_messageHandler","_initializeFromPort","_initialize","on","Worker","terminateEarly","removeEventListener","onWorkerError","terminate","_setupFakeWorker","addEventListener","supportTransfers","sendTest","testObj","workerHandler","setup","fontLoader","FontLoader","_onUnsupportedFeature","bind","_params","cMapUrl","cMapPacked","destroyCapability","_passwordCapability","_networkStream","_fullReader","_lastProgress","pagePromises","setupMessageHandler","loadingTaskSettled","settled","page","_destroy","terminated","annotationStorageResetModified","pdfDocument","resetModified","_hasJSActionsPromise","cancelAllRequests","sink","getFullReader","onPull","close","enqueue","onCancel","ready","readyReason","headersCapability","fullReader","headersReady","isStreamingSupported","isRangeSupported","contentLength","rangeReader","getRangeReader","_numPages","exception","updatePassword","_startRenderPage","exportedData","exportedError","fontRegistry","FontInspector","fontAdded","FontFaceObject","finally","imageData","pageProxy","MAX_IMAGE_SIZE_TO_STORE","fetched","builtInCMap","featureId","filename","results","OptionalContentConfig","metadata","Metadata","contentDispositionFilename","cleanupSuccessful","_objs","objId","resolved","_ensureObj","RenderTask","_internalRenderTask","onContinue","canvasInRendering","WeakSet","operatorListIdx","running","graphicsReadyCallback","graphicsReady","_useRequestAnimationFrame","cancelled","_continueBound","_continue","_scheduleNextBound","_scheduleNext","_nextBound","_next","add","StepperManager","stepper","init","nextBreakPoint","getNextBreakPoint","gfx","CanvasGraphics","beginDrawing","endDrawing","updateOperatorList","requestAnimationFrame","executeOperatorList","BaseFontLoader","nativeFontFaces","styleElement","nativeFontFace","fonts","rule","getElementsByTagName","styleSheet","sheet","insertRule","cssRules","attached","missingFile","isFontLoadingAPISupported","createNativeFontFace","addNativeFontFace","family","createFontFaceRule","isSyncFontLoadingSupported","_queueLoadingCallback","_prepareFontLoadEvent","_loadTestFont","rules","fontsToLoad","loadingContext","requests","nextRequestId","loadTestFontId","supported","navigator","userAgent","otherRequest","shift","atob","int32","offset","spliceString","s","insert","chunk1","chunk2","ctx","called","checksum","btoa","names","loadedName","div","style","visibility","position","top","left","span","fontFamily","body","isFontReady","fillText","getImageData","removeChild","translatedData","compiledGlyphs","FontFace","registerFont","mimetype","character","cmds","current","js","cmd","Canvas","createCanvas","fs","readFile","_storage","_modified","onSetModified","onResetModified","defaultValue","modified","entry","val","entries","_setModified","compatibilityParams","freeze","_pattern_helper","FULL_CHUNK_HEIGHT","addContextCurrentTransform","mozCurrentTransform","_originalSave","_originalRestore","_originalRotate","_originalScale","_originalTranslate","translate","_originalTransform","_originalSetTransform","setTransform","_transformMatrix","_transformStack","f","ad_bc","bc_ad","old","prev","pop","angle","cosValue","cos","sinValue","sin","CachedCanvases","cache","getCanvas","trackTransform","canvasEntry","reset","CanvasExtraState","alphaIsShape","fontSize","fontSizeScale","textMatrix","textMatrixScale","fontMatrix","leading","lineX","lineY","charSpacing","wordSpacing","textHScale","textRenderingMode","textRise","fillColor","strokeColor","patternFill","fillAlpha","strokeAlpha","lineWidth","activeSMask","resumeSMaskCtx","transferMaps","clone","setCurrentPoint","canvasCtx","stateStack","pendingClip","pendingEOFill","res","xobjs","groupStack","processingType3","baseTransform","baseTransformStack","groupLevel","smaskStack","smaskCounter","tempSMask","contentVisible","markedContentStack","cachedCanvases","_cachedGetSinglePixelWidth","putBinaryImageData","imgData","ImageData","putImageData","partialChunkHeight","fullChunks","totalChunks","chunkImgData","createImageData","destPos","srcPos","dest","j","thisChunkHeight","elemsInThisChunk","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","kind","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","srcDiff","k","kEnd","kEndUnrolled","mask","srcByte","hasTransferMaps","putBinaryImageMask","elem","copyCtxState","sourceCtx","destCtx","properties","property","setLineDash","getLineDash","lineDashOffset","resetCtxToDefault","strokeStyle","fillStyle","fillRule","globalAlpha","lineCap","lineJoin","miterLimit","globalCompositeOperation","composeSMaskBackdrop","r0","g0","b0","alpha","alpha_","composeSMaskAlpha","maskData","layerData","transferMap","composeSMaskLuminosity","composeSMask","layerCtx","maskCtx","scaleX","scaleY","backdrop","isEnabled","composed","layer","subtype","drawImage","hasBackdrop","composeFn","chunkSize","ceil","row","chunkHeight","genericComposeSMask","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","fillRect","transparentCanvas","compositeCtx","_combinedScaleFactor","hypot","beginLayout","executionStartIdx","continueCallback","argsArrayLen","chunkOperations","endTime","steps","fnId","breakIt","depObjId","objsPool","startsWith","endLayout","limit","dashArray","dashPhase","flatness","states","state","suspendSMaskGroup","endSMaskGroup","beginSMaskGroup","drawnWidth","drawnHeight","cacheId","scratchCanvas","currentCtx","currentTransform","groupCtx","startTransformInverse","mozCurrentTransformInverse","deltaTransform","clearRect","resumeSMaskGroup","ops","xw","yh","bezierCurveTo","consumePath","getPattern","singularValueDecompose2dScale","getSinglePixelWidth","scaledLineWidth","resetTransform","round","isPatternFill","needRestore","paths","pendingTextPaths","beginPath","addToPath","spacing","fontRefName","fontObj","fontDirection","isType3Font","bold","italic","typeface","fallbackName","browserFontSize","mode","rise","patternTransform","resetLineWidthToOne","fillStrokeMode","isAddToPathSet","getPathGenerator","strokeText","isFontSubpixelAAEnabled","glyphs","showType3Text","glyphsLength","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","glyph","restoreNeeded","isSpace","fontChar","accent","scaledX","scaledY","charWidth","vmetric","vx","vy","remeasure","measuredWidth","measureText","characterScaleX","isInFont","paintChar","scaledAccentX","scaledAccentY","isTextInvisible","spacingLength","charProcOperatorList","operatorListId","transformed","xWidth","yWidth","llx","lly","urx","ury","getColorN_Pattern","IR","color","canvasGraphicsFactory","createCanvasGraphics","TilingPattern","getShadingPatternFromIR","arguments","makeHexColor","patternIR","inv","bl","br","ul","ur","x0","y0","x1","y1","matrix","bbox","group","isolated","knockout","bounds","getAxialAlignedBoundingBox","canvasBounds","intersect","floor","imageSmoothingEnabled","mozImageSmoothingEnabled","img","compiled","width1","j0","points","POINT_TYPES","lineSize","data0","count","sum","Int32Array","outlines","coords","p0","step","pp","kk","o","l","ll","compileType3Glyph","maskCanvas","skewX","skewY","positions","images","image","w","h","widthScale","imgToPaint","tmpCanvas","tmpCtx","heightScale","HTMLElement","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","getCanvasPosition","appendImage","tag","visible","isVisible","isContentVisible","absDet","sqNorm1","sqNorm2","pixelHeight","EPSILON","op","raw","shadingIR","ShadingIRs","fromIR","applyBoundingBox","Path2D","region","RadialAxial","colorStops","r1","grad","createLinearGradient","createRadialGradient","addColorStop","createMeshCanvas","drawTriangle","c1","c2","c3","colors","rowSize","tmp","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","drawFigure","figure","ps","cs","verticesPerRow","rows","cols","q","combinesScale","figures","backgroundColor","boundsWidth","boundsHeight","paddedWidth","BORDER_SIZE","paddedHeight","drawFigures","Mesh","owner","matrixScale","temporaryPatternCanvas","createPattern","Dummy","PaintType","COLORED","UNCOLORED","xstep","ystep","paintType","tilingType","createPatternCanvas","curMatrixScale","combinedScale","dimx","getSizeAndScale","dimy","graphics","setFillAndStrokeStyleToContext","clipBbox","realOutputSize","maxSize","bboxWidth","bboxHeight","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","event","stream","_processStreamMessage","action","cbSourceName","cbTargetName","postMessage","_createStreamSink","actionName","handler","ah","_postMessage","queueingStrategy","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","cancelCapability","self","streamSink","isCancelled","lastDesiredSize","sinkCapability","success","_deleteStreamController","allSettled","_xml_parser","_repair","parser","SimpleXMLParser","lowerCaseName","xmlDocument","parseFromString","_metadataMap","_parse","_data","codes","chars","nodeName","childNodes","filter","node","hasChildNodes","seqNode","authors","_getSequence","trim","rdf","firstChild","nextSibling","_getCreators","SimpleDOMNode","XMLParserErrorCode","NoError","EndOfDocument","UnterminatedCdat","UnterminatedXmlDeclaration","UnterminatedDoctypeDeclaration","UnterminatedComment","MalformedElement","OutOfMemory","UnterminatedAttributeValue","UnterminatedElement","ElementNeverBegun","isWhitespace","ch","XMLParserBase","fromCodePoint","onResolveEntity","attributes","skipWs","attrName","attrValue","attrEndChar","attrEndIndex","_resolveEntities","parsed","attrStart","ch2","onError","onEndElement","pi","_parseProcessingInstruction","onPi","onComment","onCdata","q2","complexDoctype","doctypeContent","onDoctype","content","_parseContent","onBeginElement","onText","isEmpty","nodeValue","parentNode","child","component","stack","parent","siblingPos","searchNode","currentPos","newPos","attribute","dump","hasAttributes","_currentFragment","_stack","_errorCode","_hasAttributes","_lowerCaseName","parseXml","isWhitespaceString","toLowerCase","lastElement","OptionalContentGroup","creator","_order","_groups","order","groups","baseState","off","expression","policy","ids","from","_queuedChunks","_progressiveDone","_pdfDataRangeTransport","_isStreamingSupported","_isRangeSupported","_contentLength","_fullRequestReader","_rangeReaders","addRangeListener","_onReceiveData","addProgressListener","_onProgress","addProgressiveReadListener","addProgressiveDoneListener","_onProgressiveDone","transportReady","_enqueue","found","some","_begin","_progressiveDataLength","_loaded","firstReader","queuedChunks","PDFDataTransportStreamReader","PDFDataTransportStreamRangeReader","requestDataRange","readers","abort","_stream","_done","_filename","_requests","_headersReady","requestCapability","_end","_queuedChunk","requestsCapability","_removeRangeReader","_enabled","WebGLUtils","tryInitGL","loadShader","gl","shaderType","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errorMsg","getShaderInfoLog","createVertexShader","VERTEX_SHADER","createFragmentShader","FRAGMENT_SHADER","createProgram","shaders","program","attachShader","linkProgram","linked","getProgramParameter","LINK_STATUS","getProgramInfoLog","createTexture","textureId","activeTexture","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","currentGL","currentCanvas","generateGL","premultipliedalpha","smaskVertexShaderCode","smaskFragmentShaderCode","smaskCache","figuresVertexShaderCode","figuresFragmentShaderCode","figuresCache","vertexShader","fragmentShader","useProgram","resolutionLocation","getUniformLocation","positionLocation","getAttribLocation","backdropLocation","subtypeLocation","texCoordLocation","texLayerLocation","texMaskLocation","texCoordBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform1i","initSmaskGL","drawingBufferWidth","drawingBufferHeight","uniform2f","uniform4f","TEXTURE0","maskTexture","TEXTURE1","clearColor","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","COLOR_BUFFER_BIT","drawArrays","TRIANGLES","flush","deleteTexture","deleteBuffer","scaleLocation","offsetLocation","colorLocation","initFiguresGL","coordsMap","colorsMap","pIndex","cIndex","col","jj","coordsBuffer","colorsBuffer","_scripting_utils","AnnotationElementFactory","parameters","annotationType","LinkAnnotationElement","TextAnnotationElement","fieldType","TextWidgetAnnotationElement","radioButton","RadioButtonWidgetAnnotationElement","checkBox","CheckboxWidgetAnnotationElement","PushButtonWidgetAnnotationElement","ChoiceWidgetAnnotationElement","WidgetAnnotationElement","PopupAnnotationElement","FreeTextAnnotationElement","LineAnnotationElement","SquareAnnotationElement","CircleAnnotationElement","PolylineAnnotationElement","CaretAnnotationElement","InkAnnotationElement","PolygonAnnotationElement","HighlightAnnotationElement","UnderlineAnnotationElement","SquigglyAnnotationElement","StrikeOutAnnotationElement","StampAnnotationElement","FileAttachmentAnnotationElement","AnnotationElement","isRenderable","ignoreBorder","createQuadrilaterals","linkService","downloadManager","imageResourcesPath","svgFactory","enableScripting","_mouseState","mouseState","container","_createContainer","quadrilaterals","_createQuadrilaterals","transformOrigin","borderStyle","borderWidth","horizontalRadius","horizontalCornerRadius","verticalRadius","verticalCornerRadius","radius","borderRadius","borderBottomStyle","borderColor","quadPoints","savedRect","quadPoint","trigger","popupElement","PopupElement","modificationDate","contents","hideWrapper","popup","render","className","quadrilateral","isTooltipOnly","actions","Action","newWindow","externalLinkTarget","externalLinkRel","externalLinkEnabled","_bindNamedAction","_bindLink","_bindJSAction","_renderQuadrilaterals","linkElement","cloneNode","destination","getDestinationHash","goToDestination","getAnchorUrl","executeNamedAction","jsName","eventBus","dispatch","detail","hasPopup","alt","dataset","l10nId","l10nArgs","JSON","stringify","_createPopup","alternativeText","platform","ctrlKey","metaKey","baseName","eventName","valueGetter","shiftKey","modifier","_getKeyModifier","checked","getter","_setEventListener","hasAppearance","fieldValue","storage","getOrCreateValue","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","multiLine","setValue","blurListener","setSelectionRange","valueAsString","activeElement","focus","preventScroll","userName","hidden","disabled","editable","selStart","selEnd","selRange","ColorConverters","commitKey","willCommit","selectionStart","selectionEnd","_blurListener","isDown","change","_setEventListeners","readOnly","fieldName","maxLen","maxLength","comb","fieldWidth","combWidth","classList","letterSpacing","verticalAlign","display","_setTextStyle","TEXT_ALIGNMENT","fontColor","defaultAppearanceData","textAlignment","textAlign","checkbox","getElementsByName","getAttribute","buttonValue","radio","radioId","selectElement","combo","options","multiSelect","multiple","option","optionElement","displayValue","exportValue","getValue","selectedIndex","changeEx","keyDown","parentType","selector","parentId","parentElements","querySelectorAll","parentRect","popupLeft","popupTop","pinned","hideElement","dateObject","toDateObject","toLocaleDateString","toLocaleTimeString","_formatContents","_toggle","_show","_hide","lines","line","createTextNode","pin","hasAttribute","removeAttribute","zIndex","unpin","lineCoordinates","append","square","circle","containerClassName","svgElementName","coordinate","vertices","polyline","inkList","inkLists","file","_download","downloadData","sortedAnnotations","popupAnnotations","annotations","rendered","renderedElement","prepend","elements","makeColorComp","G","R","B","components","RGB_HTML","CMYK_RGB","MAX_TEXT_DIVS_TO_RENDER","NonWhitespaceRegexp","appendText","geom","textDiv","textDivProperties","canvasWidth","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","_textDivs","_textDivProperties","tx","_viewport","atan2","fontName","fontHeight","fontAscent","ascent","descent","_fontInspectorEnabled","shouldScaleText","absScaleX","absScaleY","_textContentStream","_layoutText","_enhanceTextSelection","angleCos","angleSin","divWidth","divHeight","_bounds","right","bottom","_canceled","textDivs","textDivsLength","_renderingDone","findPositiveMin","ts","t","expand","expanded","boxes","box","x1New","x2New","expandBoundsLTR","expandBounds","divProperties","Float64Array","boxScale","fakeBoundary","Infinity","horizon","boundary","horizonPart","affectedBoundary","maxXNew","xNew","changedHorizon","lastBoundary","useBoundary","unshift","used","concat","TextLayerRenderTask","textContentStream","textContentItemsStr","enhanceTextSelection","_textContent","_container","_textContentItemsStr","_reader","_layoutTextLastFontSize","_layoutTextLastFontFamily","_layoutTextCtx","_renderTimer","styleCache","len","_render","timeout","mozOpaque","textItems","textStyles","_processItems","expandTextDivs","expandDivs","transformBuf","paddingBuf","divProps","padding","renderParameters","SVG_DEFAULTS","fontStyle","fontWeight","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","writePngChunk","crc","crc32","deflateSyncUncompressed","literals","deflateBlocks","idat","adler","adler32","encode","isMask","bitDepth","colorType","offsetLiterals","offsetBytes","ihdr","Buffer","output","deflateSync","pngLength","SVGExtraState","dependencies","activeClipUrl","clipGroup","maskId","pf","toFixed","pm","acos","clipCount","maskCount","shadingCount","transformMatrix","transformStack","extraStack","embedFonts","embeddedFonts","cssStyle","_operatorIdMapping","tgrp","executeOpTree","svgElement","loadDependencies","convertOpList","operatorIdMapping","opList","fn","opTree","opListElement","opListToTree","opTreeElement","lineMatrix","xcoords","ycoords","tspan","setAttributeNS","txtElement","txtgrp","lineWidthScale","_setStrokeAttributes","_ensureTransformGroup","defs","addFontStyle","_makeColorN_Pattern","inverseTransform","_makeShadingPattern","_makeTilingPattern","tilingId","tx0","ty0","tx1","ty1","xscale","yscale","txstep","tystep","tiling","shadingId","gradient","point0","point1","focalPoint","circlePoint","focalRadius","circleRadius","colorStop","stop","getAttributeNS","clipId","clipPath","clipElement","setStrokeAlpha","setFillAlpha","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","_network_utils","http","https","fileUriRegex","sourceUrl","parsedUrl","parse","host","parseUrl","isHttp","isFsUrl","_rangeRequestReaders","PDFNodeStreamFsFullReader","PDFNodeStreamFullReader","PDFNodeStreamFsRangeReader","PDFNodeStreamRangeReader","BaseFullReader","_url","_storedError","_disableRange","_rangeChunkSize","_readableStream","_readCapability","_headersCapability","_error","BaseRangeReader","createRequestOptions","headers","auth","hostname","method","handleResponse","statusCode","_setReadableStream","getResponseHeader","allowRangeRequests","suggestedLength","validateRangeRequestCapabilities","extractFilenameFromHeader","_request","_httpHeaders","Range","lstat","stat","createReadStream","createResponseStatusError","contentDisposition","_content_disposition","getFilenameFromContentDispositionHeader","returnValues","validateResponseStatus","needsEncodingFixup","toParamRegExp","rfc2616unquote","fixupEncoding","rfc2047decode","rfc5987decode","contentDispositionStr","iter","quot","part","parts","rfc2231getparam","attributePattern","flags","textdecode","encoding","decoder","TextDecoder","fatal","decode","err","quotindex","extvalue","encodingend","langvalue","charset","hex","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","NetworkManager","getXhr","currXhrId","pendingRequests","listeners","xhr","xhrId","pendingRequest","setRequestHeader","expectedStatus","onStateChange","onprogress","onHeadersReceived","onDone","xhrStatus","ok_response_on_range_request","getArrayBuffer","rangeHeader","_source","_manager","PDFNetworkStreamFullRequestReader","PDFNetworkStreamRangeRequestReader","onClosed","_onRangeRequestReaderClosed","manager","_onHeadersReceived","_onDone","_onError","_fullRequestId","requestFull","_headersReceivedCapability","_cachedChunks","fullRequestXhrId","fullRequestXhr","getRequestXhr","abortRequest","lengthComputable","isPendingRequest","_requestId","requestRange","_close","createFetchOptions","abortController","signal","credentials","redirect","createHeaders","Headers","PDFFetchStreamReader","PDFFetchStreamRangeReader","_withCredentials","AbortController","_abortController","_headers","__webpack_module_cache__","moduleId","module","pdfjs"],"mappings":"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","file":"../skylark-pdfjs-display-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        ns[name] = obj2 || {};\r\n        return ns[name];\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-pdfjs-display/pdf',[\n],function(){\nreturn /******/ (() => { // webpackBootstrap\n/******/  \"use strict\";\n/******/  var __webpack_modules__ = ([\n/* 0 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  Object.defineProperty(exports, \"addLinkAttributes\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.addLinkAttributes;\n    }\n  }));\n  Object.defineProperty(exports, \"getFilenameFromUrl\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.getFilenameFromUrl;\n    }\n  }));\n  Object.defineProperty(exports, \"LinkTarget\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.LinkTarget;\n    }\n  }));\n  Object.defineProperty(exports, \"loadScript\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.loadScript;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFDateString\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.PDFDateString;\n    }\n  }));\n  Object.defineProperty(exports, \"RenderingCancelledException\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.RenderingCancelledException;\n    }\n  }));\n  Object.defineProperty(exports, \"build\", ({\n    enumerable: true,\n    get: function () {\n      return _api.build;\n    }\n  }));\n  Object.defineProperty(exports, \"getDocument\", ({\n    enumerable: true,\n    get: function () {\n      return _api.getDocument;\n    }\n  }));\n  Object.defineProperty(exports, \"LoopbackPort\", ({\n    enumerable: true,\n    get: function () {\n      return _api.LoopbackPort;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFDataRangeTransport\", ({\n    enumerable: true,\n    get: function () {\n      return _api.PDFDataRangeTransport;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFWorker\", ({\n    enumerable: true,\n    get: function () {\n      return _api.PDFWorker;\n    }\n  }));\n  Object.defineProperty(exports, \"version\", ({\n    enumerable: true,\n    get: function () {\n      return _api.version;\n    }\n  }));\n  Object.defineProperty(exports, \"CMapCompressionType\", ({\n    enumerable: true,\n    get: function () {\n      return _util.CMapCompressionType;\n    }\n  }));\n  Object.defineProperty(exports, \"createObjectURL\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createObjectURL;\n    }\n  }));\n  Object.defineProperty(exports, \"createPromiseCapability\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createPromiseCapability;\n    }\n  }));\n  Object.defineProperty(exports, \"createValidAbsoluteUrl\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createValidAbsoluteUrl;\n    }\n  }));\n  Object.defineProperty(exports, \"InvalidPDFException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.InvalidPDFException;\n    }\n  }));\n  Object.defineProperty(exports, \"MissingPDFException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.MissingPDFException;\n    }\n  }));\n  Object.defineProperty(exports, \"OPS\", ({\n    enumerable: true,\n    get: function () {\n      return _util.OPS;\n    }\n  }));\n  Object.defineProperty(exports, \"PasswordResponses\", ({\n    enumerable: true,\n    get: function () {\n      return _util.PasswordResponses;\n    }\n  }));\n  Object.defineProperty(exports, \"PermissionFlag\", ({\n    enumerable: true,\n    get: function () {\n      return _util.PermissionFlag;\n    }\n  }));\n  Object.defineProperty(exports, \"removeNullCharacters\", ({\n    enumerable: true,\n    get: function () {\n      return _util.removeNullCharacters;\n    }\n  }));\n  Object.defineProperty(exports, \"shadow\", ({\n    enumerable: true,\n    get: function () {\n      return _util.shadow;\n    }\n  }));\n  Object.defineProperty(exports, \"UnexpectedResponseException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.UnexpectedResponseException;\n    }\n  }));\n  Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", ({\n    enumerable: true,\n    get: function () {\n      return _util.UNSUPPORTED_FEATURES;\n    }\n  }));\n  Object.defineProperty(exports, \"Util\", ({\n    enumerable: true,\n    get: function () {\n      return _util.Util;\n    }\n  }));\n  Object.defineProperty(exports, \"VerbosityLevel\", ({\n    enumerable: true,\n    get: function () {\n      return _util.VerbosityLevel;\n    }\n  }));\n  Object.defineProperty(exports, \"AnnotationLayer\", ({\n    enumerable: true,\n    get: function () {\n      return _annotation_layer.AnnotationLayer;\n    }\n  }));\n  Object.defineProperty(exports, \"apiCompatibilityParams\", ({\n    enumerable: true,\n    get: function () {\n      return _api_compatibility.apiCompatibilityParams;\n    }\n  }));\n  Object.defineProperty(exports, \"GlobalWorkerOptions\", ({\n    enumerable: true,\n    get: function () {\n      return _worker_options.GlobalWorkerOptions;\n    }\n  }));\n  Object.defineProperty(exports, \"renderTextLayer\", ({\n    enumerable: true,\n    get: function () {\n      return _text_layer.renderTextLayer;\n    }\n  }));\n  Object.defineProperty(exports, \"SVGGraphics\", ({\n    enumerable: true,\n    get: function () {\n      return _svg.SVGGraphics;\n    }\n  }));\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _api = __w_pdfjs_require__(5);\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _annotation_layer = __w_pdfjs_require__(19);\n\n  var _api_compatibility = __w_pdfjs_require__(9);\n\n  var _worker_options = __w_pdfjs_require__(12);\n\n  var _text_layer = __w_pdfjs_require__(21);\n\n  var _svg = __w_pdfjs_require__(22);\n\n  const pdfjsVersion = '2.7.570';\n  const pdfjsBuild = 'f2c7338b0';\n  {\n    const {\n      isNodeJS\n    } = __w_pdfjs_require__(4);\n\n    if (isNodeJS) {\n      const PDFNodeStream = __w_pdfjs_require__(23).PDFNodeStream;\n\n      (0, _api.setPDFNetworkStreamFactory)(params => {\n        return new PDFNodeStream(params);\n      });\n    } else {\n      const PDFNetworkStream = __w_pdfjs_require__(26).PDFNetworkStream;\n\n      let PDFFetchStream;\n\n      if ((0, _display_utils.isFetchSupported)()) {\n        PDFFetchStream = __w_pdfjs_require__(27).PDFFetchStream;\n      }\n\n      (0, _api.setPDFNetworkStreamFactory)(params => {\n        if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {\n          return new PDFFetchStream(params);\n        }\n\n        return new PDFNetworkStream(params);\n      });\n    }\n  }\n\n  /***/ }),\n  /* 1 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.addLinkAttributes = addLinkAttributes;\n  exports.deprecated = deprecated;\n  exports.getFilenameFromUrl = getFilenameFromUrl;\n  exports.isFetchSupported = isFetchSupported;\n  exports.isValidFetchUrl = isValidFetchUrl;\n  exports.loadScript = loadScript;\n  exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n  exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\n  const SVG_NS = \"http://www.w3.org/2000/svg\";\n\n  class BaseCanvasFactory {\n    constructor() {\n      if (this.constructor === BaseCanvasFactory) {\n        (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n      }\n    }\n\n    create(width, height) {\n      (0, _util.unreachable)(\"Abstract method `create` called.\");\n    }\n\n    reset(canvasAndContext, width, height) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      canvasAndContext.canvas.width = width;\n      canvasAndContext.canvas.height = height;\n    }\n\n    destroy(canvasAndContext) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      canvasAndContext.canvas.width = 0;\n      canvasAndContext.canvas.height = 0;\n      canvasAndContext.canvas = null;\n      canvasAndContext.context = null;\n    }\n\n  }\n\n  exports.BaseCanvasFactory = BaseCanvasFactory;\n\n  class DOMCanvasFactory extends BaseCanvasFactory {\n    constructor({\n      ownerDocument = globalThis.document\n    } = {}) {\n      super();\n      this._document = ownerDocument;\n    }\n\n    create(width, height) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      const canvas = this._document.createElement(\"canvas\");\n\n      const context = canvas.getContext(\"2d\");\n      canvas.width = width;\n      canvas.height = height;\n      return {\n        canvas,\n        context\n      };\n    }\n\n  }\n\n  exports.DOMCanvasFactory = DOMCanvasFactory;\n\n  class BaseCMapReaderFactory {\n    constructor({\n      baseUrl = null,\n      isCompressed = false\n    }) {\n      if (this.constructor === BaseCMapReaderFactory) {\n        (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n      }\n\n      this.baseUrl = baseUrl;\n      this.isCompressed = isCompressed;\n    }\n\n    async fetch({\n      name\n    }) {\n      if (!this.baseUrl) {\n        throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n      }\n\n      if (!name) {\n        throw new Error(\"CMap name must be specified.\");\n      }\n\n      const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n      const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n      return this._fetchData(url, compressionType).catch(reason => {\n        throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n      });\n    }\n\n    _fetchData(url, compressionType) {\n      (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n    }\n\n  }\n\n  exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n  class DOMCMapReaderFactory extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {\n        return fetch(url).then(async response => {\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          let cMapData;\n\n          if (this.isCompressed) {\n            cMapData = new Uint8Array(await response.arrayBuffer());\n          } else {\n            cMapData = (0, _util.stringToBytes)(await response.text());\n          }\n\n          return {\n            cMapData,\n            compressionType\n          };\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n\n        if (this.isCompressed) {\n          request.responseType = \"arraybuffer\";\n        }\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== XMLHttpRequest.DONE) {\n            return;\n          }\n\n          if (request.status === 200 || request.status === 0) {\n            let cMapData;\n\n            if (this.isCompressed && request.response) {\n              cMapData = new Uint8Array(request.response);\n            } else if (!this.isCompressed && request.responseText) {\n              cMapData = (0, _util.stringToBytes)(request.responseText);\n            }\n\n            if (cMapData) {\n              resolve({\n                cMapData,\n                compressionType\n              });\n              return;\n            }\n          }\n\n          reject(new Error(request.statusText));\n        };\n\n        request.send(null);\n      });\n    }\n\n  }\n\n  exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n  class DOMSVGFactory {\n    create(width, height) {\n      (0, _util.assert)(width > 0 && height > 0, \"Invalid SVG dimensions\");\n      const svg = document.createElementNS(SVG_NS, \"svg:svg\");\n      svg.setAttribute(\"version\", \"1.1\");\n      svg.setAttribute(\"width\", width + \"px\");\n      svg.setAttribute(\"height\", height + \"px\");\n      svg.setAttribute(\"preserveAspectRatio\", \"none\");\n      svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n      return svg;\n    }\n\n    createElement(type) {\n      (0, _util.assert)(typeof type === \"string\", \"Invalid SVG element type\");\n      return document.createElementNS(SVG_NS, type);\n    }\n\n  }\n\n  exports.DOMSVGFactory = DOMSVGFactory;\n\n  class PageViewport {\n    constructor({\n      viewBox,\n      scale,\n      rotation,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    }) {\n      this.viewBox = viewBox;\n      this.scale = scale;\n      this.rotation = rotation;\n      this.offsetX = offsetX;\n      this.offsetY = offsetY;\n      const centerX = (viewBox[2] + viewBox[0]) / 2;\n      const centerY = (viewBox[3] + viewBox[1]) / 2;\n      let rotateA, rotateB, rotateC, rotateD;\n      rotation = rotation % 360;\n      rotation = rotation < 0 ? rotation + 360 : rotation;\n\n      switch (rotation) {\n        case 180:\n          rotateA = -1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = 1;\n          break;\n\n        case 90:\n          rotateA = 0;\n          rotateB = 1;\n          rotateC = 1;\n          rotateD = 0;\n          break;\n\n        case 270:\n          rotateA = 0;\n          rotateB = -1;\n          rotateC = -1;\n          rotateD = 0;\n          break;\n\n        case 0:\n          rotateA = 1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = -1;\n          break;\n\n        default:\n          throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n      }\n\n      if (dontFlip) {\n        rotateC = -rotateC;\n        rotateD = -rotateD;\n      }\n\n      let offsetCanvasX, offsetCanvasY;\n      let width, height;\n\n      if (rotateA === 0) {\n        offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n        width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n        height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      } else {\n        offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n        width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n        height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      }\n\n      this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n      this.width = width;\n      this.height = height;\n    }\n\n    clone({\n      scale = this.scale,\n      rotation = this.rotation,\n      offsetX = this.offsetX,\n      offsetY = this.offsetY,\n      dontFlip = false\n    } = {}) {\n      return new PageViewport({\n        viewBox: this.viewBox.slice(),\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n\n    convertToViewportPoint(x, y) {\n      return _util.Util.applyTransform([x, y], this.transform);\n    }\n\n    convertToViewportRectangle(rect) {\n      const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n      const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n      return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n    }\n\n    convertToPdfPoint(x, y) {\n      return _util.Util.applyInverseTransform([x, y], this.transform);\n    }\n\n  }\n\n  exports.PageViewport = PageViewport;\n\n  class RenderingCancelledException extends _util.BaseException {\n    constructor(msg, type) {\n      super(msg);\n      this.type = type;\n    }\n\n  }\n\n  exports.RenderingCancelledException = RenderingCancelledException;\n  const LinkTarget = {\n    NONE: 0,\n    SELF: 1,\n    BLANK: 2,\n    PARENT: 3,\n    TOP: 4\n  };\n  exports.LinkTarget = LinkTarget;\n\n  function addLinkAttributes(link, {\n    url,\n    target,\n    rel,\n    enabled = true\n  } = {}) {\n    (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n    const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n    if (enabled) {\n      link.href = link.title = urlNullRemoved;\n    } else {\n      link.href = \"\";\n      link.title = `Disabled: ${urlNullRemoved}`;\n\n      link.onclick = () => {\n        return false;\n      };\n    }\n\n    let targetStr = \"\";\n\n    switch (target) {\n      case LinkTarget.NONE:\n        break;\n\n      case LinkTarget.SELF:\n        targetStr = \"_self\";\n        break;\n\n      case LinkTarget.BLANK:\n        targetStr = \"_blank\";\n        break;\n\n      case LinkTarget.PARENT:\n        targetStr = \"_parent\";\n        break;\n\n      case LinkTarget.TOP:\n        targetStr = \"_top\";\n        break;\n    }\n\n    link.target = targetStr;\n    link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n  }\n\n  function getFilenameFromUrl(url) {\n    const anchor = url.indexOf(\"#\");\n    const query = url.indexOf(\"?\");\n    const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n    return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n  }\n\n  class StatTimer {\n    constructor() {\n      this.started = Object.create(null);\n      this.times = [];\n    }\n\n    time(name) {\n      if (name in this.started) {\n        (0, _util.warn)(`Timer is already running for ${name}`);\n      }\n\n      this.started[name] = Date.now();\n    }\n\n    timeEnd(name) {\n      if (!(name in this.started)) {\n        (0, _util.warn)(`Timer has not been started for ${name}`);\n      }\n\n      this.times.push({\n        name,\n        start: this.started[name],\n        end: Date.now()\n      });\n      delete this.started[name];\n    }\n\n    toString() {\n      const outBuf = [];\n      let longest = 0;\n\n      for (const time of this.times) {\n        const name = time.name;\n\n        if (name.length > longest) {\n          longest = name.length;\n        }\n      }\n\n      for (const time of this.times) {\n        const duration = time.end - time.start;\n        outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n      }\n\n      return outBuf.join(\"\");\n    }\n\n  }\n\n  exports.StatTimer = StatTimer;\n\n  function isFetchSupported() {\n    return typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype && typeof ReadableStream !== \"undefined\";\n  }\n\n  function isValidFetchUrl(url, baseUrl) {\n    try {\n      const {\n        protocol\n      } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n      return protocol === \"http:\" || protocol === \"https:\";\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  function loadScript(src, removeScriptElement = false) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = src;\n\n      script.onload = function (evt) {\n        if (removeScriptElement) {\n          script.remove();\n        }\n\n        resolve(evt);\n      };\n\n      script.onerror = function () {\n        reject(new Error(`Cannot load script at: ${script.src}`));\n      };\n\n      (document.head || document.documentElement).appendChild(script);\n    });\n  }\n\n  function deprecated(details) {\n    console.log(\"Deprecated API usage: \" + details);\n  }\n\n  let pdfDateStringRegex;\n\n  class PDFDateString {\n    static toDateObject(input) {\n      if (!input || !(0, _util.isString)(input)) {\n        return null;\n      }\n\n      if (!pdfDateStringRegex) {\n        pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n      }\n\n      const matches = pdfDateStringRegex.exec(input);\n\n      if (!matches) {\n        return null;\n      }\n\n      const year = parseInt(matches[1], 10);\n      let month = parseInt(matches[2], 10);\n      month = month >= 1 && month <= 12 ? month - 1 : 0;\n      let day = parseInt(matches[3], 10);\n      day = day >= 1 && day <= 31 ? day : 1;\n      let hour = parseInt(matches[4], 10);\n      hour = hour >= 0 && hour <= 23 ? hour : 0;\n      let minute = parseInt(matches[5], 10);\n      minute = minute >= 0 && minute <= 59 ? minute : 0;\n      let second = parseInt(matches[6], 10);\n      second = second >= 0 && second <= 59 ? second : 0;\n      const universalTimeRelation = matches[7] || \"Z\";\n      let offsetHour = parseInt(matches[8], 10);\n      offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n      let offsetMinute = parseInt(matches[9], 10) || 0;\n      offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n      if (universalTimeRelation === \"-\") {\n        hour += offsetHour;\n        minute += offsetMinute;\n      } else if (universalTimeRelation === \"+\") {\n        hour -= offsetHour;\n        minute -= offsetMinute;\n      }\n\n      return new Date(Date.UTC(year, month, day, hour, minute, second));\n    }\n\n  }\n\n  exports.PDFDateString = PDFDateString;\n\n  /***/ }),\n  /* 2 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.arrayByteLength = arrayByteLength;\n  exports.arraysToBytes = arraysToBytes;\n  exports.assert = assert;\n  exports.bytesToString = bytesToString;\n  exports.createPromiseCapability = createPromiseCapability;\n  exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n  exports.encodeToXmlString = encodeToXmlString;\n  exports.escapeString = escapeString;\n  exports.getModificationDate = getModificationDate;\n  exports.getVerbosityLevel = getVerbosityLevel;\n  exports.info = info;\n  exports.isArrayBuffer = isArrayBuffer;\n  exports.isArrayEqual = isArrayEqual;\n  exports.isAscii = isAscii;\n  exports.isBool = isBool;\n  exports.isNum = isNum;\n  exports.isSameOrigin = isSameOrigin;\n  exports.isString = isString;\n  exports.objectFromEntries = objectFromEntries;\n  exports.objectSize = objectSize;\n  exports.removeNullCharacters = removeNullCharacters;\n  exports.setVerbosityLevel = setVerbosityLevel;\n  exports.shadow = shadow;\n  exports.string32 = string32;\n  exports.stringToBytes = stringToBytes;\n  exports.stringToPDFString = stringToPDFString;\n  exports.stringToUTF16BEString = stringToUTF16BEString;\n  exports.stringToUTF8String = stringToUTF8String;\n  exports.unreachable = unreachable;\n  exports.utf8StringToString = utf8StringToString;\n  exports.warn = warn;\n  exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.createObjectURL = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n  __w_pdfjs_require__(3);\n\n  const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n  exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n  const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n  exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n  const PermissionFlag = {\n    PRINT: 0x04,\n    MODIFY_CONTENTS: 0x08,\n    COPY: 0x10,\n    MODIFY_ANNOTATIONS: 0x20,\n    FILL_INTERACTIVE_FORMS: 0x100,\n    COPY_FOR_ACCESSIBILITY: 0x200,\n    ASSEMBLE: 0x400,\n    PRINT_HIGH_QUALITY: 0x800\n  };\n  exports.PermissionFlag = PermissionFlag;\n  const TextRenderingMode = {\n    FILL: 0,\n    STROKE: 1,\n    FILL_STROKE: 2,\n    INVISIBLE: 3,\n    FILL_ADD_TO_PATH: 4,\n    STROKE_ADD_TO_PATH: 5,\n    FILL_STROKE_ADD_TO_PATH: 6,\n    ADD_TO_PATH: 7,\n    FILL_STROKE_MASK: 3,\n    ADD_TO_PATH_FLAG: 4\n  };\n  exports.TextRenderingMode = TextRenderingMode;\n  const ImageKind = {\n    GRAYSCALE_1BPP: 1,\n    RGB_24BPP: 2,\n    RGBA_32BPP: 3\n  };\n  exports.ImageKind = ImageKind;\n  const AnnotationType = {\n    TEXT: 1,\n    LINK: 2,\n    FREETEXT: 3,\n    LINE: 4,\n    SQUARE: 5,\n    CIRCLE: 6,\n    POLYGON: 7,\n    POLYLINE: 8,\n    HIGHLIGHT: 9,\n    UNDERLINE: 10,\n    SQUIGGLY: 11,\n    STRIKEOUT: 12,\n    STAMP: 13,\n    CARET: 14,\n    INK: 15,\n    POPUP: 16,\n    FILEATTACHMENT: 17,\n    SOUND: 18,\n    MOVIE: 19,\n    WIDGET: 20,\n    SCREEN: 21,\n    PRINTERMARK: 22,\n    TRAPNET: 23,\n    WATERMARK: 24,\n    THREED: 25,\n    REDACT: 26\n  };\n  exports.AnnotationType = AnnotationType;\n  const AnnotationStateModelType = {\n    MARKED: \"Marked\",\n    REVIEW: \"Review\"\n  };\n  exports.AnnotationStateModelType = AnnotationStateModelType;\n  const AnnotationMarkedState = {\n    MARKED: \"Marked\",\n    UNMARKED: \"Unmarked\"\n  };\n  exports.AnnotationMarkedState = AnnotationMarkedState;\n  const AnnotationReviewState = {\n    ACCEPTED: \"Accepted\",\n    REJECTED: \"Rejected\",\n    CANCELLED: \"Cancelled\",\n    COMPLETED: \"Completed\",\n    NONE: \"None\"\n  };\n  exports.AnnotationReviewState = AnnotationReviewState;\n  const AnnotationReplyType = {\n    GROUP: \"Group\",\n    REPLY: \"R\"\n  };\n  exports.AnnotationReplyType = AnnotationReplyType;\n  const AnnotationFlag = {\n    INVISIBLE: 0x01,\n    HIDDEN: 0x02,\n    PRINT: 0x04,\n    NOZOOM: 0x08,\n    NOROTATE: 0x10,\n    NOVIEW: 0x20,\n    READONLY: 0x40,\n    LOCKED: 0x80,\n    TOGGLENOVIEW: 0x100,\n    LOCKEDCONTENTS: 0x200\n  };\n  exports.AnnotationFlag = AnnotationFlag;\n  const AnnotationFieldFlag = {\n    READONLY: 0x0000001,\n    REQUIRED: 0x0000002,\n    NOEXPORT: 0x0000004,\n    MULTILINE: 0x0001000,\n    PASSWORD: 0x0002000,\n    NOTOGGLETOOFF: 0x0004000,\n    RADIO: 0x0008000,\n    PUSHBUTTON: 0x0010000,\n    COMBO: 0x0020000,\n    EDIT: 0x0040000,\n    SORT: 0x0080000,\n    FILESELECT: 0x0100000,\n    MULTISELECT: 0x0200000,\n    DONOTSPELLCHECK: 0x0400000,\n    DONOTSCROLL: 0x0800000,\n    COMB: 0x1000000,\n    RICHTEXT: 0x2000000,\n    RADIOSINUNISON: 0x2000000,\n    COMMITONSELCHANGE: 0x4000000\n  };\n  exports.AnnotationFieldFlag = AnnotationFieldFlag;\n  const AnnotationBorderStyleType = {\n    SOLID: 1,\n    DASHED: 2,\n    BEVELED: 3,\n    INSET: 4,\n    UNDERLINE: 5\n  };\n  exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n  const AnnotationActionEventType = {\n    E: \"Mouse Enter\",\n    X: \"Mouse Exit\",\n    D: \"Mouse Down\",\n    U: \"Mouse Up\",\n    Fo: \"Focus\",\n    Bl: \"Blur\",\n    PO: \"PageOpen\",\n    PC: \"PageClose\",\n    PV: \"PageVisible\",\n    PI: \"PageInvisible\",\n    K: \"Keystroke\",\n    F: \"Format\",\n    V: \"Validate\",\n    C: \"Calculate\"\n  };\n  exports.AnnotationActionEventType = AnnotationActionEventType;\n  const DocumentActionEventType = {\n    WC: \"WillClose\",\n    WS: \"WillSave\",\n    DS: \"DidSave\",\n    WP: \"WillPrint\",\n    DP: \"DidPrint\"\n  };\n  exports.DocumentActionEventType = DocumentActionEventType;\n  const PageActionEventType = {\n    O: \"PageOpen\",\n    C: \"PageClose\"\n  };\n  exports.PageActionEventType = PageActionEventType;\n  const StreamType = {\n    UNKNOWN: \"UNKNOWN\",\n    FLATE: \"FLATE\",\n    LZW: \"LZW\",\n    DCT: \"DCT\",\n    JPX: \"JPX\",\n    JBIG: \"JBIG\",\n    A85: \"A85\",\n    AHX: \"AHX\",\n    CCF: \"CCF\",\n    RLX: \"RLX\"\n  };\n  exports.StreamType = StreamType;\n  const FontType = {\n    UNKNOWN: \"UNKNOWN\",\n    TYPE1: \"TYPE1\",\n    TYPE1C: \"TYPE1C\",\n    CIDFONTTYPE0: \"CIDFONTTYPE0\",\n    CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n    TRUETYPE: \"TRUETYPE\",\n    CIDFONTTYPE2: \"CIDFONTTYPE2\",\n    TYPE3: \"TYPE3\",\n    OPENTYPE: \"OPENTYPE\",\n    TYPE0: \"TYPE0\",\n    MMTYPE1: \"MMTYPE1\"\n  };\n  exports.FontType = FontType;\n  const VerbosityLevel = {\n    ERRORS: 0,\n    WARNINGS: 1,\n    INFOS: 5\n  };\n  exports.VerbosityLevel = VerbosityLevel;\n  const CMapCompressionType = {\n    NONE: 0,\n    BINARY: 1,\n    STREAM: 2\n  };\n  exports.CMapCompressionType = CMapCompressionType;\n  const OPS = {\n    dependency: 1,\n    setLineWidth: 2,\n    setLineCap: 3,\n    setLineJoin: 4,\n    setMiterLimit: 5,\n    setDash: 6,\n    setRenderingIntent: 7,\n    setFlatness: 8,\n    setGState: 9,\n    save: 10,\n    restore: 11,\n    transform: 12,\n    moveTo: 13,\n    lineTo: 14,\n    curveTo: 15,\n    curveTo2: 16,\n    curveTo3: 17,\n    closePath: 18,\n    rectangle: 19,\n    stroke: 20,\n    closeStroke: 21,\n    fill: 22,\n    eoFill: 23,\n    fillStroke: 24,\n    eoFillStroke: 25,\n    closeFillStroke: 26,\n    closeEOFillStroke: 27,\n    endPath: 28,\n    clip: 29,\n    eoClip: 30,\n    beginText: 31,\n    endText: 32,\n    setCharSpacing: 33,\n    setWordSpacing: 34,\n    setHScale: 35,\n    setLeading: 36,\n    setFont: 37,\n    setTextRenderingMode: 38,\n    setTextRise: 39,\n    moveText: 40,\n    setLeadingMoveText: 41,\n    setTextMatrix: 42,\n    nextLine: 43,\n    showText: 44,\n    showSpacedText: 45,\n    nextLineShowText: 46,\n    nextLineSetSpacingShowText: 47,\n    setCharWidth: 48,\n    setCharWidthAndBounds: 49,\n    setStrokeColorSpace: 50,\n    setFillColorSpace: 51,\n    setStrokeColor: 52,\n    setStrokeColorN: 53,\n    setFillColor: 54,\n    setFillColorN: 55,\n    setStrokeGray: 56,\n    setFillGray: 57,\n    setStrokeRGBColor: 58,\n    setFillRGBColor: 59,\n    setStrokeCMYKColor: 60,\n    setFillCMYKColor: 61,\n    shadingFill: 62,\n    beginInlineImage: 63,\n    beginImageData: 64,\n    endInlineImage: 65,\n    paintXObject: 66,\n    markPoint: 67,\n    markPointProps: 68,\n    beginMarkedContent: 69,\n    beginMarkedContentProps: 70,\n    endMarkedContent: 71,\n    beginCompat: 72,\n    endCompat: 73,\n    paintFormXObjectBegin: 74,\n    paintFormXObjectEnd: 75,\n    beginGroup: 76,\n    endGroup: 77,\n    beginAnnotations: 78,\n    endAnnotations: 79,\n    beginAnnotation: 80,\n    endAnnotation: 81,\n    paintJpegXObject: 82,\n    paintImageMaskXObject: 83,\n    paintImageMaskXObjectGroup: 84,\n    paintImageXObject: 85,\n    paintInlineImageXObject: 86,\n    paintInlineImageXObjectGroup: 87,\n    paintImageXObjectRepeat: 88,\n    paintImageMaskXObjectRepeat: 89,\n    paintSolidColorImageMask: 90,\n    constructPath: 91\n  };\n  exports.OPS = OPS;\n  const UNSUPPORTED_FEATURES = {\n    unknown: \"unknown\",\n    forms: \"forms\",\n    javaScript: \"javaScript\",\n    smask: \"smask\",\n    shadingPattern: \"shadingPattern\",\n    font: \"font\",\n    errorTilingPattern: \"errorTilingPattern\",\n    errorExtGState: \"errorExtGState\",\n    errorXObject: \"errorXObject\",\n    errorFontLoadType3: \"errorFontLoadType3\",\n    errorFontState: \"errorFontState\",\n    errorFontMissing: \"errorFontMissing\",\n    errorFontTranslate: \"errorFontTranslate\",\n    errorColorSpace: \"errorColorSpace\",\n    errorOperatorList: \"errorOperatorList\",\n    errorFontToUnicode: \"errorFontToUnicode\",\n    errorFontLoadNative: \"errorFontLoadNative\",\n    errorFontGetPath: \"errorFontGetPath\",\n    errorMarkedContent: \"errorMarkedContent\"\n  };\n  exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n  const PasswordResponses = {\n    NEED_PASSWORD: 1,\n    INCORRECT_PASSWORD: 2\n  };\n  exports.PasswordResponses = PasswordResponses;\n  let verbosity = VerbosityLevel.WARNINGS;\n\n  function setVerbosityLevel(level) {\n    if (Number.isInteger(level)) {\n      verbosity = level;\n    }\n  }\n\n  function getVerbosityLevel() {\n    return verbosity;\n  }\n\n  function info(msg) {\n    if (verbosity >= VerbosityLevel.INFOS) {\n      console.log(`Info: ${msg}`);\n    }\n  }\n\n  function warn(msg) {\n    if (verbosity >= VerbosityLevel.WARNINGS) {\n      console.log(`Warning: ${msg}`);\n    }\n  }\n\n  function unreachable(msg) {\n    throw new Error(msg);\n  }\n\n  function assert(cond, msg) {\n    if (!cond) {\n      unreachable(msg);\n    }\n  }\n\n  function isSameOrigin(baseUrl, otherUrl) {\n    let base;\n\n    try {\n      base = new URL(baseUrl);\n\n      if (!base.origin || base.origin === \"null\") {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  }\n\n  function _isValidProtocol(url) {\n    if (!url) {\n      return false;\n    }\n\n    switch (url.protocol) {\n      case \"http:\":\n      case \"https:\":\n      case \"ftp:\":\n      case \"mailto:\":\n      case \"tel:\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function createValidAbsoluteUrl(url, baseUrl) {\n    if (!url) {\n      return null;\n    }\n\n    try {\n      const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n      if (_isValidProtocol(absoluteUrl)) {\n        return absoluteUrl;\n      }\n    } catch (ex) {}\n\n    return null;\n  }\n\n  function shadow(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n      value,\n      enumerable: true,\n      configurable: true,\n      writable: false\n    });\n    return value;\n  }\n\n  const BaseException = function BaseExceptionClosure() {\n    function BaseException(message) {\n      if (this.constructor === BaseException) {\n        unreachable(\"Cannot initialize BaseException.\");\n      }\n\n      this.message = message;\n      this.name = this.constructor.name;\n    }\n\n    BaseException.prototype = new Error();\n    BaseException.constructor = BaseException;\n    return BaseException;\n  }();\n\n  exports.BaseException = BaseException;\n\n  class PasswordException extends BaseException {\n    constructor(msg, code) {\n      super(msg);\n      this.code = code;\n    }\n\n  }\n\n  exports.PasswordException = PasswordException;\n\n  class UnknownErrorException extends BaseException {\n    constructor(msg, details) {\n      super(msg);\n      this.details = details;\n    }\n\n  }\n\n  exports.UnknownErrorException = UnknownErrorException;\n\n  class InvalidPDFException extends BaseException {}\n\n  exports.InvalidPDFException = InvalidPDFException;\n\n  class MissingPDFException extends BaseException {}\n\n  exports.MissingPDFException = MissingPDFException;\n\n  class UnexpectedResponseException extends BaseException {\n    constructor(msg, status) {\n      super(msg);\n      this.status = status;\n    }\n\n  }\n\n  exports.UnexpectedResponseException = UnexpectedResponseException;\n\n  class FormatError extends BaseException {}\n\n  exports.FormatError = FormatError;\n\n  class AbortException extends BaseException {}\n\n  exports.AbortException = AbortException;\n  const NullCharactersRegExp = /\\x00/g;\n\n  function removeNullCharacters(str) {\n    if (typeof str !== \"string\") {\n      warn(\"The argument for removeNullCharacters must be a string.\");\n      return str;\n    }\n\n    return str.replace(NullCharactersRegExp, \"\");\n  }\n\n  function bytesToString(bytes) {\n    assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n    const length = bytes.length;\n    const MAX_ARGUMENT_COUNT = 8192;\n\n    if (length < MAX_ARGUMENT_COUNT) {\n      return String.fromCharCode.apply(null, bytes);\n    }\n\n    const strBuf = [];\n\n    for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n      const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n      const chunk = bytes.subarray(i, chunkEnd);\n      strBuf.push(String.fromCharCode.apply(null, chunk));\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  function stringToBytes(str) {\n    assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n    const length = str.length;\n    const bytes = new Uint8Array(length);\n\n    for (let i = 0; i < length; ++i) {\n      bytes[i] = str.charCodeAt(i) & 0xff;\n    }\n\n    return bytes;\n  }\n\n  function arrayByteLength(arr) {\n    if (arr.length !== undefined) {\n      return arr.length;\n    }\n\n    assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n    return arr.byteLength;\n  }\n\n  function arraysToBytes(arr) {\n    const length = arr.length;\n\n    if (length === 1 && arr[0] instanceof Uint8Array) {\n      return arr[0];\n    }\n\n    let resultLength = 0;\n\n    for (let i = 0; i < length; i++) {\n      resultLength += arrayByteLength(arr[i]);\n    }\n\n    let pos = 0;\n    const data = new Uint8Array(resultLength);\n\n    for (let i = 0; i < length; i++) {\n      let item = arr[i];\n\n      if (!(item instanceof Uint8Array)) {\n        if (typeof item === \"string\") {\n          item = stringToBytes(item);\n        } else {\n          item = new Uint8Array(item);\n        }\n      }\n\n      const itemLength = item.byteLength;\n      data.set(item, pos);\n      pos += itemLength;\n    }\n\n    return data;\n  }\n\n  function string32(value) {\n    return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n  }\n\n  function objectSize(obj) {\n    return Object.keys(obj).length;\n  }\n\n  function objectFromEntries(iterable) {\n    return Object.assign(Object.create(null), Object.fromEntries(iterable));\n  }\n\n  function isLittleEndian() {\n    const buffer8 = new Uint8Array(4);\n    buffer8[0] = 1;\n    const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n    return view32[0] === 1;\n  }\n\n  const IsLittleEndianCached = {\n    get value() {\n      return shadow(this, \"value\", isLittleEndian());\n    }\n\n  };\n  exports.IsLittleEndianCached = IsLittleEndianCached;\n\n  function isEvalSupported() {\n    try {\n      new Function(\"\");\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const IsEvalSupportedCached = {\n    get value() {\n      return shadow(this, \"value\", isEvalSupported());\n    }\n\n  };\n  exports.IsEvalSupportedCached = IsEvalSupportedCached;\n  const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n  class Util {\n    static makeHexColor(r, g, b) {\n      return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n    }\n\n    static transform(m1, m2) {\n      return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n    }\n\n    static applyTransform(p, m) {\n      const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n      const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n      return [xt, yt];\n    }\n\n    static applyInverseTransform(p, m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n      const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n      return [xt, yt];\n    }\n\n    static getAxialAlignedBoundingBox(r, m) {\n      const p1 = Util.applyTransform(r, m);\n      const p2 = Util.applyTransform(r.slice(2, 4), m);\n      const p3 = Util.applyTransform([r[0], r[3]], m);\n      const p4 = Util.applyTransform([r[2], r[1]], m);\n      return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n    }\n\n    static inverseTransform(m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n    }\n\n    static apply3dTransform(m, v) {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n    }\n\n    static singularValueDecompose2dScale(m) {\n      const transpose = [m[0], m[2], m[1], m[3]];\n      const a = m[0] * transpose[0] + m[1] * transpose[2];\n      const b = m[0] * transpose[1] + m[1] * transpose[3];\n      const c = m[2] * transpose[0] + m[3] * transpose[2];\n      const d = m[2] * transpose[1] + m[3] * transpose[3];\n      const first = (a + d) / 2;\n      const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n      const sx = first + second || 1;\n      const sy = first - second || 1;\n      return [Math.sqrt(sx), Math.sqrt(sy)];\n    }\n\n    static normalizeRect(rect) {\n      const r = rect.slice(0);\n\n      if (rect[0] > rect[2]) {\n        r[0] = rect[2];\n        r[2] = rect[0];\n      }\n\n      if (rect[1] > rect[3]) {\n        r[1] = rect[3];\n        r[3] = rect[1];\n      }\n\n      return r;\n    }\n\n    static intersect(rect1, rect2) {\n      function compare(a, b) {\n        return a - b;\n      }\n\n      const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n      const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n      const result = [];\n      rect1 = Util.normalizeRect(rect1);\n      rect2 = Util.normalizeRect(rect2);\n\n      if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n        result[0] = orderedX[1];\n        result[2] = orderedX[2];\n      } else {\n        return null;\n      }\n\n      if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n        result[1] = orderedY[1];\n        result[3] = orderedY[2];\n      } else {\n        return null;\n      }\n\n      return result;\n    }\n\n  }\n\n  exports.Util = Util;\n  const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\n  function stringToPDFString(str) {\n    const length = str.length,\n          strBuf = [];\n\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      for (let i = 2; i < length; i += 2) {\n        strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n      }\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      for (let i = 2; i < length; i += 2) {\n        strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n      }\n    } else {\n      for (let i = 0; i < length; ++i) {\n        const code = PDFStringTranslateTable[str.charCodeAt(i)];\n        strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  function escapeString(str) {\n    return str.replace(/([()\\\\\\n\\r])/g, match => {\n      if (match === \"\\n\") {\n        return \"\\\\n\";\n      } else if (match === \"\\r\") {\n        return \"\\\\r\";\n      }\n\n      return `\\\\${match}`;\n    });\n  }\n\n  function isAscii(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n  }\n\n  function stringToUTF16BEString(str) {\n    const buf = [\"\\xFE\\xFF\"];\n\n    for (let i = 0, ii = str.length; i < ii; i++) {\n      const char = str.charCodeAt(i);\n      buf.push(String.fromCharCode(char >> 8 & 0xff));\n      buf.push(String.fromCharCode(char & 0xff));\n    }\n\n    return buf.join(\"\");\n  }\n\n  function stringToUTF8String(str) {\n    return decodeURIComponent(escape(str));\n  }\n\n  function utf8StringToString(str) {\n    return unescape(encodeURIComponent(str));\n  }\n\n  function isBool(v) {\n    return typeof v === \"boolean\";\n  }\n\n  function isNum(v) {\n    return typeof v === \"number\";\n  }\n\n  function isString(v) {\n    return typeof v === \"string\";\n  }\n\n  function isArrayBuffer(v) {\n    return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n  }\n\n  function isArrayEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.every(function (element, index) {\n      return element === arr2[index];\n    });\n  }\n\n  function getModificationDate(date = new Date()) {\n    const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n    return buffer.join(\"\");\n  }\n\n  function createPromiseCapability() {\n    const capability = Object.create(null);\n    let isSettled = false;\n    Object.defineProperty(capability, \"settled\", {\n      get() {\n        return isSettled;\n      }\n\n    });\n    capability.promise = new Promise(function (resolve, reject) {\n      capability.resolve = function (data) {\n        isSettled = true;\n        resolve(data);\n      };\n\n      capability.reject = function (reason) {\n        isSettled = true;\n        reject(reason);\n      };\n    });\n    return capability;\n  }\n\n  const createObjectURL = function createObjectURLClosure() {\n    const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    return function createObjectURL(data, contentType, forceDataSchema = false) {\n      if (!forceDataSchema && URL.createObjectURL) {\n        const blob = new Blob([data], {\n          type: contentType\n        });\n        return URL.createObjectURL(blob);\n      }\n\n      let buffer = `data:${contentType};base64,`;\n\n      for (let i = 0, ii = data.length; i < ii; i += 3) {\n        const b1 = data[i] & 0xff;\n        const b2 = data[i + 1] & 0xff;\n        const b3 = data[i + 2] & 0xff;\n        const d1 = b1 >> 2,\n              d2 = (b1 & 3) << 4 | b2 >> 4;\n        const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n        const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n        buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n      }\n\n      return buffer;\n    };\n  }();\n\n  exports.createObjectURL = createObjectURL;\n  const XMLEntities = {\n    0x3c: \"&lt;\",\n    0x3e: \"&gt;\",\n    0x26: \"&amp;\",\n    0x22: \"&quot;\",\n    0x27: \"&apos;\"\n  };\n\n  function encodeToXmlString(str) {\n    const buffer = [];\n    let start = 0;\n\n    for (let i = 0, ii = str.length; i < ii; i++) {\n      const char = str.codePointAt(i);\n\n      if (0x20 <= char && char <= 0x7e) {\n        const entity = XMLEntities[char];\n\n        if (entity) {\n          if (start < i) {\n            buffer.push(str.substring(start, i));\n          }\n\n          buffer.push(entity);\n          start = i + 1;\n        }\n      } else {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n\n        buffer.push(`&#x${char.toString(16).toUpperCase()};`);\n\n        if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n          i++;\n        }\n\n        start = i + 1;\n      }\n    }\n\n    if (buffer.length === 0) {\n      return str;\n    }\n\n    if (start < str.length) {\n      buffer.push(str.substring(start, str.length));\n    }\n\n    return buffer.join(\"\");\n  }\n\n  /***/ }),\n  /* 3 */\n  /***/ ((__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n\n\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  ;\n\n  /***/ }),\n  /* 4 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.isNodeJS = void 0;\n  const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n  exports.isNodeJS = isNodeJS;\n\n  /***/ }),\n  /* 5 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getDocument = getDocument;\n  exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n  exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _font_loader = __w_pdfjs_require__(6);\n\n  var _node_utils = __w_pdfjs_require__(7);\n\n  var _annotation_storage = __w_pdfjs_require__(8);\n\n  var _api_compatibility = __w_pdfjs_require__(9);\n\n  var _canvas = __w_pdfjs_require__(10);\n\n  var _worker_options = __w_pdfjs_require__(12);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  var _message_handler = __w_pdfjs_require__(13);\n\n  var _metadata = __w_pdfjs_require__(14);\n\n  var _optional_content_config = __w_pdfjs_require__(16);\n\n  var _transport_stream = __w_pdfjs_require__(17);\n\n  var _webgl = __w_pdfjs_require__(18);\n\n  const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n  const RENDERING_CANCELLED_TIMEOUT = 100;\n  const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n  exports.DefaultCanvasFactory = DefaultCanvasFactory;\n  const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n  exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n  let createPDFNetworkStream;\n\n  function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n    createPDFNetworkStream = pdfNetworkStreamFactory;\n  }\n\n  function getDocument(src) {\n    const task = new PDFDocumentLoadingTask();\n    let source;\n\n    if (typeof src === \"string\") {\n      source = {\n        url: src\n      };\n    } else if ((0, _util.isArrayBuffer)(src)) {\n      source = {\n        data: src\n      };\n    } else if (src instanceof PDFDataRangeTransport) {\n      source = {\n        range: src\n      };\n    } else {\n      if (typeof src !== \"object\") {\n        throw new Error(\"Invalid parameter in getDocument, \" + \"need either Uint8Array, string or a parameter object\");\n      }\n\n      if (!src.url && !src.data && !src.range) {\n        throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n      }\n\n      source = src;\n    }\n\n    const params = Object.create(null);\n    let rangeTransport = null,\n        worker = null;\n\n    for (const key in source) {\n      if (key === \"url\" && typeof window !== \"undefined\") {\n        params[key] = new URL(source[key], window.location).href;\n        continue;\n      } else if (key === \"range\") {\n        rangeTransport = source[key];\n        continue;\n      } else if (key === \"worker\") {\n        worker = source[key];\n        continue;\n      } else if (key === \"data\" && !(source[key] instanceof Uint8Array)) {\n        const pdfBytes = source[key];\n\n        if (typeof pdfBytes === \"string\") {\n          params[key] = (0, _util.stringToBytes)(pdfBytes);\n        } else if (typeof pdfBytes === \"object\" && pdfBytes !== null && !isNaN(pdfBytes.length)) {\n          params[key] = new Uint8Array(pdfBytes);\n        } else if ((0, _util.isArrayBuffer)(pdfBytes)) {\n          params[key] = new Uint8Array(pdfBytes);\n        } else {\n          throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string or array-like object is expected in the \" + \"data property.\");\n        }\n\n        continue;\n      }\n\n      params[key] = source[key];\n    }\n\n    params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n    params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n    params.ignoreErrors = params.stopAtErrors !== true;\n    params.fontExtraProperties = params.fontExtraProperties === true;\n    params.pdfBug = params.pdfBug === true;\n\n    if (!Number.isInteger(params.maxImageSize)) {\n      params.maxImageSize = -1;\n    }\n\n    if (typeof params.isEvalSupported !== \"boolean\") {\n      params.isEvalSupported = true;\n    }\n\n    if (typeof params.disableFontFace !== \"boolean\") {\n      params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;\n    }\n\n    if (typeof params.ownerDocument === \"undefined\") {\n      params.ownerDocument = globalThis.document;\n    }\n\n    if (typeof params.disableRange !== \"boolean\") {\n      params.disableRange = false;\n    }\n\n    if (typeof params.disableStream !== \"boolean\") {\n      params.disableStream = false;\n    }\n\n    if (typeof params.disableAutoFetch !== \"boolean\") {\n      params.disableAutoFetch = false;\n    }\n\n    (0, _util.setVerbosityLevel)(params.verbosity);\n\n    if (!worker) {\n      const workerParams = {\n        verbosity: params.verbosity,\n        port: _worker_options.GlobalWorkerOptions.workerPort\n      };\n      worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n      task._worker = worker;\n    }\n\n    const docId = task.docId;\n    worker.promise.then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n\n        if (rangeTransport) {\n          networkStream = new _transport_stream.PDFDataTransportStream({\n            length: params.length,\n            initialData: params.initialData,\n            progressiveDone: params.progressiveDone,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream\n          }, rangeTransport);\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream\n          });\n        }\n\n        resolve(networkStream);\n      });\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {\n        if (task.destroyed) {\n          throw new Error(\"Loading aborted\");\n        }\n\n        const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n        messageHandler.postMessageTransfers = worker.postMessageTransfers;\n        const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n        task._transport = transport;\n        messageHandler.send(\"Ready\", null);\n      });\n    }).catch(task._capability.reject);\n    return task;\n  }\n\n  function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n    if (worker.destroyed) {\n      return Promise.reject(new Error(\"Worker was destroyed\"));\n    }\n\n    if (pdfDataRangeTransport) {\n      source.length = pdfDataRangeTransport.length;\n      source.initialData = pdfDataRangeTransport.initialData;\n      source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    }\n\n    return worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n      docId,\n      apiVersion: '2.7.570',\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties\n    }).then(function (workerId) {\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n\n      return workerId;\n    });\n  }\n\n  const PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n    let nextDocumentId = 0;\n\n    class PDFDocumentLoadingTask {\n      constructor() {\n        this._capability = (0, _util.createPromiseCapability)();\n        this._transport = null;\n        this._worker = null;\n        this.docId = \"d\" + nextDocumentId++;\n        this.destroyed = false;\n        this.onPassword = null;\n        this.onProgress = null;\n        this.onUnsupportedFeature = null;\n      }\n\n      get promise() {\n        return this._capability.promise;\n      }\n\n      destroy() {\n        this.destroyed = true;\n        const transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n        return transportDestroyed.then(() => {\n          this._transport = null;\n\n          if (this._worker) {\n            this._worker.destroy();\n\n            this._worker = null;\n          }\n        });\n      }\n\n    }\n\n    return PDFDocumentLoadingTask;\n  }();\n\n  class PDFDataRangeTransport {\n    constructor(length, initialData, progressiveDone = false) {\n      this.length = length;\n      this.initialData = initialData;\n      this.progressiveDone = progressiveDone;\n      this._rangeListeners = [];\n      this._progressListeners = [];\n      this._progressiveReadListeners = [];\n      this._progressiveDoneListeners = [];\n      this._readyCapability = (0, _util.createPromiseCapability)();\n    }\n\n    addRangeListener(listener) {\n      this._rangeListeners.push(listener);\n    }\n\n    addProgressListener(listener) {\n      this._progressListeners.push(listener);\n    }\n\n    addProgressiveReadListener(listener) {\n      this._progressiveReadListeners.push(listener);\n    }\n\n    addProgressiveDoneListener(listener) {\n      this._progressiveDoneListeners.push(listener);\n    }\n\n    onDataRange(begin, chunk) {\n      for (const listener of this._rangeListeners) {\n        listener(begin, chunk);\n      }\n    }\n\n    onDataProgress(loaded, total) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressListeners) {\n          listener(loaded, total);\n        }\n      });\n    }\n\n    onDataProgressiveRead(chunk) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveReadListeners) {\n          listener(chunk);\n        }\n      });\n    }\n\n    onDataProgressiveDone() {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveDoneListeners) {\n          listener();\n        }\n      });\n    }\n\n    transportReady() {\n      this._readyCapability.resolve();\n    }\n\n    requestDataRange(begin, end) {\n      (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n    }\n\n    abort() {}\n\n  }\n\n  exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n  class PDFDocumentProxy {\n    constructor(pdfInfo, transport) {\n      this._pdfInfo = pdfInfo;\n      this._transport = transport;\n    }\n\n    get annotationStorage() {\n      return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n    }\n\n    get numPages() {\n      return this._pdfInfo.numPages;\n    }\n\n    get fingerprint() {\n      return this._pdfInfo.fingerprint;\n    }\n\n    getPage(pageNumber) {\n      return this._transport.getPage(pageNumber);\n    }\n\n    getPageIndex(ref) {\n      return this._transport.getPageIndex(ref);\n    }\n\n    getDestinations() {\n      return this._transport.getDestinations();\n    }\n\n    getDestination(id) {\n      return this._transport.getDestination(id);\n    }\n\n    getPageLabels() {\n      return this._transport.getPageLabels();\n    }\n\n    getPageLayout() {\n      return this._transport.getPageLayout();\n    }\n\n    getPageMode() {\n      return this._transport.getPageMode();\n    }\n\n    getViewerPreferences() {\n      return this._transport.getViewerPreferences();\n    }\n\n    getOpenAction() {\n      return this._transport.getOpenAction();\n    }\n\n    getAttachments() {\n      return this._transport.getAttachments();\n    }\n\n    getJavaScript() {\n      return this._transport.getJavaScript();\n    }\n\n    getJSActions() {\n      return this._transport.getDocJSActions();\n    }\n\n    getOutline() {\n      return this._transport.getOutline();\n    }\n\n    getOptionalContentConfig() {\n      return this._transport.getOptionalContentConfig();\n    }\n\n    getPermissions() {\n      return this._transport.getPermissions();\n    }\n\n    getMetadata() {\n      return this._transport.getMetadata();\n    }\n\n    getMarkInfo() {\n      return this._transport.getMarkInfo();\n    }\n\n    getData() {\n      return this._transport.getData();\n    }\n\n    getDownloadInfo() {\n      return this._transport.downloadInfoCapability.promise;\n    }\n\n    getStats() {\n      return this._transport.getStats();\n    }\n\n    cleanup() {\n      return this._transport.startCleanup();\n    }\n\n    destroy() {\n      return this.loadingTask.destroy();\n    }\n\n    get loadingParams() {\n      return this._transport.loadingParams;\n    }\n\n    get loadingTask() {\n      return this._transport.loadingTask;\n    }\n\n    saveDocument(annotationStorage) {\n      return this._transport.saveDocument(annotationStorage);\n    }\n\n    getFieldObjects() {\n      return this._transport.getFieldObjects();\n    }\n\n    hasJSActions() {\n      return this._transport.hasJSActions();\n    }\n\n    getCalculationOrderIds() {\n      return this._transport.getCalculationOrderIds();\n    }\n\n  }\n\n  exports.PDFDocumentProxy = PDFDocumentProxy;\n\n  class PDFPageProxy {\n    constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n      this._pageIndex = pageIndex;\n      this._pageInfo = pageInfo;\n      this._ownerDocument = ownerDocument;\n      this._transport = transport;\n      this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n      this._pdfBug = pdfBug;\n      this.commonObjs = transport.commonObjs;\n      this.objs = new PDFObjects();\n      this.cleanupAfterRender = false;\n      this.pendingCleanup = false;\n      this._intentStates = new Map();\n      this.destroyed = false;\n    }\n\n    get pageNumber() {\n      return this._pageIndex + 1;\n    }\n\n    get rotate() {\n      return this._pageInfo.rotate;\n    }\n\n    get ref() {\n      return this._pageInfo.ref;\n    }\n\n    get userUnit() {\n      return this._pageInfo.userUnit;\n    }\n\n    get view() {\n      return this._pageInfo.view;\n    }\n\n    getViewport({\n      scale,\n      rotation = this.rotate,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    } = {}) {\n      return new _display_utils.PageViewport({\n        viewBox: this.view,\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n\n    getAnnotations({\n      intent = null\n    } = {}) {\n      if (!this.annotationsPromise || this.annotationsIntent !== intent) {\n        this.annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);\n        this.annotationsIntent = intent;\n      }\n\n      return this.annotationsPromise;\n    }\n\n    getJSActions() {\n      return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));\n    }\n\n    render({\n      canvasContext,\n      viewport,\n      intent = \"display\",\n      enableWebGL = false,\n      renderInteractiveForms = false,\n      transform = null,\n      imageLayer = null,\n      canvasFactory = null,\n      background = null,\n      annotationStorage = null,\n      optionalContentConfigPromise = null\n    }) {\n      if (this._stats) {\n        this._stats.time(\"Overall\");\n      }\n\n      const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n      this.pendingCleanup = false;\n\n      if (!optionalContentConfigPromise) {\n        optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n      }\n\n      let intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      if (intentState.streamReaderCancelTimeout) {\n        clearTimeout(intentState.streamReaderCancelTimeout);\n        intentState.streamReaderCancelTimeout = null;\n      }\n\n      const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n        ownerDocument: this._ownerDocument\n      });\n      const webGLContext = new _webgl.WebGLContext({\n        enable: enableWebGL\n      });\n\n      if (!intentState.displayReadyCapability) {\n        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent,\n          renderInteractiveForms: renderInteractiveForms === true,\n          annotationStorage: annotationStorage && annotationStorage.getAll() || null  // lwf\n        });\n      }\n\n      const complete = error => {\n        const i = intentState.renderTasks.indexOf(internalRenderTask);\n\n        if (i >= 0) {\n          intentState.renderTasks.splice(i, 1);\n        }\n\n        if (this.cleanupAfterRender || renderingIntent === \"print\") {\n          this.pendingCleanup = true;\n        }\n\n        this._tryCleanup();\n\n        if (error) {\n          internalRenderTask.capability.reject(error);\n\n          this._abortOperatorList({\n            intentState,\n            reason: error\n          });\n        } else {\n          internalRenderTask.capability.resolve();\n        }\n\n        if (this._stats) {\n          this._stats.timeEnd(\"Rendering\");\n\n          this._stats.timeEnd(\"Overall\");\n        }\n      };\n\n      const internalRenderTask = new InternalRenderTask({\n        callback: complete,\n        params: {\n          canvasContext,\n          viewport,\n          transform,\n          imageLayer,\n          background\n        },\n        objs: this.objs,\n        commonObjs: this.commonObjs,\n        operatorList: intentState.operatorList,\n        pageIndex: this._pageIndex,\n        canvasFactory: canvasFactoryInstance,\n        webGLContext,\n        useRequestAnimationFrame: renderingIntent !== \"print\",\n        pdfBug: this._pdfBug\n      });\n\n      if (!intentState.renderTasks) {\n        intentState.renderTasks = [];\n      }\n\n      intentState.renderTasks.push(internalRenderTask);\n      const renderTask = internalRenderTask.task;\n      Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig\n        });\n        internalRenderTask.operatorListChanged();\n      }).catch(complete);\n      return renderTask;\n    }\n\n    getOperatorList() {\n      function operatorListChanged() {\n        if (intentState.operatorList.lastChunk) {\n          intentState.opListReadCapability.resolve(intentState.operatorList);\n          const i = intentState.renderTasks.indexOf(opListTask);\n\n          if (i >= 0) {\n            intentState.renderTasks.splice(i, 1);\n          }\n        }\n      }\n\n      const renderingIntent = \"oplist\";\n\n      let intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      let opListTask;\n\n      if (!intentState.opListReadCapability) {\n        opListTask = Object.create(null);\n        opListTask.operatorListChanged = operatorListChanged;\n        intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n        intentState.renderTasks = [];\n        intentState.renderTasks.push(opListTask);\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent\n        });\n      }\n\n      return intentState.opListReadCapability.promise;\n    }\n\n    streamTextContent({\n      normalizeWhitespace = false,\n      disableCombineTextItems = false\n    } = {}) {\n      const TEXT_CONTENT_CHUNK_SIZE = 100;\n      return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true\n      }, {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n        size(textContent) {\n          return textContent.items.length;\n        }\n\n      });\n    }\n\n    getTextContent(params = {}) {\n      const readableStream = this.streamTextContent(params);\n      return new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              resolve(textContent);\n              return;\n            }\n\n            Object.assign(textContent.styles, value.styles);\n            textContent.items.push(...value.items);\n            pump();\n          }, reject);\n        }\n\n        const reader = readableStream.getReader();\n        const textContent = {\n          items: [],\n          styles: Object.create(null)\n        };\n        pump();\n      });\n    }\n\n    _destroy() {\n      this.destroyed = true;\n      this._transport.pageCache[this._pageIndex] = null;\n      const waitOn = [];\n\n      for (const [intent, intentState] of this._intentStates) {\n        this._abortOperatorList({\n          intentState,\n          reason: new Error(\"Page was destroyed.\"),\n          force: true\n        });\n\n        if (intent === \"oplist\") {\n          continue;\n        }\n\n        for (const internalRenderTask of intentState.renderTasks) {\n          waitOn.push(internalRenderTask.completed);\n          internalRenderTask.cancel();\n        }\n      }\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n      this.pendingCleanup = false;\n      return Promise.all(waitOn);\n    }\n\n    cleanup(resetStats = false) {\n      this.pendingCleanup = true;\n      return this._tryCleanup(resetStats);\n    }\n\n    _tryCleanup(resetStats = false) {\n      if (!this.pendingCleanup) {\n        return false;\n      }\n\n      for (const {\n        renderTasks,\n        operatorList\n      } of this._intentStates.values()) {\n        if (renderTasks.length !== 0 || !operatorList.lastChunk) {\n          return false;\n        }\n      }\n\n      this._intentStates.clear();\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n\n      if (resetStats && this._stats) {\n        this._stats = new _display_utils.StatTimer();\n      }\n\n      this.pendingCleanup = false;\n      return true;\n    }\n\n    _startRenderPage(transparency, intent) {\n      const intentState = this._intentStates.get(intent);\n\n      if (!intentState) {\n        return;\n      }\n\n      if (this._stats) {\n        this._stats.timeEnd(\"Page Request\");\n      }\n\n      if (intentState.displayReadyCapability) {\n        intentState.displayReadyCapability.resolve(transparency);\n      }\n    }\n\n    _renderPageChunk(operatorListChunk, intentState) {\n      for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n      }\n\n      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n      for (let i = 0; i < intentState.renderTasks.length; i++) {\n        intentState.renderTasks[i].operatorListChanged();\n      }\n\n      if (operatorListChunk.lastChunk) {\n        this._tryCleanup();\n      }\n    }\n\n    _pumpOperatorList(args) {\n      (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.');\n\n      const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", args);\n\n      const reader = readableStream.getReader();\n\n      const intentState = this._intentStates.get(args.intent);\n\n      intentState.streamReader = reader;\n\n      const pump = () => {\n        reader.read().then(({\n          value,\n          done\n        }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n\n          if (this._transport.destroyed) {\n            return;\n          }\n\n          this._renderPageChunk(value, intentState);\n\n          pump();\n        }, reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return;\n          }\n\n          if (intentState.operatorList) {\n            intentState.operatorList.lastChunk = true;\n\n            for (let i = 0; i < intentState.renderTasks.length; i++) {\n              intentState.renderTasks[i].operatorListChanged();\n            }\n\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        });\n      };\n\n      pump();\n    }\n\n    _abortOperatorList({\n      intentState,\n      reason,\n      force = false\n    }) {\n      (0, _util.assert)(reason instanceof Error || typeof reason === \"object\" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.');\n\n      if (!intentState.streamReader) {\n        return;\n      }\n\n      if (!force) {\n        if (intentState.renderTasks.length !== 0) {\n          return;\n        }\n\n        if (reason instanceof _display_utils.RenderingCancelledException) {\n          intentState.streamReaderCancelTimeout = setTimeout(() => {\n            this._abortOperatorList({\n              intentState,\n              reason,\n              force: true\n            });\n\n            intentState.streamReaderCancelTimeout = null;\n          }, RENDERING_CANCELLED_TIMEOUT);\n          return;\n        }\n      }\n\n      intentState.streamReader.cancel(new _util.AbortException(reason && reason.message)); // lwf\n      intentState.streamReader = null;\n\n      if (this._transport.destroyed) {\n        return;\n      }\n\n      for (const [intent, curIntentState] of this._intentStates) {\n        if (curIntentState === intentState) {\n          this._intentStates.delete(intent);\n\n          break;\n        }\n      }\n\n      this.cleanup();\n    }\n\n    get stats() {\n      return this._stats;\n    }\n\n  }\n\n  exports.PDFPageProxy = PDFPageProxy;\n\n  class LoopbackPort {\n    constructor(defer = true) {\n      this._listeners = [];\n      this._defer = defer;\n      this._deferred = Promise.resolve(undefined);\n    }\n\n    postMessage(obj, transfers) {\n      function cloneValue(value) {\n        if (typeof value !== \"object\" || value === null) {\n          return value;\n        }\n\n        if (cloned.has(value)) {\n          return cloned.get(value);\n        }\n\n        let buffer, result;\n\n        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n          if (transfers && transfers.includes(buffer)) { // lwf\n            result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n          } else {\n            result = new value.constructor(value);\n          }\n\n          cloned.set(value, result);\n          return result;\n        }\n\n        result = Array.isArray(value) ? [] : {};\n        cloned.set(value, result);\n\n        for (const i in value) {\n          let desc,\n              p = value;\n\n          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n            p = Object.getPrototypeOf(p);\n          }\n\n          if (typeof desc.value === \"undefined\") {\n            continue;\n          }\n\n          if (typeof desc.value === \"function\") {\n            if (value.hasOwnProperty && value.hasOwnProperty(i)) {\n              throw new Error(`LoopbackPort.postMessage - cannot clone: ${value[i]}`);\n            }\n\n            continue;\n          }\n\n          result[i] = cloneValue(desc.value);\n        }\n\n        return result;\n      }\n\n      if (!this._defer) {\n        this._listeners.forEach(listener => {\n          listener.call(this, {\n            data: obj\n          });\n        });\n\n        return;\n      }\n\n      const cloned = new WeakMap();\n      const e = {\n        data: cloneValue(obj)\n      };\n\n      this._deferred.then(() => {\n        this._listeners.forEach(listener => {\n          listener.call(this, e);\n        });\n      });\n    }\n\n    addEventListener(name, listener) {\n      this._listeners.push(listener);\n    }\n\n    removeEventListener(name, listener) {\n      const i = this._listeners.indexOf(listener);\n\n      this._listeners.splice(i, 1);\n    }\n\n    terminate() {\n      this._listeners.length = 0;\n    }\n\n  }\n\n  exports.LoopbackPort = LoopbackPort;\n\n  const PDFWorker = function PDFWorkerClosure() {\n    const pdfWorkerPorts = new WeakMap();\n    let isWorkerDisabled = false;\n    let fallbackWorkerSrc;\n    let nextFakeWorkerId = 0;\n    let fakeWorkerCapability;\n\n    if (_is_node.isNodeJS && typeof require === \"function\") {\n      isWorkerDisabled = true;\n      fallbackWorkerSrc = \"./skylark-pdfjs-worker-all.js\"; //\"./pdf.worker.js\";\n    } else if (typeof document === \"object\" && \"currentScript\" in document) {\n      const pdfjsFilePath = document.currentScript && document.currentScript.src; // lwf\n\n      if (pdfjsFilePath) {\n        fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n      }\n    }\n\n    function getWorkerSrc() {\n      if (_worker_options.GlobalWorkerOptions.workerSrc) {\n        return _worker_options.GlobalWorkerOptions.workerSrc;\n      }\n\n      if (typeof fallbackWorkerSrc !== \"undefined\") {\n        if (!_is_node.isNodeJS) {\n          (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n        }\n\n        return fallbackWorkerSrc;\n      }\n\n      throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n    }\n\n    function getMainThreadWorkerMessageHandler() {\n      let mainWorkerMessageHandler;\n\n      try {\n        mainWorkerMessageHandler = globalThis.pdfjsWorker && globalThis.pdfjsWorker.WorkerMessageHandler;  // lwf\n      } catch (ex) {}\n\n      return mainWorkerMessageHandler || null;\n    }\n\n    function setupFakeWorkerGlobal() {\n      if (fakeWorkerCapability) {\n        return fakeWorkerCapability.promise;\n      }\n\n      fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n      const loader = async function () {\n        const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n        if (mainWorkerMessageHandler) {\n          return mainWorkerMessageHandler;\n        }\n\n        if (_is_node.isNodeJS && typeof require === \"function\") {\n          const worker = eval(\"require\")(getWorkerSrc());\n          return worker.WorkerMessageHandler;\n        }\n\n        await (0, _display_utils.loadScript)(getWorkerSrc());\n        return window.pdfjsWorker.WorkerMessageHandler;\n      };\n\n      loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n      return fakeWorkerCapability.promise;\n    }\n\n    function createCDNWrapper(url) {\n      const wrapper = \"importScripts('\" + url + \"');\";\n      return URL.createObjectURL(new Blob([wrapper]));\n    }\n\n    class PDFWorker {\n      constructor({\n        name = null,\n        port = null,\n        verbosity = (0, _util.getVerbosityLevel)()\n      } = {}) {\n        if (port && pdfWorkerPorts.has(port)) {\n          throw new Error(\"Cannot use more than one PDFWorker per port\");\n        }\n\n        this.name = name;\n        this.destroyed = false;\n        this.postMessageTransfers = true;\n        this.verbosity = verbosity;\n        this._readyCapability = (0, _util.createPromiseCapability)();\n        this._port = null;\n        this._webWorker = null;\n        this._messageHandler = null;\n\n        if (port) {\n          pdfWorkerPorts.set(port, this);\n\n          this._initializeFromPort(port);\n\n          return;\n        }\n\n        this._initialize();\n      }\n\n      get promise() {\n        return this._readyCapability.promise;\n      }\n\n      get port() {\n        return this._port;\n      }\n\n      get messageHandler() {\n        return this._messageHandler;\n      }\n\n      _initializeFromPort(port) {\n        this._port = port;\n        this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n        this._messageHandler.on(\"ready\", function () {});\n\n        this._readyCapability.resolve();\n      }\n\n      _initialize() {\n        if (typeof Worker !== \"undefined\" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n          let workerSrc = getWorkerSrc();\n\n          try {\n            if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n              workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n            }\n\n            const worker = new Worker(workerSrc);\n            const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n            const terminateEarly = () => {\n              worker.removeEventListener(\"error\", onWorkerError);\n              messageHandler.destroy();\n              worker.terminate();\n\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n              } else {\n                this._setupFakeWorker();\n              }\n            };\n\n            const onWorkerError = () => {\n              if (!this._webWorker) {\n                terminateEarly();\n              }\n            };\n\n            worker.addEventListener(\"error\", onWorkerError);\n            messageHandler.on(\"test\", data => {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (this.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              if (data) {\n                this._messageHandler = messageHandler;\n                this._port = worker;\n                this._webWorker = worker;\n\n                if (!data.supportTransfers) {\n                  this.postMessageTransfers = false;\n                }\n\n                this._readyCapability.resolve();\n\n                messageHandler.send(\"configure\", {\n                  verbosity: this.verbosity\n                });\n              } else {\n                this._setupFakeWorker();\n\n                messageHandler.destroy();\n                worker.terminate();\n              }\n            });\n            messageHandler.on(\"ready\", data => {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (this.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              try {\n                sendTest();\n              } catch (e) {\n                this._setupFakeWorker();\n              }\n            });\n\n            const sendTest = () => {\n              const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n              try {\n                messageHandler.send(\"test\", testObj, [testObj.buffer]);\n              } catch (ex) {\n                (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                testObj[0] = 0;\n                messageHandler.send(\"test\", testObj);\n              }\n            };\n\n            sendTest();\n            return;\n          } catch (e) {\n            (0, _util.info)(\"The worker has been disabled.\");\n          }\n        }\n\n        this._setupFakeWorker();\n      }\n\n      _setupFakeWorker() {\n        if (!isWorkerDisabled) {\n          (0, _util.warn)(\"Setting up fake worker.\");\n          isWorkerDisabled = true;\n        }\n\n        setupFakeWorkerGlobal().then(WorkerMessageHandler => {\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n            return;\n          }\n\n          const port = new LoopbackPort();\n          this._port = port;\n          const id = \"fake\" + nextFakeWorkerId++;\n          const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n          WorkerMessageHandler.setup(workerHandler, port);\n          const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n          this._messageHandler = messageHandler;\n\n          this._readyCapability.resolve();\n\n          messageHandler.send(\"configure\", {\n            verbosity: this.verbosity\n          });\n        }).catch(reason => {\n          this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n        });\n      }\n\n      destroy() {\n        this.destroyed = true;\n\n        if (this._webWorker) {\n          this._webWorker.terminate();\n\n          this._webWorker = null;\n        }\n\n        pdfWorkerPorts.delete(this._port);\n        this._port = null;\n\n        if (this._messageHandler) {\n          this._messageHandler.destroy();\n\n          this._messageHandler = null;\n        }\n      }\n\n      static fromPort(params) {\n        if (!params || !params.port) {\n          throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n        }\n\n        if (pdfWorkerPorts.has(params.port)) {\n          return pdfWorkerPorts.get(params.port);\n        }\n\n        return new PDFWorker(params);\n      }\n\n      static getWorkerSrc() {\n        return getWorkerSrc();\n      }\n\n    }\n\n    return PDFWorker;\n  }();\n\n  exports.PDFWorker = PDFWorker;\n\n  class WorkerTransport {\n    constructor(messageHandler, loadingTask, networkStream, params) {\n      this.messageHandler = messageHandler;\n      this.loadingTask = loadingTask;\n      this.commonObjs = new PDFObjects();\n      this.fontLoader = new _font_loader.FontLoader({\n        docId: loadingTask.docId,\n        onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n        ownerDocument: params.ownerDocument\n      });\n      this._params = params;\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked\n      });\n      this.destroyed = false;\n      this.destroyCapability = null;\n      this._passwordCapability = null;\n      this._networkStream = networkStream;\n      this._fullReader = null;\n      this._lastProgress = null;\n      this.pageCache = [];\n      this.pagePromises = [];\n      this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n      this.setupMessageHandler();\n    }\n\n    get loadingTaskSettled() {\n      return this.loadingTask._capability.settled;\n    }\n\n    destroy() {\n      if (this.destroyCapability) {\n        return this.destroyCapability.promise;\n      }\n\n      this.destroyed = true;\n      this.destroyCapability = (0, _util.createPromiseCapability)();\n\n      if (this._passwordCapability) {\n        this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n      }\n\n      const waitOn = [];\n      this.pageCache.forEach(function (page) {\n        if (page) {\n          waitOn.push(page._destroy());\n        }\n      });\n      this.pageCache.length = 0;\n      this.pagePromises.length = 0;\n      const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n      waitOn.push(terminated);\n\n      if (this.loadingTaskSettled) {\n        const annotationStorageResetModified = this.loadingTask.promise.then(pdfDocument => {\n          if (pdfDocument.hasOwnProperty(\"annotationStorage\")) {\n            pdfDocument.annotationStorage.resetModified();\n          }\n        }).catch(() => {});\n        waitOn.push(annotationStorageResetModified);\n      }\n\n      Promise.all(waitOn).then(() => {\n        this.commonObjs.clear();\n        this.fontLoader.clear();\n        this._hasJSActionsPromise = null;\n\n        if (this._networkStream) {\n          this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n        }\n\n        if (this.messageHandler) {\n          this.messageHandler.destroy();\n          this.messageHandler = null;\n        }\n\n        this.destroyCapability.resolve();\n      }, this.destroyCapability.reject);\n      return this.destroyCapability.promise;\n    }\n\n    setupMessageHandler() {\n      const {\n        messageHandler,\n        loadingTask\n      } = this;\n      messageHandler.on(\"GetReader\", (data, sink) => {\n        (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n        this._fullReader = this._networkStream.getFullReader();\n\n        this._fullReader.onProgress = evt => {\n          this._lastProgress = {\n            loaded: evt.loaded,\n            total: evt.total\n          };\n        };\n\n        sink.onPull = () => {\n          this._fullReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = reason => {\n          this._fullReader.cancel(reason);\n\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"ReaderHeadersReady\", data => {\n        const headersCapability = (0, _util.createPromiseCapability)();\n        const fullReader = this._fullReader;\n        fullReader.headersReady.then(() => {\n          if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n            if (this._lastProgress && loadingTask.onProgress) {\n              loadingTask.onProgress(this._lastProgress);\n            }\n\n            fullReader.onProgress = evt => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            };\n          }\n\n          headersCapability.resolve({\n            isStreamingSupported: fullReader.isStreamingSupported,\n            isRangeSupported: fullReader.isRangeSupported,\n            contentLength: fullReader.contentLength\n          });\n        }, headersCapability.reject);\n        return headersCapability.promise;\n      });\n      messageHandler.on(\"GetRangeReader\", (data, sink) => {\n        (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n        const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n        if (!rangeReader) {\n          sink.close();\n          return;\n        }\n\n        sink.onPull = () => {\n          rangeReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = reason => {\n          rangeReader.cancel(reason);\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"GetDoc\", ({\n        pdfInfo\n      }) => {\n        this._numPages = pdfInfo.numPages;\n\n        loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n      });\n      messageHandler.on(\"DocException\", function (ex) {\n        let reason;\n\n        switch (ex.name) {\n          case \"PasswordException\":\n            reason = new _util.PasswordException(ex.message, ex.code);\n            break;\n\n          case \"InvalidPDFException\":\n            reason = new _util.InvalidPDFException(ex.message);\n            break;\n\n          case \"MissingPDFException\":\n            reason = new _util.MissingPDFException(ex.message);\n            break;\n\n          case \"UnexpectedResponseException\":\n            reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n            break;\n\n          case \"UnknownErrorException\":\n            reason = new _util.UnknownErrorException(ex.message, ex.details);\n            break;\n        }\n\n        if (!(reason instanceof Error)) {\n          const msg = \"DocException - expected a valid Error.\";\n          (0, _util.warn)(msg);\n        }\n\n        loadingTask._capability.reject(reason);\n      });\n      messageHandler.on(\"PasswordRequest\", exception => {\n        this._passwordCapability = (0, _util.createPromiseCapability)();\n\n        if (loadingTask.onPassword) {\n          const updatePassword = password => {\n            this._passwordCapability.resolve({\n              password\n            });\n          };\n\n          try {\n            loadingTask.onPassword(updatePassword, exception.code);\n          } catch (ex) {\n            this._passwordCapability.reject(ex);\n          }\n        } else {\n          this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n        }\n\n        return this._passwordCapability.promise;\n      });\n      messageHandler.on(\"DataLoaded\", data => {\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.length,\n            total: data.length\n          });\n        }\n\n        this.downloadInfoCapability.resolve(data);\n      });\n      messageHandler.on(\"StartRenderPage\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        const page = this.pageCache[data.pageIndex];\n\n        page._startRenderPage(data.transparency, data.intent);\n      });\n      messageHandler.on(\"commonobj\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        const [id, type, exportedData] = data;\n\n        if (this.commonObjs.has(id)) {\n          return;\n        }\n\n        switch (type) {\n          case \"Font\":\n            const params = this._params;\n\n            if (\"error\" in exportedData) {\n              const exportedError = exportedData.error;\n              (0, _util.warn)(`Error during font loading: ${exportedError}`);\n              this.commonObjs.resolve(id, exportedError);\n              break;\n            }\n\n            let fontRegistry = null;\n\n            if (params.pdfBug && globalThis.FontInspector && globalThis.FontInspector.enabled) { //lwf\n              fontRegistry = {\n                registerFont(font, url) {\n                  globalThis.FontInspector.fontAdded(font, url);\n                }\n\n              };\n            }\n\n            const font = new _font_loader.FontFaceObject(exportedData, {\n              isEvalSupported: params.isEvalSupported,\n              disableFontFace: params.disableFontFace,\n              ignoreErrors: params.ignoreErrors,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              fontRegistry\n            });\n            this.fontLoader.bind(font).catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", {\n                id\n              });\n            }).finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                font.data = null;\n              }\n\n              this.commonObjs.resolve(id, font);\n            });\n            break;\n\n          case \"FontPath\":\n          case \"Image\":\n            this.commonObjs.resolve(id, exportedData);\n            break;\n\n          default:\n            throw new Error(`Got unknown common object type ${type}`);\n        }\n      });\n      messageHandler.on(\"obj\", data => {\n        if (this.destroyed) {\n          return undefined;\n        }\n\n        const [id, pageIndex, type, imageData] = data;\n        const pageProxy = this.pageCache[pageIndex];\n\n        if (pageProxy.objs.has(id)) {\n          return undefined;\n        }\n\n        switch (type) {\n          case \"Image\":\n            pageProxy.objs.resolve(id, imageData);\n            const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n            if (imageData && imageData.data && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) { //lwf\n              pageProxy.cleanupAfterRender = true;\n            }\n\n            break;\n\n          default:\n            throw new Error(`Got unknown object type ${type}`);\n        }\n\n        return undefined;\n      });\n      messageHandler.on(\"DocProgress\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.loaded,\n            total: data.total\n          });\n        }\n      });\n      messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n      messageHandler.on(\"FetchBuiltInCMap\", (data, sink) => {\n        if (this.destroyed) {\n          sink.error(new Error(\"Worker was destroyed\"));\n          return;\n        }\n\n        let fetched = false;\n\n        sink.onPull = () => {\n          if (fetched) {\n            sink.close();\n            return;\n          }\n\n          fetched = true;\n          this.CMapReaderFactory.fetch(data).then(function (builtInCMap) {\n            sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n          }).catch(function (reason) {\n            sink.error(reason);\n          });\n        };\n      });\n    }\n\n    _onUnsupportedFeature({\n      featureId\n    }) {\n      if (this.destroyed) {\n        return;\n      }\n\n      if (this.loadingTask.onUnsupportedFeature) {\n        this.loadingTask.onUnsupportedFeature(featureId);\n      }\n    }\n\n    getData() {\n      return this.messageHandler.sendWithPromise(\"GetData\", null);\n    }\n\n    getPage(pageNumber) {\n      if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n        return Promise.reject(new Error(\"Invalid page request\"));\n      }\n\n      const pageIndex = pageNumber - 1;\n\n      if (pageIndex in this.pagePromises) {\n        return this.pagePromises[pageIndex];\n      }\n\n      const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n        pageIndex\n      }).then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n\n        const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n      this.pagePromises[pageIndex] = promise;\n      return promise;\n    }\n\n    getPageIndex(ref) {\n      return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n        ref\n      }).catch(function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n    }\n\n    getAnnotations(pageIndex, intent) {\n      return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n        pageIndex,\n        intent\n      });\n    }\n\n    saveDocument(annotationStorage) {\n      return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n        numPages: this._numPages,\n        annotationStorage: annotationStorage && annotationStorage.getAll() || null,  // lwf\n        filename: this._fullReader && this._fullReader.filename || null // lwf\n      }).finally(() => {\n        if (annotationStorage) {\n          annotationStorage.resetModified();\n        }\n      });\n    }\n\n    getFieldObjects() {\n      return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n    }\n\n    hasJSActions() {\n      return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise(\"HasJSActions\", null));\n    }\n\n    getCalculationOrderIds() {\n      return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n    }\n\n    getDestinations() {\n      return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n    }\n\n    getDestination(id) {\n      if (typeof id !== \"string\") {\n        return Promise.reject(new Error(\"Invalid destination request.\"));\n      }\n\n      return this.messageHandler.sendWithPromise(\"GetDestination\", {\n        id\n      });\n    }\n\n    getPageLabels() {\n      return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n    }\n\n    getPageLayout() {\n      return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n    }\n\n    getPageMode() {\n      return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n    }\n\n    getViewerPreferences() {\n      return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n    }\n\n    getOpenAction() {\n      return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n    }\n\n    getAttachments() {\n      return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n    }\n\n    getJavaScript() {\n      return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n    }\n\n    getDocJSActions() {\n      return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n    }\n\n    getPageJSActions(pageIndex) {\n      return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n        pageIndex\n      });\n    }\n\n    getOutline() {\n      return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n    }\n\n    getOptionalContentConfig() {\n      return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n        return new _optional_content_config.OptionalContentConfig(results);\n      });\n    }\n\n    getPermissions() {\n      return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n    }\n\n    getMetadata() {\n      return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader && this._fullReader.filename || null, // lwf\n          contentLength: this._fullReader && this._fullReader.contentLength || null  // lwf\n        };\n      });\n    }\n\n    getMarkInfo() {\n      return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n    }\n\n    getStats() {\n      return this.messageHandler.sendWithPromise(\"GetStats\", null);\n    }\n\n    startCleanup() {\n      return this.messageHandler.sendWithPromise(\"Cleanup\", null).then(() => {\n        for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n          const page = this.pageCache[i];\n\n          if (page) {\n            const cleanupSuccessful = page.cleanup();\n\n            if (!cleanupSuccessful) {\n              throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n            }\n          }\n        }\n\n        this.commonObjs.clear();\n        this.fontLoader.clear();\n        this._hasJSActionsPromise = null;\n      });\n    }\n\n    get loadingParams() {\n      const params = this._params;\n      return (0, _util.shadow)(this, \"loadingParams\", {\n        disableAutoFetch: params.disableAutoFetch,\n        disableFontFace: params.disableFontFace\n      });\n    }\n\n  }\n\n  class PDFObjects {\n    constructor() {\n      this._objs = Object.create(null);\n    }\n\n    _ensureObj(objId) {\n      if (this._objs[objId]) {\n        return this._objs[objId];\n      }\n\n      return this._objs[objId] = {\n        capability: (0, _util.createPromiseCapability)(),\n        data: null,\n        resolved: false\n      };\n    }\n\n    get(objId, callback = null) {\n      if (callback) {\n        this._ensureObj(objId).capability.promise.then(callback);\n\n        return null;\n      }\n\n      const obj = this._objs[objId];\n\n      if (!obj || !obj.resolved) {\n        throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n      }\n\n      return obj.data;\n    }\n\n    has(objId) {\n      const obj = this._objs[objId];\n      return obj && obj.resolved || false; // lwf\n    }\n\n    resolve(objId, data) {\n      const obj = this._ensureObj(objId);\n\n      obj.resolved = true;\n      obj.data = data;\n      obj.capability.resolve(data);\n    }\n\n    clear() {\n      this._objs = Object.create(null);\n    }\n\n  }\n\n  class RenderTask {\n    constructor(internalRenderTask) {\n      this._internalRenderTask = internalRenderTask;\n      this.onContinue = null;\n    }\n\n    get promise() {\n      return this._internalRenderTask.capability.promise;\n    }\n\n    cancel() {\n      this._internalRenderTask.cancel();\n    }\n\n  }\n\n  const InternalRenderTask = function InternalRenderTaskClosure() {\n    const canvasInRendering = new WeakSet();\n\n    class InternalRenderTask {\n      constructor({\n        callback,\n        params,\n        objs,\n        commonObjs,\n        operatorList,\n        pageIndex,\n        canvasFactory,\n        webGLContext,\n        useRequestAnimationFrame = false,\n        pdfBug = false\n      }) {\n        this.callback = callback;\n        this.params = params;\n        this.objs = objs;\n        this.commonObjs = commonObjs;\n        this.operatorListIdx = null;\n        this.operatorList = operatorList;\n        this._pageIndex = pageIndex;\n        this.canvasFactory = canvasFactory;\n        this.webGLContext = webGLContext;\n        this._pdfBug = pdfBug;\n        this.running = false;\n        this.graphicsReadyCallback = null;\n        this.graphicsReady = false;\n        this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n        this.cancelled = false;\n        this.capability = (0, _util.createPromiseCapability)();\n        this.task = new RenderTask(this);\n        this._continueBound = this._continue.bind(this);\n        this._scheduleNextBound = this._scheduleNext.bind(this);\n        this._nextBound = this._next.bind(this);\n        this._canvas = params.canvasContext.canvas;\n      }\n\n      get completed() {\n        return this.capability.promise.catch(function () {});\n      }\n\n      initializeGraphics({\n        transparency = false,\n        optionalContentConfig\n      }) {\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this._canvas) {\n          if (canvasInRendering.has(this._canvas)) {\n            throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n          }\n\n          canvasInRendering.add(this._canvas);\n        }\n\n        if (this._pdfBug && globalThis.StepperManager && globalThis.StepperManager.enabled) { // lwf\n          this.stepper = globalThis.StepperManager.create(this._pageIndex);\n          this.stepper.init(this.operatorList);\n          this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n        }\n\n        const {\n          canvasContext,\n          viewport,\n          transform,\n          imageLayer,\n          background\n        } = this.params;\n        this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);\n        this.gfx.beginDrawing({\n          transform,\n          viewport,\n          transparency,\n          background\n        });\n        this.operatorListIdx = 0;\n        this.graphicsReady = true;\n\n        if (this.graphicsReadyCallback) {\n          this.graphicsReadyCallback();\n        }\n      }\n\n      cancel(error = null) {\n        this.running = false;\n        this.cancelled = true;\n\n        if (this.gfx) {\n          this.gfx.endDrawing();\n        }\n\n        if (this._canvas) {\n          canvasInRendering.delete(this._canvas);\n        }\n\n        this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n      }\n\n      operatorListChanged() {\n        if (!this.graphicsReady) {\n          if (!this.graphicsReadyCallback) {\n            this.graphicsReadyCallback = this._continueBound;\n          }\n\n          return;\n        }\n\n        if (this.stepper) {\n          this.stepper.updateOperatorList(this.operatorList);\n        }\n\n        if (this.running) {\n          return;\n        }\n\n        this._continue();\n      }\n\n      _continue() {\n        this.running = true;\n\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this.task.onContinue) {\n          this.task.onContinue(this._scheduleNextBound);\n        } else {\n          this._scheduleNext();\n        }\n      }\n\n      _scheduleNext() {\n        if (this._useRequestAnimationFrame) {\n          window.requestAnimationFrame(() => {\n            this._nextBound().catch(this.cancel.bind(this));\n          });\n        } else {\n          Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this));\n        }\n      }\n\n      async _next() {\n        if (this.cancelled) {\n          return;\n        }\n\n        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n        if (this.operatorListIdx === this.operatorList.argsArray.length) {\n          this.running = false;\n\n          if (this.operatorList.lastChunk) {\n            this.gfx.endDrawing();\n\n            if (this._canvas) {\n              canvasInRendering.delete(this._canvas);\n            }\n\n            this.callback();\n          }\n        }\n      }\n\n    }\n\n    return InternalRenderTask;\n  }();\n\n  const version = '2.7.570';\n  exports.version = version;\n  const build = 'f2c7338b0';\n  exports.build = build;\n\n  /***/ }),\n  /* 6 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.FontLoader = exports.FontFaceObject = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class BaseFontLoader {\n    constructor({\n      docId,\n      onUnsupportedFeature,\n      ownerDocument = globalThis.document\n    }) {\n      if (this.constructor === BaseFontLoader) {\n        (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n      }\n\n      this.docId = docId;\n      this._onUnsupportedFeature = onUnsupportedFeature;\n      this._document = ownerDocument;\n      this.nativeFontFaces = [];\n      this.styleElement = null;\n    }\n\n    addNativeFontFace(nativeFontFace) {\n      this.nativeFontFaces.push(nativeFontFace);\n\n      this._document.fonts.add(nativeFontFace);\n    }\n\n    insertRule(rule) {\n      let styleElement = this.styleElement;\n\n      if (!styleElement) {\n        styleElement = this.styleElement = this._document.createElement(\"style\");\n        styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n        this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n      }\n\n      const styleSheet = styleElement.sheet;\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n\n    clear() {\n      this.nativeFontFaces.forEach(nativeFontFace => {\n        this._document.fonts.delete(nativeFontFace);\n      });\n      this.nativeFontFaces.length = 0;\n\n      if (this.styleElement) {\n        this.styleElement.remove();\n        this.styleElement = null;\n      }\n    }\n\n    async bind(font) {\n      if (font.attached || font.missingFile) {\n        return;\n      }\n\n      font.attached = true;\n\n      if (this.isFontLoadingAPISupported) {\n        const nativeFontFace = font.createNativeFontFace();\n\n        if (nativeFontFace) {\n          this.addNativeFontFace(nativeFontFace);\n\n          try {\n            await nativeFontFace.loaded;\n          } catch (ex) {\n            this._onUnsupportedFeature({\n              featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n            });\n\n            (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n            font.disableFontFace = true;\n            throw ex;\n          }\n        }\n\n        return;\n      }\n\n      const rule = font.createFontFaceRule();\n\n      if (rule) {\n        this.insertRule(rule);\n\n        if (this.isSyncFontLoadingSupported) {\n          return;\n        }\n\n        await new Promise(resolve => {\n          const request = this._queueLoadingCallback(resolve);\n\n          this._prepareFontLoadEvent([rule], [font], request);\n        });\n      }\n    }\n\n    _queueLoadingCallback(callback) {\n      (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n    }\n\n    get isFontLoadingAPISupported() {\n      return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", !!(this._document && this._document.fonts)); // lwf\n    }\n\n    get isSyncFontLoadingSupported() {\n      (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n    }\n\n    get _loadTestFont() {\n      (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n    }\n\n    _prepareFontLoadEvent(rules, fontsToLoad, request) {\n      (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n    }\n\n  }\n\n  let FontLoader;\n  exports.FontLoader = FontLoader;\n  {\n    exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n      constructor(params) {\n        super(params);\n        this.loadingContext = {\n          requests: [],\n          nextRequestId: 0\n        };\n        this.loadTestFontId = 0;\n      }\n\n      get isSyncFontLoadingSupported() {\n        let supported = false;\n\n        if (typeof navigator === \"undefined\") {\n          supported = true;\n        } else {\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n          if (m && m[1] >= 14) { // lwf\n            supported = true;\n          }\n        }\n\n        return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n      }\n\n      _queueLoadingCallback(callback) {\n        function completeRequest() {\n          (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n          request.done = true;\n\n          while (context.requests.length > 0 && context.requests[0].done) {\n            const otherRequest = context.requests.shift();\n            setTimeout(otherRequest.callback, 0);\n          }\n        }\n\n        const context = this.loadingContext;\n        const request = {\n          id: `pdfjs-font-loading-${context.nextRequestId++}`,\n          done: false,\n          complete: completeRequest,\n          callback\n        };\n        context.requests.push(request);\n        return request;\n      }\n\n      get _loadTestFont() {\n        const getLoadTestFont = function () {\n          return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n        };\n\n        return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n      }\n\n      _prepareFontLoadEvent(rules, fonts, request) {\n        function int32(data, offset) {\n          return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n        }\n\n        function spliceString(s, offset, remove, insert) {\n          const chunk1 = s.substring(0, offset);\n          const chunk2 = s.substring(offset + remove);\n          return chunk1 + insert + chunk2;\n        }\n\n        let i, ii;\n\n        const canvas = this._document.createElement(\"canvas\");\n\n        canvas.width = 1;\n        canvas.height = 1;\n        const ctx = canvas.getContext(\"2d\");\n        let called = 0;\n\n        function isFontReady(name, callback) {\n          called++;\n\n          if (called > 30) {\n            (0, _util.warn)(\"Load test font never loaded.\");\n            callback();\n            return;\n          }\n\n          ctx.font = \"30px \" + name;\n          ctx.fillText(\".\", 0, 20);\n          const imageData = ctx.getImageData(0, 0, 1, 1);\n\n          if (imageData.data[3] > 0) {\n            callback();\n            return;\n          }\n\n          setTimeout(isFontReady.bind(null, name, callback));\n        }\n\n        const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n        let data = this._loadTestFont;\n        const COMMENT_OFFSET = 976;\n        data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n        const CFF_CHECKSUM_OFFSET = 16;\n        const XXXX_VALUE = 0x58585858;\n        let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n        for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n        }\n\n        if (i < loadTestFontId.length) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n        }\n\n        data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n        const url = `url(data:font/opentype;base64,${btoa(data)});`;\n        const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n        this.insertRule(rule);\n        const names = [];\n\n        for (i = 0, ii = fonts.length; i < ii; i++) {\n          names.push(fonts[i].loadedName);\n        }\n\n        names.push(loadTestFontId);\n\n        const div = this._document.createElement(\"div\");\n\n        div.style.visibility = \"hidden\";\n        div.style.width = div.style.height = \"10px\";\n        div.style.position = \"absolute\";\n        div.style.top = div.style.left = \"0px\";\n\n        for (i = 0, ii = names.length; i < ii; ++i) {\n          const span = this._document.createElement(\"span\");\n\n          span.textContent = \"Hi\";\n          span.style.fontFamily = names[i];\n          div.appendChild(span);\n        }\n\n        this._document.body.appendChild(div);\n\n        isFontReady(loadTestFontId, () => {\n          this._document.body.removeChild(div);\n\n          request.complete();\n        });\n      }\n\n    };\n  }\n\n  class FontFaceObject {\n    constructor(translatedData, {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature = null,\n      fontRegistry = null\n    }) {\n      this.compiledGlyphs = Object.create(null);\n\n      for (const i in translatedData) {\n        this[i] = translatedData[i];\n      }\n\n      this.isEvalSupported = isEvalSupported !== false;\n      this.disableFontFace = disableFontFace === true;\n      this.ignoreErrors = ignoreErrors === true;\n      this._onUnsupportedFeature = onUnsupportedFeature;\n      this.fontRegistry = fontRegistry;\n    }\n\n    createNativeFontFace() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      const nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this);\n      }\n\n      return nativeFontFace;\n    }\n\n    createFontFaceRule() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      const data = (0, _util.bytesToString)(new Uint8Array(this.data));\n      const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this, url);\n      }\n\n      return rule;\n    }\n\n    getPathGenerator(objs, character) {\n      if (this.compiledGlyphs[character] !== undefined) {\n        return this.compiledGlyphs[character];\n      }\n\n      let cmds, current;\n\n      try {\n        cmds = objs.get(this.loadedName + \"_path_\" + character);\n      } catch (ex) {\n        if (!this.ignoreErrors) {\n          throw ex;\n        }\n\n        if (this._onUnsupportedFeature) {\n          this._onUnsupportedFeature({\n            featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n          });\n        }\n\n        (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n        return this.compiledGlyphs[character] = function (c, size) {};\n      }\n\n      if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n        let args,\n            js = \"\";\n\n        for (let i = 0, ii = cmds.length; i < ii; i++) {\n          current = cmds[i];\n\n          if (current.args !== undefined) {\n            args = current.args.join(\",\");\n          } else {\n            args = \"\";\n          }\n\n          js += \"c.\" + current.cmd + \"(\" + args + \");\\n\";\n        }\n\n        return this.compiledGlyphs[character] = new Function(\"c\", \"size\", js);\n      }\n\n      return this.compiledGlyphs[character] = function (c, size) {\n        for (let i = 0, ii = cmds.length; i < ii; i++) {\n          current = cmds[i];\n\n          if (current.cmd === \"scale\") {\n            current.args = [size, -size];\n          }\n\n          c[current.cmd].apply(c, current.args);\n        }\n      };\n    }\n\n  }\n\n  exports.FontFaceObject = FontFaceObject;\n\n  /***/ }),\n  /* 7 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  var _util = __w_pdfjs_require__(2);\n\n  let NodeCanvasFactory = class {\n    constructor() {\n      (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n    }\n\n  };\n  exports.NodeCanvasFactory = NodeCanvasFactory;\n  let NodeCMapReaderFactory = class {\n    constructor() {\n      (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n    }\n\n  };\n  exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\n  if (_is_node.isNodeJS) {\n    exports.NodeCanvasFactory = NodeCanvasFactory = class extends _display_utils.BaseCanvasFactory {\n      create(width, height) {\n        if (width <= 0 || height <= 0) {\n          throw new Error(\"Invalid canvas size\");\n        }\n\n        const Canvas = require(\"canvas\");\n\n        const canvas = Canvas.createCanvas(width, height);\n        return {\n          canvas,\n          context: canvas.getContext(\"2d\")\n        };\n      }\n\n    };\n    exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _display_utils.BaseCMapReaderFactory {\n      _fetchData(url, compressionType) {\n        return new Promise((resolve, reject) => {\n          const fs = require(\"fs\");\n\n          fs.readFile(url, (error, data) => {\n            if (error || !data) {\n              reject(new Error(error));\n              return;\n            }\n\n            resolve({\n              cMapData: new Uint8Array(data),\n              compressionType\n            });\n          });\n        });\n      }\n\n    };\n  }\n\n  /***/ }),\n  /* 8 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.AnnotationStorage = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class AnnotationStorage {\n    constructor() {\n      this._storage = new Map();\n      this._modified = false;\n      this.onSetModified = null;\n      this.onResetModified = null;\n    }\n\n    getOrCreateValue(key, defaultValue) {\n      if (this._storage.has(key)) {\n        return this._storage.get(key);\n      }\n\n      this._storage.set(key, defaultValue);\n\n      return defaultValue;\n    }\n\n    setValue(key, value) {\n      const obj = this._storage.get(key);\n\n      let modified = false;\n\n      if (obj !== undefined) {\n        for (const [entry, val] of Object.entries(value)) {\n          if (obj[entry] !== val) {\n            modified = true;\n            obj[entry] = val;\n          }\n        }\n      } else {\n        this._storage.set(key, value);\n\n        modified = true;\n      }\n\n      if (modified) {\n        this._setModified();\n      }\n    }\n\n    getAll() {\n      if (this._storage.size === 0) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._storage);\n    }\n\n    get size() {\n      return this._storage.size;\n    }\n\n    _setModified() {\n      if (!this._modified) {\n        this._modified = true;\n\n        if (typeof this.onSetModified === \"function\") {\n          this.onSetModified();\n        }\n      }\n    }\n\n    resetModified() {\n      if (this._modified) {\n        this._modified = false;\n\n        if (typeof this.onResetModified === \"function\") {\n          this.onResetModified();\n        }\n      }\n    }\n\n  }\n\n  exports.AnnotationStorage = AnnotationStorage;\n\n  /***/ }),\n  /* 9 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.apiCompatibilityParams = void 0;\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  const compatibilityParams = Object.create(null);\n  {\n    (function checkFontFace() {\n      if (_is_node.isNodeJS) {\n        compatibilityParams.disableFontFace = true;\n      }\n    })();\n  }\n  const apiCompatibilityParams = Object.freeze(compatibilityParams);\n  exports.apiCompatibilityParams = apiCompatibilityParams;\n\n  /***/ }),\n  /* 10 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.CanvasGraphics = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _pattern_helper = __w_pdfjs_require__(11);\n\n  const MIN_FONT_SIZE = 16;\n  const MAX_FONT_SIZE = 100;\n  const MAX_GROUP_SIZE = 4096;\n  const COMPILE_TYPE3_GLYPHS = true;\n  const MAX_SIZE_TO_COMPILE = 1000;\n  const FULL_CHUNK_HEIGHT = 16;\n\n  function addContextCurrentTransform(ctx) {\n    if (!ctx.mozCurrentTransform) {\n      ctx._originalSave = ctx.save;\n      ctx._originalRestore = ctx.restore;\n      ctx._originalRotate = ctx.rotate;\n      ctx._originalScale = ctx.scale;\n      ctx._originalTranslate = ctx.translate;\n      ctx._originalTransform = ctx.transform;\n      ctx._originalSetTransform = ctx.setTransform;\n      ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n      ctx._transformStack = [];\n      Object.defineProperty(ctx, \"mozCurrentTransform\", {\n        get: function getCurrentTransform() {\n          return this._transformMatrix;\n        }\n      });\n      Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n        get: function getCurrentTransformInverse() {\n          const m = this._transformMatrix;\n          const a = m[0],\n                b = m[1],\n                c = m[2],\n                d = m[3],\n                e = m[4],\n                f = m[5];\n          const ad_bc = a * d - b * c;\n          const bc_ad = b * c - a * d;\n          return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n        }\n      });\n\n      ctx.save = function ctxSave() {\n        const old = this._transformMatrix;\n\n        this._transformStack.push(old);\n\n        this._transformMatrix = old.slice(0, 6);\n\n        this._originalSave();\n      };\n\n      ctx.restore = function ctxRestore() {\n        const prev = this._transformStack.pop();\n\n        if (prev) {\n          this._transformMatrix = prev;\n\n          this._originalRestore();\n        }\n      };\n\n      ctx.translate = function ctxTranslate(x, y) {\n        const m = this._transformMatrix;\n        m[4] = m[0] * x + m[2] * y + m[4];\n        m[5] = m[1] * x + m[3] * y + m[5];\n\n        this._originalTranslate(x, y);\n      };\n\n      ctx.scale = function ctxScale(x, y) {\n        const m = this._transformMatrix;\n        m[0] = m[0] * x;\n        m[1] = m[1] * x;\n        m[2] = m[2] * y;\n        m[3] = m[3] * y;\n\n        this._originalScale(x, y);\n      };\n\n      ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n        const m = this._transformMatrix;\n        this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n        ctx._originalTransform(a, b, c, d, e, f);\n      };\n\n      ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n        this._transformMatrix = [a, b, c, d, e, f];\n\n        ctx._originalSetTransform(a, b, c, d, e, f);\n      };\n\n      ctx.rotate = function ctxRotate(angle) {\n        const cosValue = Math.cos(angle);\n        const sinValue = Math.sin(angle);\n        const m = this._transformMatrix;\n        this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n        this._originalRotate(angle);\n      };\n    }\n  }\n\n  const CachedCanvases = function CachedCanvasesClosure() {\n    function CachedCanvases(canvasFactory) {\n      this.canvasFactory = canvasFactory;\n      this.cache = Object.create(null);\n    }\n\n    CachedCanvases.prototype = {\n      getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {\n        let canvasEntry;\n\n        if (this.cache[id] !== undefined) {\n          canvasEntry = this.cache[id];\n          this.canvasFactory.reset(canvasEntry, width, height);\n          canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n        } else {\n          canvasEntry = this.canvasFactory.create(width, height);\n          this.cache[id] = canvasEntry;\n        }\n\n        if (trackTransform) {\n          addContextCurrentTransform(canvasEntry.context);\n        }\n\n        return canvasEntry;\n      },\n\n      clear() {\n        for (const id in this.cache) {\n          const canvasEntry = this.cache[id];\n          this.canvasFactory.destroy(canvasEntry);\n          delete this.cache[id];\n        }\n      }\n\n    };\n    return CachedCanvases;\n  }();\n\n  function compileType3Glyph(imgData) {\n    const POINT_TO_PROCESS_LIMIT = 1000;\n    const width = imgData.width,\n          height = imgData.height,\n          width1 = width + 1;\n    let i, ii, j, j0;\n    const points = new Uint8Array(width1 * (height + 1));\n    const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n    const lineSize = width + 7 & ~7,\n          data0 = imgData.data;\n    const data = new Uint8Array(lineSize * height);\n    let pos = 0;\n\n    for (i = 0, ii = data0.length; i < ii; i++) {\n      const elem = data0[i];\n      let mask = 128;\n\n      while (mask > 0) {\n        data[pos++] = elem & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    let count = 0;\n    pos = 0;\n\n    if (data[pos] !== 0) {\n      points[0] = 1;\n      ++count;\n    }\n\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j] = data[pos] ? 2 : 1;\n        ++count;\n      }\n\n      pos++;\n    }\n\n    if (data[pos] !== 0) {\n      points[j] = 2;\n      ++count;\n    }\n\n    for (i = 1; i < height; i++) {\n      pos = i * lineSize;\n      j0 = i * width1;\n\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0] = data[pos] ? 1 : 8;\n        ++count;\n      }\n\n      let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n      for (j = 1; j < width; j++) {\n        sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n        if (POINT_TYPES[sum]) {\n          points[j0 + j] = POINT_TYPES[sum];\n          ++count;\n        }\n\n        pos++;\n      }\n\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0 + j] = data[pos] ? 2 : 4;\n        ++count;\n      }\n\n      if (count > POINT_TO_PROCESS_LIMIT) {\n        return null;\n      }\n    }\n\n    pos = lineSize * (height - 1);\n    j0 = i * width1;\n\n    if (data[pos] !== 0) {\n      points[j0] = 8;\n      ++count;\n    }\n\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j0 + j] = data[pos] ? 4 : 8;\n        ++count;\n      }\n\n      pos++;\n    }\n\n    if (data[pos] !== 0) {\n      points[j0 + j] = 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n\n    const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n    const outlines = [];\n\n    for (i = 0; count && i <= height; i++) {\n      let p = i * width1;\n      const end = p + width;\n\n      while (p < end && !points[p]) {\n        p++;\n      }\n\n      if (p === end) {\n        continue;\n      }\n\n      const coords = [p % width1, i];\n      const p0 = p;\n      let type = points[p];\n\n      do {\n        const step = steps[type];\n\n        do {\n          p += step;\n        } while (!points[p]);\n\n        const pp = points[p];\n\n        if (pp !== 5 && pp !== 10) {\n          type = pp;\n          points[p] = 0;\n        } else {\n          type = pp & 0x33 * type >> 4;\n          points[p] &= type >> 2 | type << 2;\n        }\n\n        coords.push(p % width1);\n        coords.push(p / width1 | 0);\n\n        if (!points[p]) {\n          --count;\n        }\n      } while (p0 !== p);\n\n      outlines.push(coords);\n      --i;\n    }\n\n    const drawOutline = function (c) {\n      c.save();\n      c.scale(1 / width, -1 / height);\n      c.translate(0, -height);\n      c.beginPath();\n\n      for (let k = 0, kk = outlines.length; k < kk; k++) {\n        const o = outlines[k];\n        c.moveTo(o[0], o[1]);\n\n        for (let l = 2, ll = o.length; l < ll; l += 2) {\n          c.lineTo(o[l], o[l + 1]);\n        }\n      }\n\n      c.fill();\n      c.beginPath();\n      c.restore();\n    };\n\n    return drawOutline;\n  }\n\n  const CanvasExtraState = function CanvasExtraStateClosure() {\n    function CanvasExtraState() {\n      this.alphaIsShape = false;\n      this.fontSize = 0;\n      this.fontSizeScale = 1;\n      this.textMatrix = _util.IDENTITY_MATRIX;\n      this.textMatrixScale = 1;\n      this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.x = 0;\n      this.y = 0;\n      this.lineX = 0;\n      this.lineY = 0;\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRenderingMode = _util.TextRenderingMode.FILL;\n      this.textRise = 0;\n      this.fillColor = \"#000000\";\n      this.strokeColor = \"#000000\";\n      this.patternFill = false;\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.activeSMask = null;\n      this.resumeSMaskCtx = null;\n      this.transferMaps = null;\n    }\n\n    CanvasExtraState.prototype = {\n      clone: function CanvasExtraState_clone() {\n        return Object.create(this);\n      },\n      setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n    };\n    return CanvasExtraState;\n  }();\n\n  const CanvasGraphics = function CanvasGraphicsClosure() {\n    const EXECUTION_TIME = 15;\n    const EXECUTION_STEPS = 10;\n\n    function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {\n      this.ctx = canvasCtx;\n      this.current = new CanvasExtraState();\n      this.stateStack = [];\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n      this.res = null;\n      this.xobjs = null;\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.canvasFactory = canvasFactory;\n      this.webGLContext = webGLContext;\n      this.imageLayer = imageLayer;\n      this.groupStack = [];\n      this.processingType3 = null;\n      this.baseTransform = null;\n      this.baseTransformStack = [];\n      this.groupLevel = 0;\n      this.smaskStack = [];\n      this.smaskCounter = 0;\n      this.tempSMask = null;\n      this.contentVisible = true;\n      this.markedContentStack = [];\n      this.optionalContentConfig = optionalContentConfig;\n      this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n\n      if (canvasCtx) {\n        addContextCurrentTransform(canvasCtx);\n      }\n\n      this._cachedGetSinglePixelWidth = null;\n    }\n\n    function putBinaryImageData(ctx, imgData, transferMaps = null) {\n      if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n        ctx.putImageData(imgData, 0, 0);\n        return;\n      }\n\n      const height = imgData.height,\n            width = imgData.width;\n      const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n      const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n      const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n      const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n      let srcPos = 0,\n          destPos;\n      const src = imgData.data;\n      const dest = chunkImgData.data;\n      let i, j, thisChunkHeight, elemsInThisChunk;\n      let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n      if (transferMaps) {\n        switch (transferMaps.length) {\n          case 1:\n            transferMapRed = transferMaps[0];\n            transferMapGreen = transferMaps[0];\n            transferMapBlue = transferMaps[0];\n            transferMapGray = transferMaps[0];\n            break;\n\n          case 4:\n            transferMapRed = transferMaps[0];\n            transferMapGreen = transferMaps[1];\n            transferMapBlue = transferMaps[2];\n            transferMapGray = transferMaps[3];\n            break;\n        }\n      }\n\n      if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n        const srcLength = src.byteLength;\n        const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n        const dest32DataLength = dest32.length;\n        const fullSrcDiff = width + 7 >> 3;\n        let white = 0xffffffff;\n        let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n        if (transferMapGray) {\n          if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n            [white, black] = [black, white];\n          }\n        }\n\n        for (i = 0; i < totalChunks; i++) {\n          thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n          destPos = 0;\n\n          for (j = 0; j < thisChunkHeight; j++) {\n            const srcDiff = srcLength - srcPos;\n            let k = 0;\n            const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n            const kEndUnrolled = kEnd & ~7;\n            let mask = 0;\n            let srcByte = 0;\n\n            for (; k < kEndUnrolled; k += 8) {\n              srcByte = src[srcPos++];\n              dest32[destPos++] = srcByte & 128 ? white : black;\n              dest32[destPos++] = srcByte & 64 ? white : black;\n              dest32[destPos++] = srcByte & 32 ? white : black;\n              dest32[destPos++] = srcByte & 16 ? white : black;\n              dest32[destPos++] = srcByte & 8 ? white : black;\n              dest32[destPos++] = srcByte & 4 ? white : black;\n              dest32[destPos++] = srcByte & 2 ? white : black;\n              dest32[destPos++] = srcByte & 1 ? white : black;\n            }\n\n            for (; k < kEnd; k++) {\n              if (mask === 0) {\n                srcByte = src[srcPos++];\n                mask = 128;\n              }\n\n              dest32[destPos++] = srcByte & mask ? white : black;\n              mask >>= 1;\n            }\n          }\n\n          while (destPos < dest32DataLength) {\n            dest32[destPos++] = 0;\n          }\n\n          ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n        }\n      } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n        const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n        j = 0;\n        elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n        for (i = 0; i < fullChunks; i++) {\n          dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n          srcPos += elemsInThisChunk;\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < elemsInThisChunk; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, j);\n          j += FULL_CHUNK_HEIGHT;\n        }\n\n        if (i < totalChunks) {\n          elemsInThisChunk = width * partialChunkHeight * 4;\n          dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < elemsInThisChunk; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, j);\n        }\n      } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n        const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n        thisChunkHeight = FULL_CHUNK_HEIGHT;\n        elemsInThisChunk = width * thisChunkHeight;\n\n        for (i = 0; i < totalChunks; i++) {\n          if (i >= fullChunks) {\n            thisChunkHeight = partialChunkHeight;\n            elemsInThisChunk = width * thisChunkHeight;\n          }\n\n          destPos = 0;\n\n          for (j = elemsInThisChunk; j--;) {\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = 255;\n          }\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < destPos; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n        }\n      } else {\n        throw new Error(`bad image kind: ${imgData.kind}`);\n      }\n    }\n\n    function putBinaryImageMask(ctx, imgData) {\n      const height = imgData.height,\n            width = imgData.width;\n      const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n      const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n      const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n      const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n      let srcPos = 0;\n      const src = imgData.data;\n      const dest = chunkImgData.data;\n\n      for (let i = 0; i < totalChunks; i++) {\n        const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        let destPos = 3;\n\n        for (let j = 0; j < thisChunkHeight; j++) {\n          let elem,\n              mask = 0;\n\n          for (let k = 0; k < width; k++) {\n            if (!mask) {\n              elem = src[srcPos++];\n              mask = 128;\n            }\n\n            dest[destPos] = elem & mask ? 0 : 255;\n            destPos += 4;\n            mask >>= 1;\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    }\n\n    function copyCtxState(sourceCtx, destCtx) {\n      const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n      for (let i = 0, ii = properties.length; i < ii; i++) {\n        const property = properties[i];\n\n        if (sourceCtx[property] !== undefined) {\n          destCtx[property] = sourceCtx[property];\n        }\n      }\n\n      if (sourceCtx.setLineDash !== undefined) {\n        destCtx.setLineDash(sourceCtx.getLineDash());\n        destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n      }\n    }\n\n    function resetCtxToDefault(ctx) {\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillRule = \"nonzero\";\n      ctx.globalAlpha = 1;\n      ctx.lineWidth = 1;\n      ctx.lineCap = \"butt\";\n      ctx.lineJoin = \"miter\";\n      ctx.miterLimit = 10;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.font = \"10px sans-serif\";\n\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash([]);\n        ctx.lineDashOffset = 0;\n      }\n    }\n\n    function composeSMaskBackdrop(bytes, r0, g0, b0) {\n      const length = bytes.length;\n\n      for (let i = 3; i < length; i += 4) {\n        const alpha = bytes[i];\n\n        if (alpha === 0) {\n          bytes[i - 3] = r0;\n          bytes[i - 2] = g0;\n          bytes[i - 1] = b0;\n        } else if (alpha < 255) {\n          const alpha_ = 255 - alpha;\n          bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n          bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n          bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n        }\n      }\n    }\n\n    function composeSMaskAlpha(maskData, layerData, transferMap) {\n      const length = maskData.length;\n      const scale = 1 / 255;\n\n      for (let i = 3; i < length; i += 4) {\n        const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n        layerData[i] = layerData[i] * alpha * scale | 0;\n      }\n    }\n\n    function composeSMaskLuminosity(maskData, layerData, transferMap) {\n      const length = maskData.length;\n\n      for (let i = 3; i < length; i += 4) {\n        const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n        layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n      }\n    }\n\n    function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n      const hasBackdrop = !!backdrop;\n      const r0 = hasBackdrop ? backdrop[0] : 0;\n      const g0 = hasBackdrop ? backdrop[1] : 0;\n      const b0 = hasBackdrop ? backdrop[2] : 0;\n      let composeFn;\n\n      if (subtype === \"Luminosity\") {\n        composeFn = composeSMaskLuminosity;\n      } else {\n        composeFn = composeSMaskAlpha;\n      }\n\n      const PIXELS_TO_PROCESS = 1048576;\n      const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n      for (let row = 0; row < height; row += chunkSize) {\n        const chunkHeight = Math.min(chunkSize, height - row);\n        const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n        const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n        if (hasBackdrop) {\n          composeSMaskBackdrop(maskData.data, r0, g0, b0);\n        }\n\n        composeFn(maskData.data, layerData.data, transferMap);\n        maskCtx.putImageData(layerData, 0, row);\n      }\n    }\n\n    function composeSMask(ctx, smask, layerCtx, webGLContext) {\n      const mask = smask.canvas;\n      const maskCtx = smask.context;\n      ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n      const backdrop = smask.backdrop || null;\n\n      if (!smask.transferMap && webGLContext.isEnabled) {\n        const composed = webGLContext.composeSMask({\n          layer: layerCtx.canvas,\n          mask,\n          properties: {\n            subtype: smask.subtype,\n            backdrop\n          }\n        });\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n        return;\n      }\n\n      genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);\n      ctx.drawImage(mask, 0, 0);\n    }\n\n    const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n    const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n    const NORMAL_CLIP = {};\n    const EO_CLIP = {};\n    CanvasGraphics.prototype = {\n      beginDrawing({\n        transform,\n        viewport,\n        transparency = false,\n        background = null\n      }) {\n        const width = this.ctx.canvas.width;\n        const height = this.ctx.canvas.height;\n        this.ctx.save();\n        this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n        this.ctx.fillRect(0, 0, width, height);\n        this.ctx.restore();\n\n        if (transparency) {\n          const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n          this.compositeCtx = this.ctx;\n          this.transparentCanvas = transparentCanvas.canvas;\n          this.ctx = transparentCanvas.context;\n          this.ctx.save();\n          this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n        }\n\n        this.ctx.save();\n        resetCtxToDefault(this.ctx);\n\n        if (transform) {\n          this.ctx.transform.apply(this.ctx, transform);\n        }\n\n        this.ctx.transform.apply(this.ctx, viewport.transform);\n        this.baseTransform = this.ctx.mozCurrentTransform.slice();\n        this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n        if (this.imageLayer) {\n          this.imageLayer.beginLayout();\n        }\n      },\n\n      executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n        const argsArray = operatorList.argsArray;\n        const fnArray = operatorList.fnArray;\n        let i = executionStartIdx || 0;\n        const argsArrayLen = argsArray.length;\n\n        if (argsArrayLen === i) {\n          return i;\n        }\n\n        const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n        const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n        let steps = 0;\n        const commonObjs = this.commonObjs;\n        const objs = this.objs;\n        let fnId;\n\n        while (true) {\n          if (stepper !== undefined && i === stepper.nextBreakPoint) {\n            stepper.breakIt(i, continueCallback);\n            return i;\n          }\n\n          fnId = fnArray[i];\n\n          if (fnId !== _util.OPS.dependency) {\n            this[fnId].apply(this, argsArray[i]);\n          } else {\n            for (const depObjId of argsArray[i]) {\n              const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n              if (!objsPool.has(depObjId)) {\n                objsPool.get(depObjId, continueCallback);\n                return i;\n              }\n            }\n          }\n\n          i++;\n\n          if (i === argsArrayLen) {\n            return i;\n          }\n\n          if (chunkOperations && ++steps > EXECUTION_STEPS) {\n            if (Date.now() > endTime) {\n              continueCallback();\n              return i;\n            }\n\n            steps = 0;\n          }\n        }\n      },\n      endDrawing: function CanvasGraphics_endDrawing() {\n        while (this.stateStack.length || this.current.activeSMask !== null) {\n          this.restore();\n        }\n\n        this.ctx.restore();\n\n        if (this.transparentCanvas) {\n          this.ctx = this.compositeCtx;\n          this.ctx.save();\n          this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n          this.ctx.drawImage(this.transparentCanvas, 0, 0);\n          this.ctx.restore();\n          this.transparentCanvas = null;\n        }\n\n        this.cachedCanvases.clear();\n        this.webGLContext.clear();\n\n        if (this.imageLayer) {\n          this.imageLayer.endLayout();\n        }\n      },\n      setLineWidth: function CanvasGraphics_setLineWidth(width) {\n        this.current.lineWidth = width;\n        this.ctx.lineWidth = width;\n      },\n      setLineCap: function CanvasGraphics_setLineCap(style) {\n        this.ctx.lineCap = LINE_CAP_STYLES[style];\n      },\n      setLineJoin: function CanvasGraphics_setLineJoin(style) {\n        this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n      },\n      setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n        this.ctx.miterLimit = limit;\n      },\n      setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n        const ctx = this.ctx;\n\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash(dashArray);\n          ctx.lineDashOffset = dashPhase;\n        }\n      },\n\n      setRenderingIntent(intent) {},\n\n      setFlatness(flatness) {},\n\n      setGState: function CanvasGraphics_setGState(states) {\n        for (let i = 0, ii = states.length; i < ii; i++) {\n          const state = states[i];\n          const key = state[0];\n          const value = state[1];\n\n          switch (key) {\n            case \"LW\":\n              this.setLineWidth(value);\n              break;\n\n            case \"LC\":\n              this.setLineCap(value);\n              break;\n\n            case \"LJ\":\n              this.setLineJoin(value);\n              break;\n\n            case \"ML\":\n              this.setMiterLimit(value);\n              break;\n\n            case \"D\":\n              this.setDash(value[0], value[1]);\n              break;\n\n            case \"RI\":\n              this.setRenderingIntent(value);\n              break;\n\n            case \"FL\":\n              this.setFlatness(value);\n              break;\n\n            case \"Font\":\n              this.setFont(value[0], value[1]);\n              break;\n\n            case \"CA\":\n              this.current.strokeAlpha = state[1];\n              break;\n\n            case \"ca\":\n              this.current.fillAlpha = state[1];\n              this.ctx.globalAlpha = state[1];\n              break;\n\n            case \"BM\":\n              this.ctx.globalCompositeOperation = value;\n              break;\n\n            case \"SMask\":\n              if (this.current.activeSMask) {\n                if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                  this.suspendSMaskGroup();\n                } else {\n                  this.endSMaskGroup();\n                }\n              }\n\n              this.current.activeSMask = value ? this.tempSMask : null;\n\n              if (this.current.activeSMask) {\n                this.beginSMaskGroup();\n              }\n\n              this.tempSMask = null;\n              break;\n\n            case \"TR\":\n              this.current.transferMaps = value;\n          }\n        }\n      },\n      beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n        const activeSMask = this.current.activeSMask;\n        const drawnWidth = activeSMask.canvas.width;\n        const drawnHeight = activeSMask.canvas.height;\n        const cacheId = \"smaskGroupAt\" + this.groupLevel;\n        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n        const currentCtx = this.ctx;\n        const currentTransform = currentCtx.mozCurrentTransform;\n        this.ctx.save();\n        const groupCtx = scratchCanvas.context;\n        groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n        groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n        groupCtx.transform.apply(groupCtx, currentTransform);\n        activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n        copyCtxState(currentCtx, groupCtx);\n        this.ctx = groupCtx;\n        this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n      },\n      suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n        const groupCtx = this.ctx;\n        this.groupLevel--;\n        this.ctx = this.groupStack.pop();\n        composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n        this.ctx.restore();\n        this.ctx.save();\n        copyCtxState(groupCtx, this.ctx);\n        this.current.resumeSMaskCtx = groupCtx;\n\n        const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n        this.ctx.transform.apply(this.ctx, deltaTransform);\n        groupCtx.save();\n        groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n        groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n        groupCtx.restore();\n      },\n      resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {\n        const groupCtx = this.current.resumeSMaskCtx;\n        const currentCtx = this.ctx;\n        this.ctx = groupCtx;\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n      },\n      endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n        const groupCtx = this.ctx;\n        this.groupLevel--;\n        this.ctx = this.groupStack.pop();\n        composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n        this.ctx.restore();\n        copyCtxState(groupCtx, this.ctx);\n\n        const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n        this.ctx.transform.apply(this.ctx, deltaTransform);\n      },\n      save: function CanvasGraphics_save() {\n        this.ctx.save();\n        const old = this.current;\n        this.stateStack.push(old);\n        this.current = old.clone();\n        this.current.resumeSMaskCtx = null;\n      },\n      restore: function CanvasGraphics_restore() {\n        if (this.current.resumeSMaskCtx) {\n          this.resumeSMaskGroup();\n        }\n\n        if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n          this.endSMaskGroup();\n        }\n\n        if (this.stateStack.length !== 0) {\n          this.current = this.stateStack.pop();\n          this.ctx.restore();\n          this.pendingClip = null;\n          this._cachedGetSinglePixelWidth = null;\n        } else {\n          this.current.activeSMask = null;\n        }\n      },\n      transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n        this.ctx.transform(a, b, c, d, e, f);\n        this._cachedGetSinglePixelWidth = null;\n      },\n      constructPath: function CanvasGraphics_constructPath(ops, args) {\n        const ctx = this.ctx;\n        const current = this.current;\n        let x = current.x,\n            y = current.y;\n\n        for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n          switch (ops[i] | 0) {\n            case _util.OPS.rectangle:\n              x = args[j++];\n              y = args[j++];\n              const width = args[j++];\n              const height = args[j++];\n              const xw = x + width;\n              const yh = y + height;\n              ctx.moveTo(x, y);\n\n              if (width === 0 || height === 0) {\n                ctx.lineTo(xw, yh);\n              } else {\n                ctx.lineTo(xw, y);\n                ctx.lineTo(xw, yh);\n                ctx.lineTo(x, yh);\n              }\n\n              ctx.closePath();\n              break;\n\n            case _util.OPS.moveTo:\n              x = args[j++];\n              y = args[j++];\n              ctx.moveTo(x, y);\n              break;\n\n            case _util.OPS.lineTo:\n              x = args[j++];\n              y = args[j++];\n              ctx.lineTo(x, y);\n              break;\n\n            case _util.OPS.curveTo:\n              x = args[j + 4];\n              y = args[j + 5];\n              ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n              j += 6;\n              break;\n\n            case _util.OPS.curveTo2:\n              ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n              x = args[j + 2];\n              y = args[j + 3];\n              j += 4;\n              break;\n\n            case _util.OPS.curveTo3:\n              x = args[j + 2];\n              y = args[j + 3];\n              ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n              j += 4;\n              break;\n\n            case _util.OPS.closePath:\n              ctx.closePath();\n              break;\n          }\n        }\n\n        current.setCurrentPoint(x, y);\n      },\n      closePath: function CanvasGraphics_closePath() {\n        this.ctx.closePath();\n      },\n      stroke: function CanvasGraphics_stroke(consumePath) {\n        consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n        const ctx = this.ctx;\n        const strokeColor = this.current.strokeColor;\n        ctx.globalAlpha = this.current.strokeAlpha;\n\n        if (this.contentVisible) {\n          if (typeof strokeColor === \"object\" && strokeColor && strokeColor.getPattern) { // lwf\n            ctx.save();\n            const transform = ctx.mozCurrentTransform;\n\n            const scale = _util.Util.singularValueDecompose2dScale(transform)[0];\n\n            ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n            const lineWidth = this.getSinglePixelWidth();\n            const scaledLineWidth = this.current.lineWidth * scale;\n\n            if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            } else {\n              ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);\n            }\n\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            const lineWidth = this.getSinglePixelWidth();\n\n            if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n              ctx.save();\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n              ctx.stroke();\n              ctx.restore();\n            } else {\n              ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n              ctx.stroke();\n            }\n          }\n        }\n\n        if (consumePath) {\n          this.consumePath();\n        }\n\n        ctx.globalAlpha = this.current.fillAlpha;\n      },\n      closeStroke: function CanvasGraphics_closeStroke() {\n        this.closePath();\n        this.stroke();\n      },\n      fill: function CanvasGraphics_fill(consumePath) {\n        consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n        const ctx = this.ctx;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        let needRestore = false;\n\n        if (isPatternFill) {\n          ctx.save();\n\n          if (this.baseTransform) {\n            ctx.setTransform.apply(ctx, this.baseTransform);\n          }\n\n          ctx.fillStyle = fillColor.getPattern(ctx, this);\n          needRestore = true;\n        }\n\n        if (this.contentVisible) {\n          if (this.pendingEOFill) {\n            ctx.fill(\"evenodd\");\n            this.pendingEOFill = false;\n          } else {\n            ctx.fill();\n          }\n        }\n\n        if (needRestore) {\n          ctx.restore();\n        }\n\n        if (consumePath) {\n          this.consumePath();\n        }\n      },\n      eoFill: function CanvasGraphics_eoFill() {\n        this.pendingEOFill = true;\n        this.fill();\n      },\n      fillStroke: function CanvasGraphics_fillStroke() {\n        this.fill(false);\n        this.stroke(false);\n        this.consumePath();\n      },\n      eoFillStroke: function CanvasGraphics_eoFillStroke() {\n        this.pendingEOFill = true;\n        this.fillStroke();\n      },\n      closeFillStroke: function CanvasGraphics_closeFillStroke() {\n        this.closePath();\n        this.fillStroke();\n      },\n      closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n        this.pendingEOFill = true;\n        this.closePath();\n        this.fillStroke();\n      },\n      endPath: function CanvasGraphics_endPath() {\n        this.consumePath();\n      },\n      clip: function CanvasGraphics_clip() {\n        this.pendingClip = NORMAL_CLIP;\n      },\n      eoClip: function CanvasGraphics_eoClip() {\n        this.pendingClip = EO_CLIP;\n      },\n      beginText: function CanvasGraphics_beginText() {\n        this.current.textMatrix = _util.IDENTITY_MATRIX;\n        this.current.textMatrixScale = 1;\n        this.current.x = this.current.lineX = 0;\n        this.current.y = this.current.lineY = 0;\n      },\n      endText: function CanvasGraphics_endText() {\n        const paths = this.pendingTextPaths;\n        const ctx = this.ctx;\n\n        if (paths === undefined) {\n          ctx.beginPath();\n          return;\n        }\n\n        ctx.save();\n        ctx.beginPath();\n\n        for (let i = 0; i < paths.length; i++) {\n          const path = paths[i];\n          ctx.setTransform.apply(ctx, path.transform);\n          ctx.translate(path.x, path.y);\n          path.addToPath(ctx, path.fontSize);\n        }\n\n        ctx.restore();\n        ctx.clip();\n        ctx.beginPath();\n        delete this.pendingTextPaths;\n      },\n      setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n        this.current.charSpacing = spacing;\n      },\n      setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n        this.current.wordSpacing = spacing;\n      },\n      setHScale: function CanvasGraphics_setHScale(scale) {\n        this.current.textHScale = scale / 100;\n      },\n      setLeading: function CanvasGraphics_setLeading(leading) {\n        this.current.leading = -leading;\n      },\n      setFont: function CanvasGraphics_setFont(fontRefName, size) {\n        const fontObj = this.commonObjs.get(fontRefName);\n        const current = this.current;\n\n        if (!fontObj) {\n          throw new Error(`Can't find font for ${fontRefName}`);\n        }\n\n        current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n        if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n          (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n        }\n\n        if (size < 0) {\n          size = -size;\n          current.fontDirection = -1;\n        } else {\n          current.fontDirection = 1;\n        }\n\n        this.current.font = fontObj;\n        this.current.fontSize = size;\n\n        if (fontObj.isType3Font) {\n          return;\n        }\n\n        const name = fontObj.loadedName || \"sans-serif\";\n        let bold = \"normal\";\n\n        if (fontObj.black) {\n          bold = \"900\";\n        } else if (fontObj.bold) {\n          bold = \"bold\";\n        }\n\n        const italic = fontObj.italic ? \"italic\" : \"normal\";\n        const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n        let browserFontSize = size;\n\n        if (size < MIN_FONT_SIZE) {\n          browserFontSize = MIN_FONT_SIZE;\n        } else if (size > MAX_FONT_SIZE) {\n          browserFontSize = MAX_FONT_SIZE;\n        }\n\n        this.current.fontSizeScale = size / browserFontSize;\n        this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n      },\n      setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n        this.current.textRenderingMode = mode;\n      },\n      setTextRise: function CanvasGraphics_setTextRise(rise) {\n        this.current.textRise = rise;\n      },\n      moveText: function CanvasGraphics_moveText(x, y) {\n        this.current.x = this.current.lineX += x;\n        this.current.y = this.current.lineY += y;\n      },\n      setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n        this.setLeading(-y);\n        this.moveText(x, y);\n      },\n      setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n        this.current.textMatrix = [a, b, c, d, e, f];\n        this.current.textMatrixScale = Math.sqrt(a * a + b * b);\n        this.current.x = this.current.lineX = 0;\n        this.current.y = this.current.lineY = 0;\n      },\n      nextLine: function CanvasGraphics_nextLine() {\n        this.moveText(0, this.current.leading);\n      },\n\n      paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n        const ctx = this.ctx;\n        const current = this.current;\n        const font = current.font;\n        const textRenderingMode = current.textRenderingMode;\n        const fontSize = current.fontSize / current.fontSizeScale;\n        const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n        const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n        const patternFill = current.patternFill && !font.missingFile;\n        let addToPath;\n\n        if (font.disableFontFace || isAddToPathSet || patternFill) {\n          addToPath = font.getPathGenerator(this.commonObjs, character);\n        }\n\n        if (font.disableFontFace || patternFill) {\n          ctx.save();\n          ctx.translate(x, y);\n          ctx.beginPath();\n          addToPath(ctx, fontSize);\n\n          if (patternTransform) {\n            ctx.setTransform.apply(ctx, patternTransform);\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            ctx.fill();\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            if (resetLineWidthToOne) {\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            }\n\n            ctx.stroke();\n          }\n\n          ctx.restore();\n        } else {\n          if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            ctx.fillText(character, x, y);\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            if (resetLineWidthToOne) {\n              ctx.save();\n              ctx.moveTo(x, y);\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n              ctx.strokeText(character, 0, 0);\n              ctx.restore();\n            } else {\n              ctx.strokeText(character, x, y);\n            }\n          }\n        }\n\n        if (isAddToPathSet) {\n          const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n          paths.push({\n            transform: ctx.mozCurrentTransform,\n            x,\n            y,\n            fontSize,\n            addToPath\n          });\n        }\n      },\n\n      get isFontSubpixelAAEnabled() {\n        const {\n          context: ctx\n        } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n        ctx.scale(1.5, 1);\n        ctx.fillText(\"I\", 0, 10);\n        const data = ctx.getImageData(0, 0, 10, 10).data;\n        let enabled = false;\n\n        for (let i = 3; i < data.length; i += 4) {\n          if (data[i] > 0 && data[i] < 255) {\n            enabled = true;\n            break;\n          }\n        }\n\n        return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n      },\n\n      showText: function CanvasGraphics_showText(glyphs) {\n        const current = this.current;\n        const font = current.font;\n\n        if (font.isType3Font) {\n          return this.showType3Text(glyphs);\n        }\n\n        const fontSize = current.fontSize;\n\n        if (fontSize === 0) {\n          return undefined;\n        }\n\n        const ctx = this.ctx;\n        const fontSizeScale = current.fontSizeScale;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const fontDirection = current.fontDirection;\n        const textHScale = current.textHScale * fontDirection;\n        const glyphsLength = glyphs.length;\n        const vertical = font.vertical;\n        const spacingDir = vertical ? 1 : -1;\n        const defaultVMetrics = font.defaultVMetrics;\n        const widthAdvanceScale = fontSize * current.fontMatrix[0];\n        const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n        ctx.save();\n        let patternTransform;\n\n        if (current.patternFill) {\n          ctx.save();\n          const pattern = current.fillColor.getPattern(ctx, this);\n          patternTransform = ctx.mozCurrentTransform;\n          ctx.restore();\n          ctx.fillStyle = pattern;\n        }\n\n        ctx.transform.apply(ctx, current.textMatrix);\n        ctx.translate(current.x, current.y + current.textRise);\n\n        if (fontDirection > 0) {\n          ctx.scale(textHScale, -1);\n        } else {\n          ctx.scale(textHScale, 1);\n        }\n\n        let lineWidth = current.lineWidth;\n        let resetLineWidthToOne = false;\n        const scale = current.textMatrixScale;\n\n        if (scale === 0 || lineWidth === 0) {\n          const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            this._cachedGetSinglePixelWidth = null;\n            lineWidth = this.getSinglePixelWidth();\n            resetLineWidthToOne = lineWidth < 0;\n          }\n        } else {\n          lineWidth /= scale;\n        }\n\n        if (fontSizeScale !== 1.0) {\n          ctx.scale(fontSizeScale, fontSizeScale);\n          lineWidth /= fontSizeScale;\n        }\n\n        ctx.lineWidth = lineWidth;\n        let x = 0,\n            i;\n\n        for (i = 0; i < glyphsLength; ++i) {\n          const glyph = glyphs[i];\n\n          if ((0, _util.isNum)(glyph)) {\n            x += spacingDir * glyph * fontSize / 1000;\n            continue;\n          }\n\n          let restoreNeeded = false;\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const character = glyph.fontChar;\n          const accent = glyph.accent;\n          let scaledX, scaledY;\n          let width = glyph.width;\n\n          if (vertical) {\n            const vmetric = glyph.vmetric || defaultVMetrics;\n            const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n            const vy = vmetric[2] * widthAdvanceScale;\n            width = vmetric ? -vmetric[0] : width;\n            scaledX = vx / fontSizeScale;\n            scaledY = (x + vy) / fontSizeScale;\n          } else {\n            scaledX = x / fontSizeScale;\n            scaledY = 0;\n          }\n\n          if (font.remeasure && width > 0) {\n            const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n            if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n              const characterScaleX = width / measuredWidth;\n              restoreNeeded = true;\n              ctx.save();\n              ctx.scale(characterScaleX, 1);\n              scaledX /= characterScaleX;\n            } else if (width !== measuredWidth) {\n              scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n            }\n          }\n\n          if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n            if (simpleFillText && !accent) {\n              ctx.fillText(character, scaledX, scaledY);\n            } else {\n              this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n              if (accent) {\n                const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n              }\n            }\n          }\n\n          let charWidth;\n\n          if (vertical) {\n            charWidth = width * widthAdvanceScale - spacing * fontDirection;\n          } else {\n            charWidth = width * widthAdvanceScale + spacing * fontDirection;\n          }\n\n          x += charWidth;\n\n          if (restoreNeeded) {\n            ctx.restore();\n          }\n        }\n\n        if (vertical) {\n          current.y -= x;\n        } else {\n          current.x += x * textHScale;\n        }\n\n        ctx.restore();\n      },\n      showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n        const ctx = this.ctx;\n        const current = this.current;\n        const font = current.font;\n        const fontSize = current.fontSize;\n        const fontDirection = current.fontDirection;\n        const spacingDir = font.vertical ? 1 : -1;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const textHScale = current.textHScale * fontDirection;\n        const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        const glyphsLength = glyphs.length;\n        const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n        let i, glyph, width, spacingLength;\n\n        if (isTextInvisible || fontSize === 0) {\n          return;\n        }\n\n        this._cachedGetSinglePixelWidth = null;\n        ctx.save();\n        ctx.transform.apply(ctx, current.textMatrix);\n        ctx.translate(current.x, current.y);\n        ctx.scale(textHScale, fontDirection);\n\n        for (i = 0; i < glyphsLength; ++i) {\n          glyph = glyphs[i];\n\n          if ((0, _util.isNum)(glyph)) {\n            spacingLength = spacingDir * glyph * fontSize / 1000;\n            this.ctx.translate(spacingLength, 0);\n            current.x += spacingLength * textHScale;\n            continue;\n          }\n\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n          if (!operatorList) {\n            (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n            continue;\n          }\n\n          if (this.contentVisible) {\n            this.processingType3 = glyph;\n            this.save();\n            ctx.scale(fontSize, fontSize);\n            ctx.transform.apply(ctx, fontMatrix);\n            this.executeOperatorList(operatorList);\n            this.restore();\n          }\n\n          const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n          width = transformed[0] * fontSize + spacing;\n          ctx.translate(width, 0);\n          current.x += width * textHScale;\n        }\n\n        ctx.restore();\n        this.processingType3 = null;\n      },\n      setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},\n      setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n        this.ctx.rect(llx, lly, urx - llx, ury - lly);\n        this.clip();\n        this.endPath();\n      },\n      getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n        let pattern;\n\n        if (IR[0] === \"TilingPattern\") {\n          const color = IR[1];\n          const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n          const canvasGraphicsFactory = {\n            createCanvasGraphics: ctx => {\n              return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext);\n            }\n          };\n          pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n        } else {\n          pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);\n        }\n\n        return pattern;\n      },\n      setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n        this.current.strokeColor = this.getColorN_Pattern(arguments);\n      },\n      setFillColorN: function CanvasGraphics_setFillColorN() {\n        this.current.fillColor = this.getColorN_Pattern(arguments);\n        this.current.patternFill = true;\n      },\n      setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n        const color = _util.Util.makeHexColor(r, g, b);\n\n        this.ctx.strokeStyle = color;\n        this.current.strokeColor = color;\n      },\n      setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n        const color = _util.Util.makeHexColor(r, g, b);\n\n        this.ctx.fillStyle = color;\n        this.current.fillColor = color;\n        this.current.patternFill = false;\n      },\n      shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        this.save();\n        const pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);\n        ctx.fillStyle = pattern.getPattern(ctx, this, true);\n        const inv = ctx.mozCurrentTransformInverse;\n\n        if (inv) {\n          const canvas = ctx.canvas;\n          const width = canvas.width;\n          const height = canvas.height;\n\n          const bl = _util.Util.applyTransform([0, 0], inv);\n\n          const br = _util.Util.applyTransform([0, height], inv);\n\n          const ul = _util.Util.applyTransform([width, 0], inv);\n\n          const ur = _util.Util.applyTransform([width, height], inv);\n\n          const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n          const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n          const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n          const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n          this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n        } else {\n          this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n        }\n\n        this.restore();\n      },\n      beginInlineImage: function CanvasGraphics_beginInlineImage() {\n        (0, _util.unreachable)(\"Should not call beginInlineImage\");\n      },\n      beginImageData: function CanvasGraphics_beginImageData() {\n        (0, _util.unreachable)(\"Should not call beginImageData\");\n      },\n      paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.save();\n        this.baseTransformStack.push(this.baseTransform);\n\n        if (Array.isArray(matrix) && matrix.length === 6) {\n          this.transform.apply(this, matrix);\n        }\n\n        this.baseTransform = this.ctx.mozCurrentTransform;\n\n        if (bbox) {\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          this.ctx.rect(bbox[0], bbox[1], width, height);\n          this.clip();\n          this.endPath();\n        }\n      },\n      paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.restore();\n        this.baseTransform = this.baseTransformStack.pop();\n      },\n      beginGroup: function CanvasGraphics_beginGroup(group) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.save();\n        const currentCtx = this.ctx;\n\n        if (!group.isolated) {\n          (0, _util.info)(\"TODO: Support non-isolated groups.\");\n        }\n\n        if (group.knockout) {\n          (0, _util.warn)(\"Knockout groups not supported.\");\n        }\n\n        const currentTransform = currentCtx.mozCurrentTransform;\n\n        if (group.matrix) {\n          currentCtx.transform.apply(currentCtx, group.matrix);\n        }\n\n        if (!group.bbox) {\n          throw new Error(\"Bounding box is required.\");\n        }\n\n        let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n        const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n        bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n        const offsetX = Math.floor(bounds[0]);\n        const offsetY = Math.floor(bounds[1]);\n        let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n        let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n        let scaleX = 1,\n            scaleY = 1;\n\n        if (drawnWidth > MAX_GROUP_SIZE) {\n          scaleX = drawnWidth / MAX_GROUP_SIZE;\n          drawnWidth = MAX_GROUP_SIZE;\n        }\n\n        if (drawnHeight > MAX_GROUP_SIZE) {\n          scaleY = drawnHeight / MAX_GROUP_SIZE;\n          drawnHeight = MAX_GROUP_SIZE;\n        }\n\n        let cacheId = \"groupAt\" + this.groupLevel;\n\n        if (group.smask) {\n          cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n        }\n\n        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n        const groupCtx = scratchCanvas.context;\n        groupCtx.scale(1 / scaleX, 1 / scaleY);\n        groupCtx.translate(-offsetX, -offsetY);\n        groupCtx.transform.apply(groupCtx, currentTransform);\n\n        if (group.smask) {\n          this.smaskStack.push({\n            canvas: scratchCanvas.canvas,\n            context: groupCtx,\n            offsetX,\n            offsetY,\n            scaleX,\n            scaleY,\n            subtype: group.smask.subtype,\n            backdrop: group.smask.backdrop,\n            transferMap: group.smask.transferMap || null,\n            startTransformInverse: null\n          });\n        } else {\n          currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n          currentCtx.translate(offsetX, offsetY);\n          currentCtx.scale(scaleX, scaleY);\n        }\n\n        copyCtxState(currentCtx, groupCtx);\n        this.ctx = groupCtx;\n        this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n        this.current.activeSMask = null;\n      },\n      endGroup: function CanvasGraphics_endGroup(group) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.groupLevel--;\n        const groupCtx = this.ctx;\n        this.ctx = this.groupStack.pop();\n\n        if (this.ctx.imageSmoothingEnabled !== undefined) {\n          this.ctx.imageSmoothingEnabled = false;\n        } else {\n          this.ctx.mozImageSmoothingEnabled = false;\n        }\n\n        if (group.smask) {\n          this.tempSMask = this.smaskStack.pop();\n        } else {\n          this.ctx.drawImage(groupCtx.canvas, 0, 0);\n        }\n\n        this.restore();\n      },\n      beginAnnotations: function CanvasGraphics_beginAnnotations() {\n        this.save();\n\n        if (this.baseTransform) {\n          this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n        }\n      },\n      endAnnotations: function CanvasGraphics_endAnnotations() {\n        this.restore();\n      },\n      beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {\n        this.save();\n        resetCtxToDefault(this.ctx);\n        this.current = new CanvasExtraState();\n\n        if (Array.isArray(rect) && rect.length === 4) {\n          const width = rect[2] - rect[0];\n          const height = rect[3] - rect[1];\n          this.ctx.rect(rect[0], rect[1], width, height);\n          this.clip();\n          this.endPath();\n        }\n\n        this.transform.apply(this, transform);\n        this.transform.apply(this, matrix);\n      },\n      endAnnotation: function CanvasGraphics_endAnnotation() {\n        this.restore();\n      },\n      paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const width = img.width,\n              height = img.height;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        const glyph = this.processingType3;\n\n        if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n          if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n            glyph.compiled = compileType3Glyph({\n              data: img.data,\n              width,\n              height\n            });\n          } else {\n            glyph.compiled = null;\n          }\n        }\n\n        if (glyph && glyph.compiled) { // lwf\n          glyph.compiled(ctx);\n          return;\n        }\n\n        const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n        putBinaryImageMask(maskCtx, img);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        this.paintInlineImageXObject(maskCanvas.canvas);\n      },\n\n      paintImageMaskXObjectRepeat(imgData, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n        putBinaryImageMask(maskCtx, imgData);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        const ctx = this.ctx;\n\n        for (let i = 0, ii = positions.length; i < ii; i += 2) {\n          ctx.save();\n          ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);\n          ctx.scale(1, -1);\n          ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n          ctx.restore();\n        }\n      },\n\n      paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n\n        for (let i = 0, ii = images.length; i < ii; i++) {\n          const image = images[i];\n          const width = image.width,\n                height = image.height;\n          const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n          const maskCtx = maskCanvas.context;\n          maskCtx.save();\n          putBinaryImageMask(maskCtx, image);\n          maskCtx.globalCompositeOperation = \"source-in\";\n          maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n          maskCtx.fillRect(0, 0, width, height);\n          maskCtx.restore();\n          ctx.save();\n          ctx.transform.apply(ctx, image.transform);\n          ctx.scale(1, -1);\n          ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n          ctx.restore();\n        }\n      },\n      paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(\"Dependent image isn't ready yet\");\n          return;\n        }\n\n        this.paintInlineImageXObject(imgData);\n      },\n      paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(\"Dependent image isn't ready yet\");\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const map = [];\n\n        for (let i = 0, ii = positions.length; i < ii; i += 2) {\n          map.push({\n            transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n            x: 0,\n            y: 0,\n            w: width,\n            h: height\n          });\n        }\n\n        this.paintInlineImageXObjectGroup(imgData, map);\n      },\n      paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const ctx = this.ctx;\n        this.save();\n        ctx.scale(1 / width, -1 / height);\n        const currentTransform = ctx.mozCurrentTransformInverse;\n        const a = currentTransform[0],\n              b = currentTransform[1];\n        let widthScale = Math.max(Math.sqrt(a * a + b * b), 1);\n        const c = currentTransform[2],\n              d = currentTransform[3];\n        let heightScale = Math.max(Math.sqrt(c * c + d * d), 1);\n        let imgToPaint, tmpCanvas, tmpCtx;\n\n        if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n          imgToPaint = imgData;\n        } else {\n          tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n          tmpCtx = tmpCanvas.context;\n          putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n          imgToPaint = tmpCanvas.canvas;\n        }\n\n        let paintWidth = width,\n            paintHeight = height;\n        let tmpCanvasId = \"prescale1\";\n\n        while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n          let newWidth = paintWidth,\n              newHeight = paintHeight;\n\n          if (widthScale > 2 && paintWidth > 1) {\n            newWidth = Math.ceil(paintWidth / 2);\n            widthScale /= paintWidth / newWidth;\n          }\n\n          if (heightScale > 2 && paintHeight > 1) {\n            newHeight = Math.ceil(paintHeight / 2);\n            heightScale /= paintHeight / newHeight;\n          }\n\n          tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n          tmpCtx = tmpCanvas.context;\n          tmpCtx.clearRect(0, 0, newWidth, newHeight);\n          tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n          imgToPaint = tmpCanvas.canvas;\n          paintWidth = newWidth;\n          paintHeight = newHeight;\n          tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n        }\n\n        ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);\n\n        if (this.imageLayer) {\n          const position = this.getCanvasPosition(0, -height);\n          this.imageLayer.appendImage({\n            imgData,\n            left: position[0],\n            top: position[1],\n            width: width / currentTransform[0],\n            height: height / currentTransform[3]\n          });\n        }\n\n        this.restore();\n      },\n      paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const w = imgData.width;\n        const h = imgData.height;\n        const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n        const tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n        for (let i = 0, ii = map.length; i < ii; i++) {\n          const entry = map[i];\n          ctx.save();\n          ctx.transform.apply(ctx, entry.transform);\n          ctx.scale(1, -1);\n          ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n          if (this.imageLayer) {\n            const position = this.getCanvasPosition(entry.x, entry.y);\n            this.imageLayer.appendImage({\n              imgData,\n              left: position[0],\n              top: position[1],\n              width: w,\n              height: h\n            });\n          }\n\n          ctx.restore();\n        }\n      },\n      paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.ctx.fillRect(0, 0, 1, 1);\n      },\n      markPoint: function CanvasGraphics_markPoint(tag) {},\n      markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},\n      beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n        this.markedContentStack.push({\n          visible: true\n        });\n      },\n      beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {\n        if (tag === \"OC\") {\n          this.markedContentStack.push({\n            visible: this.optionalContentConfig.isVisible(properties)\n          });\n        } else {\n          this.markedContentStack.push({\n            visible: true\n          });\n        }\n\n        this.contentVisible = this.isContentVisible();\n      },\n      endMarkedContent: function CanvasGraphics_endMarkedContent() {\n        this.markedContentStack.pop();\n        this.contentVisible = this.isContentVisible();\n      },\n      beginCompat: function CanvasGraphics_beginCompat() {},\n      endCompat: function CanvasGraphics_endCompat() {},\n      consumePath: function CanvasGraphics_consumePath() {\n        const ctx = this.ctx;\n\n        if (this.pendingClip) {\n          if (this.pendingClip === EO_CLIP) {\n            ctx.clip(\"evenodd\");\n          } else {\n            ctx.clip();\n          }\n\n          this.pendingClip = null;\n        }\n\n        ctx.beginPath();\n      },\n\n      getSinglePixelWidth() {\n        if (this._cachedGetSinglePixelWidth === null) {\n          const m = this.ctx.mozCurrentTransform;\n          const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n          const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n          const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n          const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n          if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n            this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n          } else if (absDet > Number.EPSILON) {\n            this._cachedGetSinglePixelWidth = pixelHeight * 1.0000001;\n          } else {\n            this._cachedGetSinglePixelWidth = 1;\n          }\n        }\n\n        return this._cachedGetSinglePixelWidth;\n      },\n\n      getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n        const transform = this.ctx.mozCurrentTransform;\n        return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n      },\n      isContentVisible: function CanvasGraphics_isContentVisible() {\n        for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n          if (!this.markedContentStack[i].visible) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    };\n\n    for (const op in _util.OPS) {\n      CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n    }\n\n    return CanvasGraphics;\n  }();\n\n  exports.CanvasGraphics = CanvasGraphics;\n\n  /***/ }),\n  /* 11 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getShadingPatternFromIR = getShadingPatternFromIR;\n  exports.TilingPattern = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const ShadingIRs = {};\n\n  function applyBoundingBox(ctx, bbox) {\n    if (!bbox || typeof Path2D === \"undefined\") {\n      return;\n    }\n\n    const width = bbox[2] - bbox[0];\n    const height = bbox[3] - bbox[1];\n    const region = new Path2D();\n    region.rect(bbox[0], bbox[1], width, height);\n    ctx.clip(region);\n  }\n\n  ShadingIRs.RadialAxial = {\n    fromIR: function RadialAxial_fromIR(raw) {\n      const type = raw[1];\n      const bbox = raw[2];\n      const colorStops = raw[3];\n      const p0 = raw[4];\n      const p1 = raw[5];\n      const r0 = raw[6];\n      const r1 = raw[7];\n      return {\n        getPattern: function RadialAxial_getPattern(ctx) {\n          applyBoundingBox(ctx, bbox);\n          let grad;\n\n          if (type === \"axial\") {\n            grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n          } else if (type === \"radial\") {\n            grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n          }\n\n          for (let i = 0, ii = colorStops.length; i < ii; ++i) {\n            const c = colorStops[i];\n            grad.addColorStop(c[0], c[1]);\n          }\n\n          return grad;\n        }\n      };\n    }\n  };\n\n  const createMeshCanvas = function createMeshCanvasClosure() {\n    function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n      const coords = context.coords,\n            colors = context.colors;\n      const bytes = data.data,\n            rowSize = data.width * 4;\n      let tmp;\n\n      if (coords[p1 + 1] > coords[p2 + 1]) {\n        tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n        tmp = c1;\n        c1 = c2;\n        c2 = tmp;\n      }\n\n      if (coords[p2 + 1] > coords[p3 + 1]) {\n        tmp = p2;\n        p2 = p3;\n        p3 = tmp;\n        tmp = c2;\n        c2 = c3;\n        c3 = tmp;\n      }\n\n      if (coords[p1 + 1] > coords[p2 + 1]) {\n        tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n        tmp = c1;\n        c1 = c2;\n        c2 = tmp;\n      }\n\n      const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n      const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n      const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n      const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n      const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n      const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n      if (y1 >= y3) {\n        return;\n      }\n\n      const c1r = colors[c1],\n            c1g = colors[c1 + 1],\n            c1b = colors[c1 + 2];\n      const c2r = colors[c2],\n            c2g = colors[c2 + 1],\n            c2b = colors[c2 + 2];\n      const c3r = colors[c3],\n            c3g = colors[c3 + 1],\n            c3b = colors[c3 + 2];\n      const minY = Math.round(y1),\n            maxY = Math.round(y3);\n      let xa, car, cag, cab;\n      let xb, cbr, cbg, cbb;\n\n      for (let y = minY; y <= maxY; y++) {\n        if (y < y2) {\n          let k;\n\n          if (y < y1) {\n            k = 0;\n          } else if (y1 === y2) {\n            k = 1;\n          } else {\n            k = (y1 - y) / (y1 - y2);\n          }\n\n          xa = x1 - (x1 - x2) * k;\n          car = c1r - (c1r - c2r) * k;\n          cag = c1g - (c1g - c2g) * k;\n          cab = c1b - (c1b - c2b) * k;\n        } else {\n          let k;\n\n          if (y > y3) {\n            k = 1;\n          } else if (y2 === y3) {\n            k = 0;\n          } else {\n            k = (y2 - y) / (y2 - y3);\n          }\n\n          xa = x2 - (x2 - x3) * k;\n          car = c2r - (c2r - c3r) * k;\n          cag = c2g - (c2g - c3g) * k;\n          cab = c2b - (c2b - c3b) * k;\n        }\n\n        let k;\n\n        if (y < y1) {\n          k = 0;\n        } else if (y > y3) {\n          k = 1;\n        } else {\n          k = (y1 - y) / (y1 - y3);\n        }\n\n        xb = x1 - (x1 - x3) * k;\n        cbr = c1r - (c1r - c3r) * k;\n        cbg = c1g - (c1g - c3g) * k;\n        cbb = c1b - (c1b - c3b) * k;\n        const x1_ = Math.round(Math.min(xa, xb));\n        const x2_ = Math.round(Math.max(xa, xb));\n        let j = rowSize * y + x1_ * 4;\n\n        for (let x = x1_; x <= x2_; x++) {\n          k = (xa - x) / (xa - xb);\n\n          if (k < 0) {\n            k = 0;\n          } else if (k > 1) {\n            k = 1;\n          }\n\n          bytes[j++] = car - (car - cbr) * k | 0;\n          bytes[j++] = cag - (cag - cbg) * k | 0;\n          bytes[j++] = cab - (cab - cbb) * k | 0;\n          bytes[j++] = 255;\n        }\n      }\n    }\n\n    function drawFigure(data, figure, context) {\n      const ps = figure.coords;\n      const cs = figure.colors;\n      let i, ii;\n\n      switch (figure.type) {\n        case \"lattice\":\n          const verticesPerRow = figure.verticesPerRow;\n          const rows = Math.floor(ps.length / verticesPerRow) - 1;\n          const cols = verticesPerRow - 1;\n\n          for (i = 0; i < rows; i++) {\n            let q = i * verticesPerRow;\n\n            for (let j = 0; j < cols; j++, q++) {\n              drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n              drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n            }\n          }\n\n          break;\n\n        case \"triangles\":\n          for (i = 0, ii = ps.length; i < ii; i += 3) {\n            drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n          }\n\n          break;\n\n        default:\n          throw new Error(\"illegal figure\");\n      }\n    }\n\n    function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {\n      const EXPECTED_SCALE = 1.1;\n      const MAX_PATTERN_SIZE = 3000;\n      const BORDER_SIZE = 2;\n      const offsetX = Math.floor(bounds[0]);\n      const offsetY = Math.floor(bounds[1]);\n      const boundsWidth = Math.ceil(bounds[2]) - offsetX;\n      const boundsHeight = Math.ceil(bounds[3]) - offsetY;\n      const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const scaleX = boundsWidth / width;\n      const scaleY = boundsHeight / height;\n      const context = {\n        coords,\n        colors,\n        offsetX: -offsetX,\n        offsetY: -offsetY,\n        scaleX: 1 / scaleX,\n        scaleY: 1 / scaleY\n      };\n      const paddedWidth = width + BORDER_SIZE * 2;\n      const paddedHeight = height + BORDER_SIZE * 2;\n      let canvas, tmpCanvas, i, ii;\n\n      if (webGLContext.isEnabled) {\n        canvas = webGLContext.drawFigures({\n          width,\n          height,\n          backgroundColor,\n          figures,\n          context\n        });\n        tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n        tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n        canvas = tmpCanvas.canvas;\n      } else {\n        tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n        const tmpCtx = tmpCanvas.context;\n        const data = tmpCtx.createImageData(width, height);\n\n        if (backgroundColor) {\n          const bytes = data.data;\n\n          for (i = 0, ii = bytes.length; i < ii; i += 4) {\n            bytes[i] = backgroundColor[0];\n            bytes[i + 1] = backgroundColor[1];\n            bytes[i + 2] = backgroundColor[2];\n            bytes[i + 3] = 255;\n          }\n        }\n\n        for (i = 0; i < figures.length; i++) {\n          drawFigure(data, figures[i], context);\n        }\n\n        tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n        canvas = tmpCanvas.canvas;\n      }\n\n      return {\n        canvas,\n        offsetX: offsetX - BORDER_SIZE * scaleX,\n        offsetY: offsetY - BORDER_SIZE * scaleY,\n        scaleX,\n        scaleY\n      };\n    }\n\n    return createMeshCanvas;\n  }();\n\n  ShadingIRs.Mesh = {\n    fromIR: function Mesh_fromIR(raw) {\n      const coords = raw[2];\n      const colors = raw[3];\n      const figures = raw[4];\n      const bounds = raw[5];\n      const matrix = raw[6];\n      const bbox = raw[7];\n      const background = raw[8];\n      return {\n        getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n          applyBoundingBox(ctx, bbox);\n          let scale;\n\n          if (shadingFill) {\n            scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n          } else {\n            scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n            if (matrix) {\n              const matrixScale = _util.Util.singularValueDecompose2dScale(matrix);\n\n              scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n            }\n          }\n\n          const temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);\n\n          if (!shadingFill) {\n            ctx.setTransform.apply(ctx, owner.baseTransform);\n\n            if (matrix) {\n              ctx.transform.apply(ctx, matrix);\n            }\n          }\n\n          ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n          ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n          return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n        }\n      };\n    }\n  };\n  ShadingIRs.Dummy = {\n    fromIR: function Dummy_fromIR() {\n      return {\n        getPattern: function Dummy_fromIR_getPattern() {\n          return \"hotpink\";\n        }\n      };\n    }\n  };\n\n  function getShadingPatternFromIR(raw) {\n    const shadingIR = ShadingIRs[raw[0]];\n\n    if (!shadingIR) {\n      throw new Error(`Unknown IR type: ${raw[0]}`);\n    }\n\n    return shadingIR.fromIR(raw);\n  }\n\n  const TilingPattern = function TilingPatternClosure() {\n    const PaintType = {\n      COLORED: 1,\n      UNCOLORED: 2\n    };\n    const MAX_PATTERN_SIZE = 3000;\n\n    function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n      this.operatorList = IR[2];\n      this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n      this.bbox = IR[4];\n      this.xstep = IR[5];\n      this.ystep = IR[6];\n      this.paintType = IR[7];\n      this.tilingType = IR[8];\n      this.color = color;\n      this.canvasGraphicsFactory = canvasGraphicsFactory;\n      this.baseTransform = baseTransform;\n      this.ctx = ctx;\n    }\n\n    TilingPattern.prototype = {\n      createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n        const operatorList = this.operatorList;\n        const bbox = this.bbox;\n        const xstep = this.xstep;\n        const ystep = this.ystep;\n        const paintType = this.paintType;\n        const tilingType = this.tilingType;\n        const color = this.color;\n        const canvasGraphicsFactory = this.canvasGraphicsFactory;\n        (0, _util.info)(\"TilingType: \" + tilingType);\n        const x0 = bbox[0],\n              y0 = bbox[1],\n              x1 = bbox[2],\n              y1 = bbox[3];\n\n        const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n        const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n        const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n        const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n        const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n        const tmpCtx = tmpCanvas.context;\n        const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n        graphics.groupLevel = owner.groupLevel;\n        this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n        graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n        graphics.transform(1, 0, 0, 1, -x0, -y0);\n        this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n        graphics.executeOperatorList(operatorList);\n        this.ctx.transform(1, 0, 0, 1, x0, y0);\n        this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n        return tmpCanvas.canvas;\n      },\n      getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {\n        step = Math.abs(step);\n        const maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n        let size = Math.ceil(step * scale);\n\n        if (size >= maxSize) {\n          size = maxSize;\n        } else {\n          scale = size / step;\n        }\n\n        return {\n          scale,\n          size\n        };\n      },\n      clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n        if (Array.isArray(bbox) && bbox.length === 4) {\n          const bboxWidth = x1 - x0;\n          const bboxHeight = y1 - y0;\n          graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n          graphics.clip();\n          graphics.endPath();\n        }\n      },\n      setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {\n        const context = graphics.ctx,\n              current = graphics.current;\n\n        switch (paintType) {\n          case PaintType.COLORED:\n            const ctx = this.ctx;\n            context.fillStyle = ctx.fillStyle;\n            context.strokeStyle = ctx.strokeStyle;\n            current.fillColor = ctx.fillStyle;\n            current.strokeColor = ctx.strokeStyle;\n            break;\n\n          case PaintType.UNCOLORED:\n            const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n            context.fillStyle = cssColor;\n            context.strokeStyle = cssColor;\n            current.fillColor = cssColor;\n            current.strokeColor = cssColor;\n            break;\n\n          default:\n            throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n        }\n      },\n      getPattern: function TilingPattern_getPattern(ctx, owner) {\n        ctx = this.ctx;\n        ctx.setTransform.apply(ctx, this.baseTransform);\n        ctx.transform.apply(ctx, this.matrix);\n        const temporaryPatternCanvas = this.createPatternCanvas(owner);\n        return ctx.createPattern(temporaryPatternCanvas, \"repeat\");\n      }\n    };\n    return TilingPattern;\n  }();\n\n  exports.TilingPattern = TilingPattern;\n\n  /***/ }),\n  /* 12 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.GlobalWorkerOptions = void 0;\n  const GlobalWorkerOptions = Object.create(null);\n  exports.GlobalWorkerOptions = GlobalWorkerOptions;\n  GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n  GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n\n  /***/ }),\n  /* 13 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.MessageHandler = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const CallbackKind = {\n    UNKNOWN: 0,\n    DATA: 1,\n    ERROR: 2\n  };\n  const StreamKind = {\n    UNKNOWN: 0,\n    CANCEL: 1,\n    CANCEL_COMPLETE: 2,\n    CLOSE: 3,\n    ENQUEUE: 4,\n    ERROR: 5,\n    PULL: 6,\n    PULL_COMPLETE: 7,\n    START_COMPLETE: 8\n  };\n\n  function wrapReason(reason) {\n    if (typeof reason !== \"object\" || reason === null) {\n      return reason;\n    }\n\n    switch (reason.name) {\n      case \"AbortException\":\n        return new _util.AbortException(reason.message);\n\n      case \"MissingPDFException\":\n        return new _util.MissingPDFException(reason.message);\n\n      case \"UnexpectedResponseException\":\n        return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n      case \"UnknownErrorException\":\n        return new _util.UnknownErrorException(reason.message, reason.details);\n\n      default:\n        return new _util.UnknownErrorException(reason.message, reason.toString());\n    }\n  }\n\n  class MessageHandler {\n    constructor(sourceName, targetName, comObj) {\n      this.sourceName = sourceName;\n      this.targetName = targetName;\n      this.comObj = comObj;\n      this.callbackId = 1;\n      this.streamId = 1;\n      this.postMessageTransfers = true;\n      this.streamSinks = Object.create(null);\n      this.streamControllers = Object.create(null);\n      this.callbackCapabilities = Object.create(null);\n      this.actionHandler = Object.create(null);\n\n      this._onComObjOnMessage = event => {\n        const data = event.data;\n\n        if (data.targetName !== this.sourceName) {\n          return;\n        }\n\n        if (data.stream) {\n          this._processStreamMessage(data);\n\n          return;\n        }\n\n        if (data.callback) {\n          const callbackId = data.callbackId;\n          const capability = this.callbackCapabilities[callbackId];\n\n          if (!capability) {\n            throw new Error(`Cannot resolve callback ${callbackId}`);\n          }\n\n          delete this.callbackCapabilities[callbackId];\n\n          if (data.callback === CallbackKind.DATA) {\n            capability.resolve(data.data);\n          } else if (data.callback === CallbackKind.ERROR) {\n            capability.reject(wrapReason(data.reason));\n          } else {\n            throw new Error(\"Unexpected callback case\");\n          }\n\n          return;\n        }\n\n        const action = this.actionHandler[data.action];\n\n        if (!action) {\n          throw new Error(`Unknown action from worker: ${data.action}`);\n        }\n\n        if (data.callbackId) {\n          const cbSourceName = this.sourceName;\n          const cbTargetName = data.sourceName;\n          new Promise(function (resolve) {\n            resolve(action(data.data));\n          }).then(function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason)\n            });\n          });\n          return;\n        }\n\n        if (data.streamId) {\n          this._createStreamSink(data);\n\n          return;\n        }\n\n        action(data.data);\n      };\n\n      comObj.addEventListener(\"message\", this._onComObjOnMessage);\n    }\n\n    on(actionName, handler) {\n      const ah = this.actionHandler;\n\n      if (ah[actionName]) {\n        throw new Error(`There is already an actionName called \"${actionName}\"`);\n      }\n\n      ah[actionName] = handler;\n    }\n\n    send(actionName, data, transfers) {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data\n      }, transfers);\n    }\n\n    sendWithPromise(actionName, data, transfers) {\n      const callbackId = this.callbackId++;\n      const capability = (0, _util.createPromiseCapability)();\n      this.callbackCapabilities[callbackId] = capability;\n\n      try {\n        this._postMessage({\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data\n        }, transfers);\n      } catch (ex) {\n        capability.reject(ex);\n      }\n\n      return capability.promise;\n    }\n\n    sendWithStream(actionName, data, queueingStrategy, transfers) {\n      const streamId = this.streamId++;\n      const sourceName = this.sourceName;\n      const targetName = this.targetName;\n      const comObj = this.comObj;\n      return new ReadableStream({\n        start: controller => {\n          const startCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false\n          };\n\n          this._postMessage({\n            sourceName,\n            targetName,\n            action: actionName,\n            streamId,\n            data,\n            desiredSize: controller.desiredSize\n          }, transfers);\n\n          return startCapability.promise;\n        },\n        pull: controller => {\n          const pullCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize\n          });\n          return pullCapability.promise;\n        },\n        cancel: reason => {\n          (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason)\n          });\n          return cancelCapability.promise;\n        }\n      }, queueingStrategy);\n    }\n\n    _createStreamSink(data) {\n      const self = this;\n      const action = this.actionHandler[data.action];\n      const streamId = data.streamId;\n      const sourceName = this.sourceName;\n      const targetName = data.sourceName;\n      const comObj = this.comObj;\n      const streamSink = {\n        enqueue(chunk, size = 1, transfers) {\n          if (this.isCancelled) {\n            return;\n          }\n\n          const lastDesiredSize = this.desiredSize;\n          this.desiredSize -= size;\n\n          if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n            this.sinkCapability = (0, _util.createPromiseCapability)();\n            this.ready = this.sinkCapability.promise;\n          }\n\n          self._postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk\n          }, transfers);\n        },\n\n        close() {\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CLOSE,\n            streamId\n          });\n          delete self.streamSinks[streamId];\n        },\n\n        error(reason) {\n          (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ERROR,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        },\n\n        sinkCapability: (0, _util.createPromiseCapability)(),\n        onPull: null,\n        onCancel: null,\n        isCancelled: false,\n        desiredSize: data.desiredSize,\n        ready: null\n      };\n      streamSink.sinkCapability.resolve();\n      streamSink.ready = streamSink.sinkCapability.promise;\n      this.streamSinks[streamId] = streamSink;\n      new Promise(function (resolve) {\n        resolve(action(data.data, streamSink));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      });\n    }\n\n    _processStreamMessage(data) {\n      const streamId = data.streamId;\n      const sourceName = this.sourceName;\n      const targetName = data.sourceName;\n      const comObj = this.comObj;\n\n      switch (data.stream) {\n        case StreamKind.START_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].startCall.resolve();\n          } else {\n            this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].pullCall.resolve();\n          } else {\n            this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL:\n          if (!this.streamSinks[streamId]) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n            break;\n          }\n\n          if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n            this.streamSinks[streamId].sinkCapability.resolve();\n          }\n\n          this.streamSinks[streamId].desiredSize = data.desiredSize;\n          const {\n            onPull\n          } = this.streamSinks[data.streamId];\n          new Promise(function (resolve) {\n            resolve(onPull && onPull());\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          break;\n\n        case StreamKind.ENQUEUE:\n          (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].controller.enqueue(data.chunk);\n          break;\n\n        case StreamKind.CLOSE:\n          (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].isClosed = true;\n          this.streamControllers[streamId].controller.close();\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.ERROR:\n          (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n          this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].cancelCall.resolve();\n          } else {\n            this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n          }\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL:\n          if (!this.streamSinks[streamId]) {\n            break;\n          }\n\n          const {\n            onCancel\n          } = this.streamSinks[data.streamId];\n          new Promise(function (resolve) {\n            resolve(onCancel && onCancel(wrapReason(data.reason)));\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n          this.streamSinks[streamId].isCancelled = true;\n          delete this.streamSinks[streamId];\n          break;\n\n        default:\n          throw new Error(\"Unexpected stream case\");\n      }\n    }\n\n    async _deleteStreamController(streamId) {\n      await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n        return capability && capability.promise;\n      }));\n      delete this.streamControllers[streamId];\n    }\n\n    _postMessage(message, transfers) {\n      if (transfers && this.postMessageTransfers) {\n        this.comObj.postMessage(message, transfers);\n      } else {\n        this.comObj.postMessage(message);\n      }\n    }\n\n    destroy() {\n      this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n    }\n\n  }\n\n  exports.MessageHandler = MessageHandler;\n\n  /***/ }),\n  /* 14 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.Metadata = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _xml_parser = __w_pdfjs_require__(15);\n\n  class Metadata {\n    constructor(data) {\n      (0, _util.assert)(typeof data === \"string\", \"Metadata: input is not a string\");\n      data = this._repair(data);\n      const parser = new _xml_parser.SimpleXMLParser({\n        lowerCaseName: true\n      });\n      const xmlDocument = parser.parseFromString(data);\n      this._metadataMap = new Map();\n\n      if (xmlDocument) {\n        this._parse(xmlDocument);\n      }\n\n      this._data = data;\n    }\n\n    _repair(data) {\n      return data.replace(/^[^<]+/, \"\").replace(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {\n        const bytes = codes.replace(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {\n          return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);\n        }).replace(/&(amp|apos|gt|lt|quot);/g, function (str, name) {\n          switch (name) {\n            case \"amp\":\n              return \"&\";\n\n            case \"apos\":\n              return \"'\";\n\n            case \"gt\":\n              return \">\";\n\n            case \"lt\":\n              return \"<\";\n\n            case \"quot\":\n              return '\"';\n          }\n\n          throw new Error(`_repair: ${name} isn't defined.`);\n        });\n        let chars = \"\";\n\n        for (let i = 0, ii = bytes.length; i < ii; i += 2) {\n          const code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);\n\n          if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {\n            chars += String.fromCharCode(code);\n          } else {\n            chars += \"&#x\" + (0x10000 + code).toString(16).substring(1) + \";\";\n          }\n        }\n\n        return \">\" + chars;\n      });\n    }\n\n    _getSequence(entry) {\n      const name = entry.nodeName;\n\n      if (name !== \"rdf:bag\" && name !== \"rdf:seq\" && name !== \"rdf:alt\") {\n        return null;\n      }\n\n      return entry.childNodes.filter(node => node.nodeName === \"rdf:li\");\n    }\n\n    _getCreators(entry) {\n      if (entry.nodeName !== \"dc:creator\") {\n        return false;\n      }\n\n      if (!entry.hasChildNodes()) {\n        return true;\n      }\n\n      const seqNode = entry.childNodes[0];\n      const authors = this._getSequence(seqNode) || [];\n\n      this._metadataMap.set(entry.nodeName, authors.map(node => node.textContent.trim()));\n\n      return true;\n    }\n\n    _parse(xmlDocument) {\n      let rdf = xmlDocument.documentElement;\n\n      if (rdf.nodeName !== \"rdf:rdf\") {\n        rdf = rdf.firstChild;\n\n        while (rdf && rdf.nodeName !== \"rdf:rdf\") {\n          rdf = rdf.nextSibling;\n        }\n      }\n\n      if (!rdf || rdf.nodeName !== \"rdf:rdf\" || !rdf.hasChildNodes()) {\n        return;\n      }\n\n      for (const desc of rdf.childNodes) {\n        if (desc.nodeName !== \"rdf:description\") {\n          continue;\n        }\n\n        for (const entry of desc.childNodes) {\n          const name = entry.nodeName;\n\n          if (name === \"#text\") {\n            continue;\n          }\n\n          if (this._getCreators(entry)) {\n            continue;\n          }\n\n          this._metadataMap.set(name, entry.textContent.trim());\n        }\n      }\n    }\n\n    getRaw() {\n      return this._data;\n    }\n\n    get(name) {\n      return this._metadataMap.get(name) || null; //lwf\n    }\n\n    getAll() {\n      return (0, _util.objectFromEntries)(this._metadataMap);\n    }\n\n    has(name) {\n      return this._metadataMap.has(name);\n    }\n\n  }\n\n  exports.Metadata = Metadata;\n\n  /***/ }),\n  /* 15 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const XMLParserErrorCode = {\n    NoError: 0,\n    EndOfDocument: -1,\n    UnterminatedCdat: -2,\n    UnterminatedXmlDeclaration: -3,\n    UnterminatedDoctypeDeclaration: -4,\n    UnterminatedComment: -5,\n    MalformedElement: -6,\n    OutOfMemory: -7,\n    UnterminatedAttributeValue: -8,\n    UnterminatedElement: -9,\n    ElementNeverBegun: -10\n  };\n\n  function isWhitespace(s, index) {\n    const ch = s[index];\n    return ch === \" \" || ch === \"\\n\" || ch === \"\\r\" || ch === \"\\t\";\n  }\n\n  function isWhitespaceString(s) {\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (!isWhitespace(s, i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  class XMLParserBase {\n    _resolveEntities(s) {\n      return s.replace(/&([^;]+);/g, (all, entity) => {\n        if (entity.substring(0, 2) === \"#x\") {\n          return String.fromCodePoint(parseInt(entity.substring(2), 16));\n        } else if (entity.substring(0, 1) === \"#\") {\n          return String.fromCodePoint(parseInt(entity.substring(1), 10));\n        }\n\n        switch (entity) {\n          case \"lt\":\n            return \"<\";\n\n          case \"gt\":\n            return \">\";\n\n          case \"amp\":\n            return \"&\";\n\n          case \"quot\":\n            return '\"';\n        }\n\n        return this.onResolveEntity(entity);\n      });\n    }\n\n    _parseContent(s, start) {\n      const attributes = [];\n      let pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      const name = s.substring(start, pos);\n      skipWs();\n\n      while (pos < s.length && s[pos] !== \">\" && s[pos] !== \"/\" && s[pos] !== \"?\") {\n        skipWs();\n        let attrName = \"\",\n            attrValue = \"\";\n\n        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \"=\") {\n          attrName += s[pos];\n          ++pos;\n        }\n\n        skipWs();\n\n        if (s[pos] !== \"=\") {\n          return null;\n        }\n\n        ++pos;\n        skipWs();\n        const attrEndChar = s[pos];\n\n        if (attrEndChar !== '\"' && attrEndChar !== \"'\") {\n          return null;\n        }\n\n        const attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n        if (attrEndIndex < 0) {\n          return null;\n        }\n\n        attrValue = s.substring(pos, attrEndIndex);\n        attributes.push({\n          name: attrName,\n          value: this._resolveEntities(attrValue)\n        });\n        pos = attrEndIndex + 1;\n        skipWs();\n      }\n\n      return {\n        name,\n        attributes,\n        parsed: pos - start\n      };\n    }\n\n    _parseProcessingInstruction(s, start) {\n      let pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      const name = s.substring(start, pos);\n      skipWs();\n      const attrStart = pos;\n\n      while (pos < s.length && (s[pos] !== \"?\" || s[pos + 1] !== \">\")) {\n        ++pos;\n      }\n\n      const value = s.substring(attrStart, pos);\n      return {\n        name,\n        value,\n        parsed: pos - start\n      };\n    }\n\n    parseXml(s) {\n      let i = 0;\n\n      while (i < s.length) {\n        const ch = s[i];\n        let j = i;\n\n        if (ch === \"<\") {\n          ++j;\n          const ch2 = s[j];\n          let q;\n\n          switch (ch2) {\n            case \"/\":\n              ++j;\n              q = s.indexOf(\">\", j);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onEndElement(s.substring(j, q));\n              j = q + 1;\n              break;\n\n            case \"?\":\n              ++j;\n\n              const pi = this._parseProcessingInstruction(s, j);\n\n              if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== \"?>\") {\n                this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n                return;\n              }\n\n              this.onPi(pi.name, pi.value);\n              j += pi.parsed + 2;\n              break;\n\n            case \"!\":\n              if (s.substring(j + 1, j + 3) === \"--\") {\n                q = s.indexOf(\"-->\", j + 3);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedComment);\n                  return;\n                }\n\n                this.onComment(s.substring(j + 3, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"[CDATA[\") {\n                q = s.indexOf(\"]]>\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedCdat);\n                  return;\n                }\n\n                this.onCdata(s.substring(j + 8, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"DOCTYPE\") {\n                const q2 = s.indexOf(\"[\", j + 8);\n                let complexDoctype = false;\n                q = s.indexOf(\">\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                  return;\n                }\n\n                if (q2 > 0 && q > q2) {\n                  q = s.indexOf(\"]>\", j + 8);\n\n                  if (q < 0) {\n                    this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                    return;\n                  }\n\n                  complexDoctype = true;\n                }\n\n                const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n                this.onDoctype(doctypeContent);\n                j = q + (complexDoctype ? 2 : 1);\n              } else {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              break;\n\n            default:\n              const content = this._parseContent(s, j);\n\n              if (content === null) {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              let isClosed = false;\n\n              if (s.substring(j + content.parsed, j + content.parsed + 2) === \"/>\") {\n                isClosed = true;\n              } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== \">\") {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onBeginElement(content.name, content.attributes, isClosed);\n              j += content.parsed + (isClosed ? 2 : 1);\n              break;\n          }\n        } else {\n          while (j < s.length && s[j] !== \"<\") {\n            j++;\n          }\n\n          const text = s.substring(i, j);\n          this.onText(this._resolveEntities(text));\n        }\n\n        i = j;\n      }\n    }\n\n    onResolveEntity(name) {\n      return `&${name};`;\n    }\n\n    onPi(name, value) {}\n\n    onComment(text) {}\n\n    onCdata(text) {}\n\n    onDoctype(doctypeContent) {}\n\n    onText(text) {}\n\n    onBeginElement(name, attributes, isEmpty) {}\n\n    onEndElement(name) {}\n\n    onError(code) {}\n\n  }\n\n  class SimpleDOMNode {\n    constructor(nodeName, nodeValue) {\n      this.nodeName = nodeName;\n      this.nodeValue = nodeValue;\n      Object.defineProperty(this, \"parentNode\", {\n        value: null,\n        writable: true\n      });\n    }\n\n    get firstChild() {\n      return this.childNodes && this.childNodes[0];\n    }\n\n    get nextSibling() {\n      const childNodes = this.parentNode.childNodes;\n\n      if (!childNodes) {\n        return undefined;\n      }\n\n      const index = childNodes.indexOf(this);\n\n      if (index === -1) {\n        return undefined;\n      }\n\n      return childNodes[index + 1];\n    }\n\n    get textContent() {\n      if (!this.childNodes) {\n        return this.nodeValue || \"\";\n      }\n\n      return this.childNodes.map(function (child) {\n        return child.textContent;\n      }).join(\"\");\n    }\n\n    hasChildNodes() {\n      return this.childNodes && this.childNodes.length > 0;\n    }\n\n    searchNode(paths, pos) {\n      if (pos >= paths.length) {\n        return this;\n      }\n\n      const component = paths[pos];\n      const stack = [];\n      let node = this;\n\n      while (true) {\n        if (component.name === node.nodeName) {\n          if (component.pos === 0) {\n            const res = node.searchNode(paths, pos + 1);\n\n            if (res !== null) {\n              return res;\n            }\n          } else if (stack.length === 0) {\n            return null;\n          } else {\n            const [parent] = stack.pop();\n            let siblingPos = 0;\n\n            for (const child of parent.childNodes) {\n              if (component.name === child.nodeName) {\n                if (siblingPos === component.pos) {\n                  return child.searchNode(paths, pos + 1);\n                }\n\n                siblingPos++;\n              }\n            }\n\n            return node.searchNode(paths, pos + 1);\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length !== 0) {\n          stack.push([node, 0]);\n          node = node.childNodes[0];\n        } else if (stack.length === 0) {\n          return null;\n        } else {\n          while (stack.length !== 0) {\n            const [parent, currentPos] = stack.pop();\n            const newPos = currentPos + 1;\n\n            if (newPos < parent.childNodes.length) {\n              stack.push([parent, newPos]);\n              node = parent.childNodes[newPos];\n              break;\n            }\n          }\n\n          if (stack.length === 0) {\n            return null;\n          }\n        }\n      }\n    }\n\n    dump(buffer) {\n      if (this.nodeName === \"#text\") {\n        buffer.push((0, _util.encodeToXmlString)(this.nodeValue));\n        return;\n      }\n\n      buffer.push(`<${this.nodeName}`);\n\n      if (this.attributes) {\n        for (const attribute of this.attributes) {\n          buffer.push(` ${attribute.name}=\"${(0, _util.encodeToXmlString)(attribute.value)}\"`);\n        }\n      }\n\n      if (this.hasChildNodes()) {\n        buffer.push(\">\");\n\n        for (const child of this.childNodes) {\n          child.dump(buffer);\n        }\n\n        buffer.push(`</${this.nodeName}>`);\n      } else if (this.nodeValue) {\n        buffer.push(`>${(0, _util.encodeToXmlString)(this.nodeValue)}</${this.nodeName}>`);\n      } else {\n        buffer.push(\"/>\");\n      }\n    }\n\n  }\n\n  exports.SimpleDOMNode = SimpleDOMNode;\n\n  class SimpleXMLParser extends XMLParserBase {\n    constructor({\n      hasAttributes = false,\n      lowerCaseName = false\n    }) {\n      super();\n      this._currentFragment = null;\n      this._stack = null;\n      this._errorCode = XMLParserErrorCode.NoError;\n      this._hasAttributes = hasAttributes;\n      this._lowerCaseName = lowerCaseName;\n    }\n\n    parseFromString(data) {\n      this._currentFragment = [];\n      this._stack = [];\n      this._errorCode = XMLParserErrorCode.NoError;\n      this.parseXml(data);\n\n      if (this._errorCode !== XMLParserErrorCode.NoError) {\n        return undefined;\n      }\n\n      const [documentElement] = this._currentFragment;\n\n      if (!documentElement) {\n        return undefined;\n      }\n\n      return {\n        documentElement\n      };\n    }\n\n    onResolveEntity(name) {\n      switch (name) {\n        case \"apos\":\n          return \"'\";\n      }\n\n      return super.onResolveEntity(name);\n    }\n\n    onText(text) {\n      if (isWhitespaceString(text)) {\n        return;\n      }\n\n      const node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n\n    onCdata(text) {\n      const node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n\n    onBeginElement(name, attributes, isEmpty) {\n      if (this._lowerCaseName) {\n        name = name.toLowerCase();\n      }\n\n      const node = new SimpleDOMNode(name);\n      node.childNodes = [];\n\n      if (this._hasAttributes) {\n        node.attributes = attributes;\n      }\n\n      this._currentFragment.push(node);\n\n      if (isEmpty) {\n        return;\n      }\n\n      this._stack.push(this._currentFragment);\n\n      this._currentFragment = node.childNodes;\n    }\n\n    onEndElement(name) {\n      this._currentFragment = this._stack.pop() || [];\n      const lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n      if (!lastElement) {\n        return;\n      }\n\n      for (let i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n        lastElement.childNodes[i].parentNode = lastElement;\n      }\n    }\n\n    onError(code) {\n      this._errorCode = code;\n    }\n\n  }\n\n  exports.SimpleXMLParser = SimpleXMLParser;\n\n  /***/ }),\n  /* 16 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.OptionalContentConfig = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class OptionalContentGroup {\n    constructor(name, intent) {\n      this.visible = true;\n      this.name = name;\n      this.intent = intent;\n    }\n\n  }\n\n  class OptionalContentConfig {\n    constructor(data) {\n      this.name = null;\n      this.creator = null;\n      this._order = null;\n      this._groups = new Map();\n\n      if (data === null) {\n        return;\n      }\n\n      this.name = data.name;\n      this.creator = data.creator;\n      this._order = data.order;\n\n      for (const group of data.groups) {\n        this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n      }\n\n      if (data.baseState === \"OFF\") {\n        for (const group of this._groups) {\n          group.visible = false;\n        }\n      }\n\n      for (const on of data.on) {\n        this._groups.get(on).visible = true;\n      }\n\n      for (const off of data.off) {\n        this._groups.get(off).visible = false;\n      }\n    }\n\n    isVisible(group) {\n      if (group.type === \"OCG\") {\n        if (!this._groups.has(group.id)) {\n          (0, _util.warn)(`Optional content group not found: ${group.id}`);\n          return true;\n        }\n\n        return this._groups.get(group.id).visible;\n      } else if (group.type === \"OCMD\") {\n        if (group.expression) {\n          (0, _util.warn)(\"Visibility expression not supported yet.\");\n        }\n\n        if (!group.policy || group.policy === \"AnyOn\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (this._groups.get(id).visible) {\n              return true;\n            }\n          }\n\n          return false;\n        } else if (group.policy === \"AllOn\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (!this._groups.get(id).visible) {\n              return false;\n            }\n          }\n\n          return true;\n        } else if (group.policy === \"AnyOff\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (!this._groups.get(id).visible) {\n              return true;\n            }\n          }\n\n          return false;\n        } else if (group.policy === \"AllOff\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (this._groups.get(id).visible) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n        return true;\n      }\n\n      (0, _util.warn)(`Unknown group type ${group.type}.`);\n      return true;\n    }\n\n    setVisibility(id, visible = true) {\n      if (!this._groups.has(id)) {\n        (0, _util.warn)(`Optional content group not found: ${id}`);\n        return;\n      }\n\n      this._groups.get(id).visible = !!visible;\n    }\n\n    getOrder() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      if (this._order) {\n        return this._order.slice();\n      }\n\n      return Array.from(this._groups.keys());\n    }\n\n    getGroups() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._groups);\n    }\n\n    getGroup(id) {\n      return this._groups.get(id) || null;\n    }\n\n  }\n\n  exports.OptionalContentConfig = OptionalContentConfig;\n\n  /***/ }),\n  /* 17 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFDataTransportStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class PDFDataTransportStream {\n    constructor(params, pdfDataRangeTransport) {\n      (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n      this._queuedChunks = [];\n      this._progressiveDone = params.progressiveDone || false;\n      const initialData = params.initialData;\n\n      if (initialData && initialData.length > 0) { // lwf\n        const buffer = new Uint8Array(initialData).buffer;\n\n        this._queuedChunks.push(buffer);\n      }\n\n      this._pdfDataRangeTransport = pdfDataRangeTransport;\n      this._isStreamingSupported = !params.disableStream;\n      this._isRangeSupported = !params.disableRange;\n      this._contentLength = params.length;\n      this._fullRequestReader = null;\n      this._rangeReaders = [];\n\n      this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n        this._onReceiveData({\n          begin,\n          chunk\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n        this._onProgress({\n          loaded,\n          total\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n        this._onReceiveData({\n          chunk\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n        this._onProgressiveDone();\n      });\n\n      this._pdfDataRangeTransport.transportReady();\n    }\n\n    _onReceiveData(args) {\n      const buffer = new Uint8Array(args.chunk).buffer;\n\n      if (args.begin === undefined) {\n        if (this._fullRequestReader) {\n          this._fullRequestReader._enqueue(buffer);\n        } else {\n          this._queuedChunks.push(buffer);\n        }\n      } else {\n        const found = this._rangeReaders.some(function (rangeReader) {\n          if (rangeReader._begin !== args.begin) {\n            return false;\n          }\n\n          rangeReader._enqueue(buffer);\n\n          return true;\n        });\n\n        (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n      }\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    _onProgress(evt) {\n      if (evt.total === undefined) {\n        const firstReader = this._rangeReaders[0];\n\n        if (firstReader && firstReader.onProgress) { // lwf\n          firstReader.onProgress({\n            loaded: evt.loaded\n          });\n        }\n      } else {\n        const fullReader = this._fullRequestReader;\n\n        if (fullReader && fullReader.onProgress) { // lwf\n          fullReader.onProgress({\n            loaded: evt.loaded,\n            total: evt.total\n          });\n        }\n      }\n    }\n\n    _onProgressiveDone() {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.progressiveDone();\n      }\n\n      this._progressiveDone = true;\n    }\n\n    _removeRangeReader(reader) {\n      const i = this._rangeReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeReaders.splice(i, 1);\n      }\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n      const queuedChunks = this._queuedChunks;\n      this._queuedChunks = null;\n      return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone);\n    }\n\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n      this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n      this._rangeReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeReaders.slice(0);\n\n      readers.forEach(function (rangeReader) {\n        rangeReader.cancel(reason);\n      });\n\n      this._pdfDataRangeTransport.abort();\n    }\n\n  }\n\n  exports.PDFDataTransportStream = PDFDataTransportStream;\n\n  class PDFDataTransportStreamReader {\n    constructor(stream, queuedChunks, progressiveDone = false) {\n      this._stream = stream;\n      this._done = progressiveDone || false;\n      this._filename = null;\n      this._queuedChunks = queuedChunks || [];\n      this._loaded = 0;\n\n      for (const chunk of this._queuedChunks) {\n        this._loaded += chunk.byteLength;\n      }\n\n      this._requests = [];\n      this._headersReady = Promise.resolve();\n      stream._fullRequestReader = this;\n      this.onProgress = null;\n    }\n\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunks.push(chunk);\n      }\n\n      this._loaded += chunk.byteLength;\n    }\n\n    get headersReady() {\n      return this._headersReady;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get isRangeSupported() {\n      return this._stream._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._stream._isStreamingSupported;\n    }\n\n    get contentLength() {\n      return this._stream._contentLength;\n    }\n\n    async read() {\n      if (this._queuedChunks.length > 0) {\n        const chunk = this._queuedChunks.shift();\n\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n\n    progressiveDone() {\n      if (this._done) {\n        return;\n      }\n\n      this._done = true;\n    }\n\n  }\n\n  class PDFDataTransportStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._begin = begin;\n      this._end = end;\n      this._queuedChunk = null;\n      this._requests = [];\n      this._done = false;\n      this.onProgress = null;\n    }\n\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length === 0) {\n        this._queuedChunk = chunk;\n      } else {\n        const requestsCapability = this._requests.shift();\n\n        requestsCapability.resolve({\n          value: chunk,\n          done: false\n        });\n\n        this._requests.forEach(function (requestCapability) {\n          requestCapability.resolve({\n            value: undefined,\n            done: true\n          });\n        });\n\n        this._requests = [];\n      }\n\n      this._done = true;\n\n      this._stream._removeRangeReader(this);\n    }\n\n    get isStreamingSupported() {\n      return false;\n    }\n\n    async read() {\n      if (this._queuedChunk) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._stream._removeRangeReader(this);\n    }\n\n  }\n\n  /***/ }),\n  /* 18 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.WebGLContext = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class WebGLContext {\n    constructor({\n      enable = false\n    }) {\n      this._enabled = enable === true;\n    }\n\n    get isEnabled() {\n      let enabled = this._enabled;\n\n      if (enabled) {\n        enabled = WebGLUtils.tryInitGL();\n      }\n\n      return (0, _util.shadow)(this, \"isEnabled\", enabled);\n    }\n\n    composeSMask({\n      layer,\n      mask,\n      properties\n    }) {\n      return WebGLUtils.composeSMask(layer, mask, properties);\n    }\n\n    drawFigures({\n      width,\n      height,\n      backgroundColor,\n      figures,\n      context\n    }) {\n      return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);\n    }\n\n    clear() {\n      WebGLUtils.cleanup();\n    }\n\n  }\n\n  exports.WebGLContext = WebGLContext;\n\n  const WebGLUtils = function WebGLUtilsClosure() {\n    function loadShader(gl, code, shaderType) {\n      const shader = gl.createShader(shaderType);\n      gl.shaderSource(shader, code);\n      gl.compileShader(shader);\n      const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n      if (!compiled) {\n        const errorMsg = gl.getShaderInfoLog(shader);\n        throw new Error(\"Error during shader compilation: \" + errorMsg);\n      }\n\n      return shader;\n    }\n\n    function createVertexShader(gl, code) {\n      return loadShader(gl, code, gl.VERTEX_SHADER);\n    }\n\n    function createFragmentShader(gl, code) {\n      return loadShader(gl, code, gl.FRAGMENT_SHADER);\n    }\n\n    function createProgram(gl, shaders) {\n      const program = gl.createProgram();\n\n      for (let i = 0, ii = shaders.length; i < ii; ++i) {\n        gl.attachShader(program, shaders[i]);\n      }\n\n      gl.linkProgram(program);\n      const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n      if (!linked) {\n        const errorMsg = gl.getProgramInfoLog(program);\n        throw new Error(\"Error during program linking: \" + errorMsg);\n      }\n\n      return program;\n    }\n\n    function createTexture(gl, image, textureId) {\n      gl.activeTexture(textureId);\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      return texture;\n    }\n\n    let currentGL, currentCanvas;\n\n    function generateGL() {\n      if (currentGL) {\n        return;\n      }\n\n      currentCanvas = document.createElement(\"canvas\");\n      currentGL = currentCanvas.getContext(\"webgl\", {\n        premultipliedalpha: false\n      });\n    }\n\n    const smaskVertexShaderCode = \"\\\n    attribute vec2 a_position;                                    \\\n    attribute vec2 a_texCoord;                                    \\\n                                                                  \\\n    uniform vec2 u_resolution;                                    \\\n                                                                  \\\n    varying vec2 v_texCoord;                                      \\\n                                                                  \\\n    void main() {                                                 \\\n      vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                  \\\n      v_texCoord = a_texCoord;                                    \\\n    }                                                             \";\n    const smaskFragmentShaderCode = \"\\\n    precision mediump float;                                      \\\n                                                                  \\\n    uniform vec4 u_backdrop;                                      \\\n    uniform int u_subtype;                                        \\\n    uniform sampler2D u_image;                                    \\\n    uniform sampler2D u_mask;                                     \\\n                                                                  \\\n    varying vec2 v_texCoord;                                      \\\n                                                                  \\\n    void main() {                                                 \\\n      vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n      vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n      if (u_backdrop.a > 0.0) {                                   \\\n        maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                        u_backdrop.rgb * (1.0 - maskColor.a);     \\\n      }                                                           \\\n      float lum;                                                  \\\n      if (u_subtype == 0) {                                       \\\n        lum = maskColor.a;                                        \\\n      } else {                                                    \\\n        lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n              maskColor.b * 0.11;                                 \\\n      }                                                           \\\n      imageColor.a *= lum;                                        \\\n      imageColor.rgb *= imageColor.a;                             \\\n      gl_FragColor = imageColor;                                  \\\n    }                                                             \";\n    let smaskCache = null;\n\n    function initSmaskGL() {\n      generateGL();\n      const canvas = currentCanvas;\n      currentCanvas = null;\n      const gl = currentGL;\n      currentGL = null;\n      const vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n      const fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n      const program = createProgram(gl, [vertexShader, fragmentShader]);\n      gl.useProgram(program);\n      const cache = {};\n      cache.gl = gl;\n      cache.canvas = canvas;\n      cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n      cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n      cache.backdropLocation = gl.getUniformLocation(program, \"u_backdrop\");\n      cache.subtypeLocation = gl.getUniformLocation(program, \"u_subtype\");\n      const texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n      const texLayerLocation = gl.getUniformLocation(program, \"u_image\");\n      const texMaskLocation = gl.getUniformLocation(program, \"u_mask\");\n      const texCoordBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(texCoordLocation);\n      gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n      gl.uniform1i(texLayerLocation, 0);\n      gl.uniform1i(texMaskLocation, 1);\n      smaskCache = cache;\n    }\n\n    function composeSMask(layer, mask, properties) {\n      const width = layer.width,\n            height = layer.height;\n\n      if (!smaskCache) {\n        initSmaskGL();\n      }\n\n      const cache = smaskCache,\n            canvas = cache.canvas,\n            gl = cache.gl;\n      canvas.width = width;\n      canvas.height = height;\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n      gl.uniform2f(cache.resolutionLocation, width, height);\n\n      if (properties.backdrop) {\n        gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);\n      } else {\n        gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n      }\n\n      gl.uniform1i(cache.subtypeLocation, properties.subtype === \"Luminosity\" ? 1 : 0);\n      const texture = createTexture(gl, layer, gl.TEXTURE0);\n      const maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.positionLocation);\n      gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n      gl.clearColor(0, 0, 0, 0);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.flush();\n      gl.deleteTexture(texture);\n      gl.deleteTexture(maskTexture);\n      gl.deleteBuffer(buffer);\n      return canvas;\n    }\n\n    const figuresVertexShaderCode = \"\\\n    attribute vec2 a_position;                                    \\\n    attribute vec3 a_color;                                       \\\n                                                                  \\\n    uniform vec2 u_resolution;                                    \\\n    uniform vec2 u_scale;                                         \\\n    uniform vec2 u_offset;                                        \\\n                                                                  \\\n    varying vec4 v_color;                                         \\\n                                                                  \\\n    void main() {                                                 \\\n      vec2 position = (a_position + u_offset) * u_scale;          \\\n      vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                  \\\n      v_color = vec4(a_color / 255.0, 1.0);                       \\\n    }                                                             \";\n    const figuresFragmentShaderCode = \"\\\n    precision mediump float;                                      \\\n                                                                  \\\n    varying vec4 v_color;                                         \\\n                                                                  \\\n    void main() {                                                 \\\n      gl_FragColor = v_color;                                     \\\n    }                                                             \";\n    let figuresCache = null;\n\n    function initFiguresGL() {\n      generateGL();\n      const canvas = currentCanvas;\n      currentCanvas = null;\n      const gl = currentGL;\n      currentGL = null;\n      const vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n      const fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n      const program = createProgram(gl, [vertexShader, fragmentShader]);\n      gl.useProgram(program);\n      const cache = {};\n      cache.gl = gl;\n      cache.canvas = canvas;\n      cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n      cache.scaleLocation = gl.getUniformLocation(program, \"u_scale\");\n      cache.offsetLocation = gl.getUniformLocation(program, \"u_offset\");\n      cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n      cache.colorLocation = gl.getAttribLocation(program, \"a_color\");\n      figuresCache = cache;\n    }\n\n    function drawFigures(width, height, backgroundColor, figures, context) {\n      if (!figuresCache) {\n        initFiguresGL();\n      }\n\n      const cache = figuresCache,\n            canvas = cache.canvas,\n            gl = cache.gl;\n      canvas.width = width;\n      canvas.height = height;\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n      gl.uniform2f(cache.resolutionLocation, width, height);\n      let count = 0;\n\n      for (let i = 0, ii = figures.length; i < ii; i++) {\n        switch (figures[i].type) {\n          case \"lattice\":\n            const rows = figures[i].coords.length / figures[i].verticesPerRow | 0;\n            count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n            break;\n\n          case \"triangles\":\n            count += figures[i].coords.length;\n            break;\n        }\n      }\n\n      const coords = new Float32Array(count * 2);\n      const colors = new Uint8Array(count * 3);\n      const coordsMap = context.coords,\n            colorsMap = context.colors;\n      let pIndex = 0,\n          cIndex = 0;\n\n      for (let i = 0, ii = figures.length; i < ii; i++) {\n        const figure = figures[i],\n              ps = figure.coords,\n              cs = figure.colors;\n\n        switch (figure.type) {\n          case \"lattice\":\n            const cols = figure.verticesPerRow;\n            const rows = ps.length / cols | 0;\n\n            for (let row = 1; row < rows; row++) {\n              let offset = row * cols + 1;\n\n              for (let col = 1; col < cols; col++, offset++) {\n                coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n                coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n                coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n                coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n                coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n                coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n                colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n                colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n                colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n                colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n                colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n                colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n                colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n                colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n                colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n                coords[pIndex + 6] = coords[pIndex + 2];\n                coords[pIndex + 7] = coords[pIndex + 3];\n                coords[pIndex + 8] = coords[pIndex + 4];\n                coords[pIndex + 9] = coords[pIndex + 5];\n                coords[pIndex + 10] = coordsMap[ps[offset]];\n                coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n                colors[cIndex + 9] = colors[cIndex + 3];\n                colors[cIndex + 10] = colors[cIndex + 4];\n                colors[cIndex + 11] = colors[cIndex + 5];\n                colors[cIndex + 12] = colors[cIndex + 6];\n                colors[cIndex + 13] = colors[cIndex + 7];\n                colors[cIndex + 14] = colors[cIndex + 8];\n                colors[cIndex + 15] = colorsMap[cs[offset]];\n                colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n                colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n                pIndex += 12;\n                cIndex += 18;\n              }\n            }\n\n            break;\n\n          case \"triangles\":\n            for (let j = 0, jj = ps.length; j < jj; j++) {\n              coords[pIndex] = coordsMap[ps[j]];\n              coords[pIndex + 1] = coordsMap[ps[j] + 1];\n              colors[cIndex] = colorsMap[cs[j]];\n              colors[cIndex + 1] = colorsMap[cs[j] + 1];\n              colors[cIndex + 2] = colorsMap[cs[j] + 2];\n              pIndex += 2;\n              cIndex += 3;\n            }\n\n            break;\n        }\n      }\n\n      if (backgroundColor) {\n        gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);\n      } else {\n        gl.clearColor(0, 0, 0, 0);\n      }\n\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      const coordsBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.positionLocation);\n      gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n      const colorsBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.colorLocation);\n      gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);\n      gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n      gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n      gl.drawArrays(gl.TRIANGLES, 0, count);\n      gl.flush();\n      gl.deleteBuffer(coordsBuffer);\n      gl.deleteBuffer(colorsBuffer);\n      return canvas;\n    }\n\n    return {\n      tryInitGL() {\n        try {\n          generateGL();\n          return !!currentGL;\n        } catch (ex) {}\n\n        return false;\n      },\n\n      composeSMask,\n      drawFigures,\n\n      cleanup() {\n        if (smaskCache && smaskCache.canvas) { // lwf\n          smaskCache.canvas.width = 0;\n          smaskCache.canvas.height = 0;\n        }\n\n        if (figuresCache && figuresCache.canvas) { // lwf\n          figuresCache.canvas.width = 0;\n          figuresCache.canvas.height = 0;\n        }\n\n        smaskCache = null;\n        figuresCache = null;\n      }\n\n    };\n  }();\n\n  /***/ }),\n  /* 19 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.AnnotationLayer = void 0;\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _annotation_storage = __w_pdfjs_require__(8);\n\n  var _scripting_utils = __w_pdfjs_require__(20);\n\n  class AnnotationElementFactory {\n    static create(parameters) {\n      const subtype = parameters.data.annotationType;\n\n      switch (subtype) {\n        case _util.AnnotationType.LINK:\n          return new LinkAnnotationElement(parameters);\n\n        case _util.AnnotationType.TEXT:\n          return new TextAnnotationElement(parameters);\n\n        case _util.AnnotationType.WIDGET:\n          const fieldType = parameters.data.fieldType;\n\n          switch (fieldType) {\n            case \"Tx\":\n              return new TextWidgetAnnotationElement(parameters);\n\n            case \"Btn\":\n              if (parameters.data.radioButton) {\n                return new RadioButtonWidgetAnnotationElement(parameters);\n              } else if (parameters.data.checkBox) {\n                return new CheckboxWidgetAnnotationElement(parameters);\n              }\n\n              return new PushButtonWidgetAnnotationElement(parameters);\n\n            case \"Ch\":\n              return new ChoiceWidgetAnnotationElement(parameters);\n          }\n\n          return new WidgetAnnotationElement(parameters);\n\n        case _util.AnnotationType.POPUP:\n          return new PopupAnnotationElement(parameters);\n\n        case _util.AnnotationType.FREETEXT:\n          return new FreeTextAnnotationElement(parameters);\n\n        case _util.AnnotationType.LINE:\n          return new LineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUARE:\n          return new SquareAnnotationElement(parameters);\n\n        case _util.AnnotationType.CIRCLE:\n          return new CircleAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYLINE:\n          return new PolylineAnnotationElement(parameters);\n\n        case _util.AnnotationType.CARET:\n          return new CaretAnnotationElement(parameters);\n\n        case _util.AnnotationType.INK:\n          return new InkAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYGON:\n          return new PolygonAnnotationElement(parameters);\n\n        case _util.AnnotationType.HIGHLIGHT:\n          return new HighlightAnnotationElement(parameters);\n\n        case _util.AnnotationType.UNDERLINE:\n          return new UnderlineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUIGGLY:\n          return new SquigglyAnnotationElement(parameters);\n\n        case _util.AnnotationType.STRIKEOUT:\n          return new StrikeOutAnnotationElement(parameters);\n\n        case _util.AnnotationType.STAMP:\n          return new StampAnnotationElement(parameters);\n\n        case _util.AnnotationType.FILEATTACHMENT:\n          return new FileAttachmentAnnotationElement(parameters);\n\n        default:\n          return new AnnotationElement(parameters);\n      }\n    }\n\n  }\n\n  class AnnotationElement {\n    constructor(parameters, {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false\n    } = {}) {\n      this.isRenderable = isRenderable;\n      this.data = parameters.data;\n      this.layer = parameters.layer;\n      this.page = parameters.page;\n      this.viewport = parameters.viewport;\n      this.linkService = parameters.linkService;\n      this.downloadManager = parameters.downloadManager;\n      this.imageResourcesPath = parameters.imageResourcesPath;\n      this.renderInteractiveForms = parameters.renderInteractiveForms;\n      this.svgFactory = parameters.svgFactory;\n      this.annotationStorage = parameters.annotationStorage;\n      this.enableScripting = parameters.enableScripting;\n      this.hasJSActions = parameters.hasJSActions;\n      this._mouseState = parameters.mouseState;\n\n      if (isRenderable) {\n        this.container = this._createContainer(ignoreBorder);\n      }\n\n      if (createQuadrilaterals) {\n        this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n      }\n    }\n\n    _createContainer(ignoreBorder = false) {\n      const data = this.data,\n            page = this.page,\n            viewport = this.viewport;\n      const container = document.createElement(\"section\");\n      let width = data.rect[2] - data.rect[0];\n      let height = data.rect[3] - data.rect[1];\n      container.setAttribute(\"data-annotation-id\", data.id);\n\n      const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n      container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n      container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n      if (!ignoreBorder && data.borderStyle.width > 0) {\n        container.style.borderWidth = `${data.borderStyle.width}px`;\n\n        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n          width = width - 2 * data.borderStyle.width;\n          height = height - 2 * data.borderStyle.width;\n        }\n\n        const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n        const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n        if (horizontalRadius > 0 || verticalRadius > 0) {\n          const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n          container.style.borderRadius = radius;\n        }\n\n        switch (data.borderStyle.style) {\n          case _util.AnnotationBorderStyleType.SOLID:\n            container.style.borderStyle = \"solid\";\n            break;\n\n          case _util.AnnotationBorderStyleType.DASHED:\n            container.style.borderStyle = \"dashed\";\n            break;\n\n          case _util.AnnotationBorderStyleType.BEVELED:\n            (0, _util.warn)(\"Unimplemented border style: beveled\");\n            break;\n\n          case _util.AnnotationBorderStyleType.INSET:\n            (0, _util.warn)(\"Unimplemented border style: inset\");\n            break;\n\n          case _util.AnnotationBorderStyleType.UNDERLINE:\n            container.style.borderBottomStyle = \"solid\";\n            break;\n\n          default:\n            break;\n        }\n\n        if (data.color) {\n          container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n        } else {\n          container.style.borderWidth = 0;\n        }\n      }\n\n      container.style.left = `${rect[0]}px`;\n      container.style.top = `${rect[1]}px`;\n      container.style.width = `${width}px`;\n      container.style.height = `${height}px`;\n      return container;\n    }\n\n    _createQuadrilaterals(ignoreBorder = false) {\n      if (!this.data.quadPoints) {\n        return null;\n      }\n\n      const quadrilaterals = [];\n      const savedRect = this.data.rect;\n\n      for (const quadPoint of this.data.quadPoints) {\n        this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n        quadrilaterals.push(this._createContainer(ignoreBorder));\n      }\n\n      this.data.rect = savedRect;\n      return quadrilaterals;\n    }\n\n    _createPopup(trigger, data) {\n      let container = this.container;\n\n      if (this.quadrilaterals) {\n        trigger = trigger || this.quadrilaterals;\n        container = this.quadrilaterals[0];\n      }\n\n      if (!trigger) {\n        trigger = document.createElement(\"div\");\n        trigger.style.height = container.style.height;\n        trigger.style.width = container.style.width;\n        container.appendChild(trigger);\n      }\n\n      const popupElement = new PopupElement({\n        container,\n        trigger,\n        color: data.color,\n        title: data.title,\n        modificationDate: data.modificationDate,\n        contents: data.contents,\n        hideWrapper: true\n      });\n      const popup = popupElement.render();\n      popup.style.left = container.style.width;\n      container.appendChild(popup);\n    }\n\n    _renderQuadrilaterals(className) {\n      this.quadrilaterals.forEach(quadrilateral => {\n        quadrilateral.className = className;\n      });\n      return this.quadrilaterals;\n    }\n\n    render() {\n      (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n    }\n\n  }\n\n  class LinkAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n      super(parameters, {\n        isRenderable,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      const {\n        data,\n        linkService\n      } = this;\n      const link = document.createElement(\"a\");\n\n      if (data.url) {\n        (0, _display_utils.addLinkAttributes)(link, {\n          url: data.url,\n          target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n          rel: linkService.externalLinkRel,\n          enabled: linkService.externalLinkEnabled\n        });\n      } else if (data.action) {\n        this._bindNamedAction(link, data.action);\n      } else if (data.dest) {\n        this._bindLink(link, data.dest);\n      } else if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n        this._bindJSAction(link, data);\n      } else {\n        this._bindLink(link, \"\");\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        });\n      }\n\n      this.container.className = \"linkAnnotation\";\n      this.container.appendChild(link);\n      return this.container;\n    }\n\n    _bindLink(link, destination) {\n      link.href = this.linkService.getDestinationHash(destination);\n\n      link.onclick = () => {\n        if (destination) {\n          this.linkService.goToDestination(destination);\n        }\n\n        return false;\n      };\n\n      if (destination || destination === \"\") {\n        link.className = \"internalLink\";\n      }\n    }\n\n    _bindNamedAction(link, action) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n\n      link.onclick = () => {\n        this.linkService.executeNamedAction(action);\n        return false;\n      };\n\n      link.className = \"internalLink\";\n    }\n\n    _bindJSAction(link, data) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n      for (const name of Object.keys(data.actions)) {\n        const jsName = map.get(name);\n\n        if (!jsName) {\n          continue;\n        }\n\n        link[jsName] = () => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: data.id,\n              name\n            }\n          });\n          return false;\n        };\n      }\n\n      link.className = \"internalLink\";\n    }\n\n  }\n\n  class TextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      this.container.className = \"textAnnotation\";\n      const image = document.createElement(\"img\");\n      image.style.height = this.container.style.height;\n      image.style.width = this.container.style.width;\n      image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n      image.alt = \"[{{type}} Annotation]\";\n      image.dataset.l10nId = \"text_annotation_type\";\n      image.dataset.l10nArgs = JSON.stringify({\n        type: this.data.name\n      });\n\n      if (!this.data.hasPopup) {\n        this._createPopup(image, this.data);\n      }\n\n      this.container.appendChild(image);\n      return this.container;\n    }\n\n  }\n\n  class WidgetAnnotationElement extends AnnotationElement {\n    render() {\n      if (this.data.alternativeText) {\n        this.container.title = this.data.alternativeText;\n      }\n\n      return this.container;\n    }\n\n    _getKeyModifier(event) {\n      return navigator.platform.includes(\"Win\") && event.ctrlKey || navigator.platform.includes(\"Mac\") && event.metaKey;\n    }\n\n    _setEventListener(element, baseName, eventName, valueGetter) {\n      if (baseName.includes(\"mouse\")) {\n        element.addEventListener(baseName, event => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: valueGetter(event),\n              shift: event.shiftKey,\n              modifier: this._getKeyModifier(event)\n            }\n          });\n        });\n      } else {\n        element.addEventListener(baseName, event => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: event.target.checked\n            }\n          });\n        });\n      }\n    }\n\n    _setEventListeners(element, names, getter) {\n      for (const [baseName, eventName] of names) {\n        if (eventName === \"Action\" || this.data.actions && this.data.actions[eventName]) { // lwf\n          this._setEventListener(element, baseName, eventName, getter);\n        }\n      }\n    }\n\n  }\n\n  class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      const isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      this.container.className = \"textWidgetAnnotation\";\n      let element = null;\n\n      if (this.renderInteractiveForms) {\n        const textContent = storage.getOrCreateValue(id, {\n          value: this.data.fieldValue\n        }).value;\n        const elementData = {\n          userValue: null,\n          formattedValue: null,\n          beforeInputSelectionRange: null,\n          beforeInputValue: null\n        };\n\n        if (this.data.multiLine) {\n          element = document.createElement(\"textarea\");\n          element.textContent = textContent;\n        } else {\n          element = document.createElement(\"input\");\n          element.type = \"text\";\n          element.setAttribute(\"value\", textContent);\n        }\n\n        elementData.userValue = textContent;\n        element.setAttribute(\"id\", id);\n        element.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: event.target.value\n          });\n        });\n\n        let blurListener = event => {\n          if (elementData.formattedValue) {\n            event.target.value = elementData.formattedValue;\n          }\n\n          event.target.setSelectionRange(0, 0);\n          elementData.beforeInputSelectionRange = null;\n        };\n\n        if (this.enableScripting && this.hasJSActions) {\n          element.addEventListener(\"focus\", event => {\n            if (elementData.userValue) {\n              event.target.value = elementData.userValue;\n            }\n          });\n          element.addEventListener(\"updatefromsandbox\", function (event) {\n            const {\n              detail\n            } = event;\n            const actions = {\n              value() {\n                elementData.userValue = detail.value || \"\";\n                storage.setValue(id, {\n                  value: elementData.userValue.toString()\n                });\n\n                if (!elementData.formattedValue) {\n                  event.target.value = elementData.userValue;\n                }\n              },\n\n              valueAsString() {\n                elementData.formattedValue = detail.valueAsString || \"\";\n\n                if (event.target !== document.activeElement) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                storage.setValue(id, {\n                  formattedValue: elementData.formattedValue\n                });\n              },\n\n              focus() {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n\n              userName() {\n                event.target.title = detail.userName;\n              },\n\n              hidden() {\n                event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                storage.setValue(id, {\n                  hidden: detail.hidden\n                });\n              },\n\n              editable() {\n                event.target.disabled = !detail.editable;\n              },\n\n              selRange() {\n                const [selStart, selEnd] = detail.selRange;\n\n                if (selStart >= 0 && selEnd < event.target.value.length) {\n                  event.target.setSelectionRange(selStart, selEnd);\n                }\n              },\n\n              strokeColor() {\n                const color = detail.strokeColor;\n                event.target.style.color = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n              }\n\n            };\n            Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n          });\n\n          if (this.data.actions) {\n            element.addEventListener(\"keydown\", event => {\n              elementData.beforeInputValue = event.target.value;\n              let commitKey = -1;\n\n              if (event.key === \"Escape\") {\n                commitKey = 0;\n              } else if (event.key === \"Enter\") {\n                commitKey = 2;\n              } else if (event.key === \"Tab\") {\n                commitKey = 3;\n              }\n\n              if (commitKey === -1) {\n                return;\n              }\n\n              elementData.userValue = event.target.value;\n              this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value: event.target.value,\n                  willCommit: true,\n                  commitKey,\n                  selStart: event.target.selectionStart,\n                  selEnd: event.target.selectionEnd\n                }\n              });\n            });\n            const _blurListener = blurListener;\n            blurListener = null;\n            element.addEventListener(\"blur\", event => {\n              if (this._mouseState.isDown) {\n                elementData.userValue = event.target.value;\n                this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value: event.target.value,\n                    willCommit: true,\n                    commitKey: 1,\n                    selStart: event.target.selectionStart,\n                    selEnd: event.target.selectionEnd\n                  }\n                });\n              }\n\n              _blurListener(event);\n            });\n            element.addEventListener(\"mousedown\", event => {\n              elementData.beforeInputValue = event.target.value;\n              elementData.beforeInputSelectionRange = null;\n            });\n            element.addEventListener(\"keyup\", event => {\n              if (event.target.selectionStart === event.target.selectionEnd) {\n                elementData.beforeInputSelectionRange = null;\n              }\n            });\n            element.addEventListener(\"select\", event => {\n              elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n            });\n\n            if (\"Keystroke\" in this.data.actions) {\n              element.addEventListener(\"input\", event => {\n                let selStart = -1;\n                let selEnd = -1;\n\n                if (elementData.beforeInputSelectionRange) {\n                  [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                }\n\n                this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value: elementData.beforeInputValue,\n                    change: event.data,\n                    willCommit: false,\n                    selStart,\n                    selEnd\n                  }\n                });\n              });\n            }\n\n            this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n          }\n        }\n\n        if (blurListener) {\n          element.addEventListener(\"blur\", blurListener);\n        }\n\n        element.disabled = this.data.readOnly;\n        element.name = this.data.fieldName;\n\n        if (this.data.maxLen !== null) {\n          element.maxLength = this.data.maxLen;\n        }\n\n        if (this.data.comb) {\n          const fieldWidth = this.data.rect[2] - this.data.rect[0];\n          const combWidth = fieldWidth / this.data.maxLen;\n          element.classList.add(\"comb\");\n          element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n        }\n      } else {\n        element = document.createElement(\"div\");\n        element.textContent = this.data.fieldValue;\n        element.style.verticalAlign = \"middle\";\n        element.style.display = \"table-cell\";\n      }\n\n      this._setTextStyle(element);\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n    _setTextStyle(element) {\n      const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n      const {\n        fontSize,\n        fontColor\n      } = this.data.defaultAppearanceData;\n      const style = element.style;\n\n      if (fontSize) {\n        style.fontSize = `${fontSize}px`;\n      }\n\n      style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n      if (this.data.textAlignment !== null) {\n        style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n      }\n    }\n\n  }\n\n  class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      const value = storage.getOrCreateValue(id, {\n        value: data.fieldValue && data.fieldValue !== \"Off\"\n      }).value;\n      this.container.className = \"buttonWidgetAnnotation checkBox\";\n      const element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"checkbox\";\n      element.name = this.data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        const name = event.target.name;\n\n        for (const checkbox of document.getElementsByName(name)) {\n          if (checkbox !== event.target) {\n            checkbox.checked = false;\n            storage.setValue(checkbox.parentNode.getAttribute(\"data-annotation-id\"), {\n              value: false\n            });\n          }\n        }\n\n        storage.setValue(id, {\n          value: event.target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              event.target.checked = detail.value !== \"Off\";\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n  }\n\n  class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      this.container.className = \"buttonWidgetAnnotation radioButton\";\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      const value = storage.getOrCreateValue(id, {\n        value: data.fieldValue === data.buttonValue\n      }).value;\n      const element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"radio\";\n      element.name = data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"pdfButtonValue\", data.buttonValue);\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        const {\n          target\n        } = event;\n\n        for (const radio of document.getElementsByName(target.name)) {\n          if (radio !== target) {\n            storage.setValue(radio.getAttribute(\"id\"), {\n              value: false\n            });\n          }\n        }\n\n        storage.setValue(id, {\n          value: target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              const fieldValue = detail.value;\n\n              for (const radio of document.getElementsByName(event.target.name)) {\n                const radioId = radio.getAttribute(\"id\");\n\n                if (fieldValue === radio.getAttribute(\"pdfButtonValue\")) {\n                  radio.setAttribute(\"checked\", true);\n                  storage.setValue(radioId, {\n                    value: true\n                  });\n                } else {\n                  storage.setValue(radioId, {\n                    value: false\n                  });\n                }\n              }\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n  }\n\n  class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n    render() {\n      const container = super.render();\n      container.className = \"buttonWidgetAnnotation pushButton\";\n\n      if (this.data.alternativeText) {\n        container.title = this.data.alternativeText;\n      }\n\n      return container;\n    }\n\n  }\n\n  class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      this.container.className = \"choiceWidgetAnnotation\";\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      storage.getOrCreateValue(id, {\n        value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n      });\n      const selectElement = document.createElement(\"select\");\n      selectElement.disabled = this.data.readOnly;\n      selectElement.name = this.data.fieldName;\n      selectElement.setAttribute(\"id\", id);\n\n      if (!this.data.combo) {\n        selectElement.size = this.data.options.length;\n\n        if (this.data.multiSelect) {\n          selectElement.multiple = true;\n        }\n      }\n\n      for (const option of this.data.options) {\n        const optionElement = document.createElement(\"option\");\n        optionElement.textContent = option.displayValue;\n        optionElement.value = option.exportValue;\n\n        if (this.data.fieldValue.includes(option.exportValue)) {\n          optionElement.setAttribute(\"selected\", true);\n        }\n\n        selectElement.appendChild(optionElement);\n      }\n\n      function getValue(event) {\n        const options = event.target.options;\n        return options[options.selectedIndex].value;\n      }\n\n      if (this.enableScripting && this.hasJSActions) {\n        selectElement.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              const options = event.target.options;\n              const value = detail.value;\n              const i = options.indexOf(value);\n\n              if (i !== -1) {\n                options.selectedIndex = i;\n                storage.setValue(id, {\n                  value\n                });\n              }\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n        selectElement.addEventListener(\"input\", event => {\n          const value = getValue(event);\n          storage.setValue(id, {\n            value\n          });\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { //lwf\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              changeEx: value,\n              willCommit: true,\n              commitKey: 1,\n              keyDown: false\n            }\n          });\n        });\n\n        this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      } else {\n        selectElement.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: getValue(event)\n          });\n        });\n      }\n\n      this.container.appendChild(selectElement);\n      return this.container;\n    }\n\n  }\n\n  class PopupAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n      this.container.className = \"popupAnnotation\";\n\n      if (IGNORE_TYPES.includes(this.data.parentType)) {\n        return this.container;\n      }\n\n      const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n      const parentElements = this.layer.querySelectorAll(selector);\n\n      if (parentElements.length === 0) {\n        return this.container;\n      }\n\n      const popup = new PopupElement({\n        container: this.container,\n        trigger: Array.from(parentElements),\n        color: this.data.color,\n        title: this.data.title,\n        modificationDate: this.data.modificationDate,\n        contents: this.data.contents\n      });\n      const page = this.page;\n\n      const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n      const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n      const popupTop = rect[1];\n      this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n      this.container.style.left = `${popupLeft}px`;\n      this.container.style.top = `${popupTop}px`;\n      this.container.appendChild(popup.render());\n      return this.container;\n    }\n\n  }\n\n  class PopupElement {\n    constructor(parameters) {\n      this.container = parameters.container;\n      this.trigger = parameters.trigger;\n      this.color = parameters.color;\n      this.title = parameters.title;\n      this.modificationDate = parameters.modificationDate;\n      this.contents = parameters.contents;\n      this.hideWrapper = parameters.hideWrapper || false;\n      this.pinned = false;\n    }\n\n    render() {\n      const BACKGROUND_ENLIGHT = 0.7;\n      const wrapper = document.createElement(\"div\");\n      wrapper.className = \"popupWrapper\";\n      this.hideElement = this.hideWrapper ? wrapper : this.container;\n      this.hideElement.setAttribute(\"hidden\", true);\n      const popup = document.createElement(\"div\");\n      popup.className = \"popup\";\n      const color = this.color;\n\n      if (color) {\n        const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n        const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n        const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n        popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n      }\n\n      const title = document.createElement(\"h1\");\n      title.textContent = this.title;\n      popup.appendChild(title);\n\n      const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n      if (dateObject) {\n        const modificationDate = document.createElement(\"span\");\n        modificationDate.textContent = \"{{date}}, {{time}}\";\n        modificationDate.dataset.l10nId = \"annotation_date_string\";\n        modificationDate.dataset.l10nArgs = JSON.stringify({\n          date: dateObject.toLocaleDateString(),\n          time: dateObject.toLocaleTimeString()\n        });\n        popup.appendChild(modificationDate);\n      }\n\n      const contents = this._formatContents(this.contents);\n\n      popup.appendChild(contents);\n\n      if (!Array.isArray(this.trigger)) {\n        this.trigger = [this.trigger];\n      }\n\n      this.trigger.forEach(element => {\n        element.addEventListener(\"click\", this._toggle.bind(this));\n        element.addEventListener(\"mouseover\", this._show.bind(this, false));\n        element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n      });\n      popup.addEventListener(\"click\", this._hide.bind(this, true));\n      wrapper.appendChild(popup);\n      return wrapper;\n    }\n\n    _formatContents(contents) {\n      const p = document.createElement(\"p\");\n      const lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n      for (let i = 0, ii = lines.length; i < ii; ++i) {\n        const line = lines[i];\n        p.appendChild(document.createTextNode(line));\n\n        if (i < ii - 1) {\n          p.appendChild(document.createElement(\"br\"));\n        }\n      }\n\n      return p;\n    }\n\n    _toggle() {\n      if (this.pinned) {\n        this._hide(true);\n      } else {\n        this._show(true);\n      }\n    }\n\n    _show(pin = false) {\n      if (pin) {\n        this.pinned = true;\n      }\n\n      if (this.hideElement.hasAttribute(\"hidden\")) {\n        this.hideElement.removeAttribute(\"hidden\");\n        this.container.style.zIndex += 1;\n      }\n    }\n\n    _hide(unpin = true) {\n      if (unpin) {\n        this.pinned = false;\n      }\n\n      if (!this.hideElement.hasAttribute(\"hidden\") && !this.pinned) {\n        this.hideElement.setAttribute(\"hidden\", true);\n        this.container.style.zIndex -= 1;\n      }\n    }\n\n  }\n\n  class FreeTextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"freeTextAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class LineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"lineAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const line = this.svgFactory.createElement(\"svg:line\");\n      line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n      line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n      line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n      line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n      line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      line.setAttribute(\"stroke\", \"transparent\");\n      svg.appendChild(line);\n      this.container.append(svg);\n\n      this._createPopup(line, data);\n\n      return this.container;\n    }\n\n  }\n\n  class SquareAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"squareAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const borderWidth = data.borderStyle.width;\n      const square = this.svgFactory.createElement(\"svg:rect\");\n      square.setAttribute(\"x\", borderWidth / 2);\n      square.setAttribute(\"y\", borderWidth / 2);\n      square.setAttribute(\"width\", width - borderWidth);\n      square.setAttribute(\"height\", height - borderWidth);\n      square.setAttribute(\"stroke-width\", borderWidth || 1);\n      square.setAttribute(\"stroke\", \"transparent\");\n      square.setAttribute(\"fill\", \"none\");\n      svg.appendChild(square);\n      this.container.append(svg);\n\n      this._createPopup(square, data);\n\n      return this.container;\n    }\n\n  }\n\n  class CircleAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"circleAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const borderWidth = data.borderStyle.width;\n      const circle = this.svgFactory.createElement(\"svg:ellipse\");\n      circle.setAttribute(\"cx\", width / 2);\n      circle.setAttribute(\"cy\", height / 2);\n      circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n      circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n      circle.setAttribute(\"stroke-width\", borderWidth || 1);\n      circle.setAttribute(\"stroke\", \"transparent\");\n      circle.setAttribute(\"fill\", \"none\");\n      svg.appendChild(circle);\n      this.container.append(svg);\n\n      this._createPopup(circle, data);\n\n      return this.container;\n    }\n\n  }\n\n  class PolylineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"polylineAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n    }\n\n    render() {\n      this.container.className = this.containerClassName;\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      let points = [];\n\n      for (const coordinate of data.vertices) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(x + \",\" + y);\n      }\n\n      points = points.join(\" \");\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n      svg.appendChild(polyline);\n      this.container.append(svg);\n\n      this._createPopup(polyline, data);\n\n      return this.container;\n    }\n\n  }\n\n  class PolygonAnnotationElement extends PolylineAnnotationElement {\n    constructor(parameters) {\n      super(parameters);\n      this.containerClassName = \"polygonAnnotation\";\n      this.svgElementName = \"svg:polygon\";\n    }\n\n  }\n\n  class CaretAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"caretAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class InkAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"inkAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n    }\n\n    render() {\n      this.container.className = this.containerClassName;\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n\n      for (const inkList of data.inkLists) {\n        let points = [];\n\n        for (const coordinate of inkList) {\n          const x = coordinate.x - data.rect[0];\n          const y = data.rect[3] - coordinate.y;\n          points.push(`${x},${y}`);\n        }\n\n        points = points.join(\" \");\n        const polyline = this.svgFactory.createElement(this.svgElementName);\n        polyline.setAttribute(\"points\", points);\n        polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n        polyline.setAttribute(\"stroke\", \"transparent\");\n        polyline.setAttribute(\"fill\", \"none\");\n\n        this._createPopup(polyline, data);\n\n        svg.appendChild(polyline);\n      }\n\n      this.container.append(svg);\n      return this.container;\n    }\n\n  }\n\n  class HighlightAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"highlightAnnotation\");\n      }\n\n      this.container.className = \"highlightAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class UnderlineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"underlineAnnotation\");\n      }\n\n      this.container.className = \"underlineAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class SquigglyAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"squigglyAnnotation\");\n      }\n\n      this.container.className = \"squigglyAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class StrikeOutAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n      }\n\n      this.container.className = \"strikeoutAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class StampAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"stampAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class FileAttachmentAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true\n      });\n      const {\n        filename,\n        content\n      } = this.data.file;\n      this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n      this.content = content;\n      this.linkService.eventBus && this.linkService.eventBus.dispatch(\"fileattachmentannotation\", { // lwf\n        source: this,\n        id: (0, _util.stringToPDFString)(filename),\n        filename,\n        content\n      });\n    }\n\n    render() {\n      this.container.className = \"fileAttachmentAnnotation\";\n      const trigger = document.createElement(\"div\");\n      trigger.style.height = this.container.style.height;\n      trigger.style.width = this.container.style.width;\n      trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n      if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n        this._createPopup(trigger, this.data);\n      }\n\n      this.container.appendChild(trigger);\n      return this.container;\n    }\n\n    _download() {\n      if (!this.downloadManager) {\n        (0, _util.warn)(\"Download cannot be started due to unavailable download manager\");\n        return;\n      }\n\n      this.downloadManager.downloadData(this.content, this.filename, \"\");\n    }\n\n  }\n\n  class AnnotationLayer {\n    static render(parameters) {\n      const sortedAnnotations = [],\n            popupAnnotations = [];\n\n      for (const data of parameters.annotations) {\n        if (!data) {\n          continue;\n        }\n\n        if (data.annotationType === _util.AnnotationType.POPUP) {\n          popupAnnotations.push(data);\n          continue;\n        }\n\n        sortedAnnotations.push(data);\n      }\n\n      if (popupAnnotations.length) {\n        sortedAnnotations.push(...popupAnnotations);\n      }\n\n      for (const data of sortedAnnotations) {\n        const element = AnnotationElementFactory.create({\n          data,\n          layer: parameters.div,\n          page: parameters.page,\n          viewport: parameters.viewport,\n          linkService: parameters.linkService,\n          downloadManager: parameters.downloadManager,\n          imageResourcesPath: parameters.imageResourcesPath || \"\",\n          renderInteractiveForms: typeof parameters.renderInteractiveForms === \"boolean\" ? parameters.renderInteractiveForms : true,\n          svgFactory: new _display_utils.DOMSVGFactory(),\n          annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n          enableScripting: parameters.enableScripting,\n          hasJSActions: parameters.hasJSActions,\n          mouseState: parameters.mouseState || {\n            isDown: false\n          }\n        });\n\n        if (element.isRenderable) {\n          const rendered = element.render();\n\n          if (data.hidden) {\n            rendered.style.visibility = \"hidden\";\n          }\n\n          if (Array.isArray(rendered)) {\n            for (const renderedElement of rendered) {\n              parameters.div.appendChild(renderedElement);\n            }\n          } else {\n            if (element instanceof PopupAnnotationElement) {\n              parameters.div.prepend(rendered);\n            } else {\n              parameters.div.appendChild(rendered);\n            }\n          }\n        }\n      }\n    }\n\n    static update(parameters) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n      for (const data of parameters.annotations) {\n        const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n        if (elements) {\n          elements.forEach(element => {\n            element.style.transform = transform;\n          });\n        }\n      }\n\n      parameters.div.removeAttribute(\"hidden\");\n    }\n\n  }\n\n  exports.AnnotationLayer = AnnotationLayer;\n\n  /***/ }),\n  /* 20 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.ColorConverters = void 0;\n\n  function makeColorComp(n) {\n    return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n  }\n\n  class ColorConverters {\n    static CMYK_G([c, y, m, k]) {\n      return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n    }\n\n    static G_CMYK([g]) {\n      return [\"CMYK\", 0, 0, 0, 1 - g];\n    }\n\n    static G_RGB([g]) {\n      return [\"RGB\", g, g, g];\n    }\n\n    static G_HTML([g]) {\n      const G = makeColorComp(g);\n      return `#${G}${G}${G}`;\n    }\n\n    static RGB_G([r, g, b]) {\n      return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n    }\n\n    static RGB_HTML([r, g, b]) {\n      const R = makeColorComp(r);\n      const G = makeColorComp(g);\n      const B = makeColorComp(b);\n      return `#${R}${G}${B}`;\n    }\n\n    static T_HTML() {\n      return \"#00000000\";\n    }\n\n    static CMYK_RGB([c, y, m, k]) {\n      return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n    }\n\n    static CMYK_HTML(components) {\n      return this.RGB_HTML(this.CMYK_RGB(components));\n    }\n\n    static RGB_CMYK([r, g, b]) {\n      const c = 1 - r;\n      const m = 1 - g;\n      const y = 1 - b;\n      const k = Math.min(c, m, y);\n      return [\"CMYK\", c, m, y, k];\n    }\n\n  }\n\n  exports.ColorConverters = ColorConverters;\n\n  /***/ }),\n  /* 21 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.renderTextLayer = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const renderTextLayer = function renderTextLayerClosure() {\n    const MAX_TEXT_DIVS_TO_RENDER = 100000;\n    const NonWhitespaceRegexp = /\\S/;\n\n    function isAllWhitespace(str) {\n      return !NonWhitespaceRegexp.test(str);\n    }\n\n    function appendText(task, geom, styles) {\n      const textDiv = document.createElement(\"span\");\n      const textDivProperties = {\n        angle: 0,\n        canvasWidth: 0,\n        isWhitespace: false,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1\n      };\n\n      task._textDivs.push(textDiv);\n\n      if (isAllWhitespace(geom.str)) {\n        textDivProperties.isWhitespace = true;\n\n        task._textDivProperties.set(textDiv, textDivProperties);\n\n        return;\n      }\n\n      const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n      let angle = Math.atan2(tx[1], tx[0]);\n      const style = styles[geom.fontName];\n\n      if (style.vertical) {\n        angle += Math.PI / 2;\n      }\n\n      const fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);\n      let fontAscent = fontHeight;\n\n      if (style.ascent) {\n        fontAscent = style.ascent * fontAscent;\n      } else if (style.descent) {\n        fontAscent = (1 + style.descent) * fontAscent;\n      }\n\n      let left, top;\n\n      if (angle === 0) {\n        left = tx[4];\n        top = tx[5] - fontAscent;\n      } else {\n        left = tx[4] + fontAscent * Math.sin(angle);\n        top = tx[5] - fontAscent * Math.cos(angle);\n      }\n\n      textDiv.style.left = `${left}px`;\n      textDiv.style.top = `${top}px`;\n      textDiv.style.fontSize = `${fontHeight}px`;\n      textDiv.style.fontFamily = style.fontFamily;\n      textDiv.textContent = geom.str;\n\n      if (task._fontInspectorEnabled) {\n        textDiv.dataset.fontName = geom.fontName;\n      }\n\n      if (angle !== 0) {\n        textDivProperties.angle = angle * (180 / Math.PI);\n      }\n\n      let shouldScaleText = false;\n\n      if (geom.str.length > 1) {\n        shouldScaleText = true;\n      } else if (geom.transform[0] !== geom.transform[3]) {\n        const absScaleX = Math.abs(geom.transform[0]),\n              absScaleY = Math.abs(geom.transform[3]);\n\n        if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n          shouldScaleText = true;\n        }\n      }\n\n      if (shouldScaleText) {\n        if (style.vertical) {\n          textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n        } else {\n          textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n        }\n      }\n\n      task._textDivProperties.set(textDiv, textDivProperties);\n\n      if (task._textContentStream) {\n        task._layoutText(textDiv);\n      }\n\n      if (task._enhanceTextSelection) {\n        let angleCos = 1,\n            angleSin = 0;\n\n        if (angle !== 0) {\n          angleCos = Math.cos(angle);\n          angleSin = Math.sin(angle);\n        }\n\n        const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n        const divHeight = fontHeight;\n        let m, b;\n\n        if (angle !== 0) {\n          m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n          b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n        } else {\n          b = [left, top, left + divWidth, top + divHeight];\n        }\n\n        task._bounds.push({\n          left: b[0],\n          top: b[1],\n          right: b[2],\n          bottom: b[3],\n          div: textDiv,\n          size: [divWidth, divHeight],\n          m\n        });\n      }\n    }\n\n    function render(task) {\n      if (task._canceled) {\n        return;\n      }\n\n      const textDivs = task._textDivs;\n      const capability = task._capability;\n      const textDivsLength = textDivs.length;\n\n      if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n        task._renderingDone = true;\n        capability.resolve();\n        return;\n      }\n\n      if (!task._textContentStream) {\n        for (let i = 0; i < textDivsLength; i++) {\n          task._layoutText(textDivs[i]);\n        }\n      }\n\n      task._renderingDone = true;\n      capability.resolve();\n    }\n\n    function findPositiveMin(ts, offset, count) {\n      let result = 0;\n\n      for (let i = 0; i < count; i++) {\n        const t = ts[offset++];\n\n        if (t > 0) {\n          result = result ? Math.min(t, result) : t;\n        }\n      }\n\n      return result;\n    }\n\n    function expand(task) {\n      const bounds = task._bounds;\n      const viewport = task._viewport;\n      const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n      for (let i = 0; i < expanded.length; i++) {\n        const div = bounds[i].div;\n\n        const divProperties = task._textDivProperties.get(div);\n\n        if (divProperties.angle === 0) {\n          divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n          divProperties.paddingTop = bounds[i].top - expanded[i].top;\n          divProperties.paddingRight = expanded[i].right - bounds[i].right;\n          divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n          task._textDivProperties.set(div, divProperties);\n\n          continue;\n        }\n\n        const e = expanded[i],\n              b = bounds[i];\n        const m = b.m,\n              c = m[0],\n              s = m[1];\n        const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n        const ts = new Float64Array(64);\n        points.forEach(function (p, j) {\n          const t = _util.Util.applyTransform(p, m);\n\n          ts[j + 0] = c && (e.left - t[0]) / c;\n          ts[j + 4] = s && (e.top - t[1]) / s;\n          ts[j + 8] = c && (e.right - t[0]) / c;\n          ts[j + 12] = s && (e.bottom - t[1]) / s;\n          ts[j + 16] = s && (e.left - t[0]) / -s;\n          ts[j + 20] = c && (e.top - t[1]) / c;\n          ts[j + 24] = s && (e.right - t[0]) / -s;\n          ts[j + 28] = c && (e.bottom - t[1]) / c;\n          ts[j + 32] = c && (e.left - t[0]) / -c;\n          ts[j + 36] = s && (e.top - t[1]) / -s;\n          ts[j + 40] = c && (e.right - t[0]) / -c;\n          ts[j + 44] = s && (e.bottom - t[1]) / -s;\n          ts[j + 48] = s && (e.left - t[0]) / s;\n          ts[j + 52] = c && (e.top - t[1]) / -c;\n          ts[j + 56] = s && (e.right - t[0]) / s;\n          ts[j + 60] = c && (e.bottom - t[1]) / -c;\n        });\n        const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n        divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n        divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n        divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n        divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n        task._textDivProperties.set(div, divProperties);\n      }\n    }\n\n    function expandBounds(width, height, boxes) {\n      const bounds = boxes.map(function (box, i) {\n        return {\n          x1: box.left,\n          y1: box.top,\n          x2: box.right,\n          y2: box.bottom,\n          index: i,\n          x1New: undefined,\n          x2New: undefined\n        };\n      });\n      expandBoundsLTR(width, bounds);\n      const expanded = new Array(boxes.length);\n      bounds.forEach(function (b) {\n        const i = b.index;\n        expanded[i] = {\n          left: b.x1New,\n          top: 0,\n          right: b.x2New,\n          bottom: 0\n        };\n      });\n      boxes.map(function (box, i) {\n        const e = expanded[i],\n              b = bounds[i];\n        b.x1 = box.top;\n        b.y1 = width - e.right;\n        b.x2 = box.bottom;\n        b.y2 = width - e.left;\n        b.index = i;\n        b.x1New = undefined;\n        b.x2New = undefined;\n      });\n      expandBoundsLTR(height, bounds);\n      bounds.forEach(function (b) {\n        const i = b.index;\n        expanded[i].top = b.x1New;\n        expanded[i].bottom = b.x2New;\n      });\n      return expanded;\n    }\n\n    function expandBoundsLTR(width, bounds) {\n      bounds.sort(function (a, b) {\n        return a.x1 - b.x1 || a.index - b.index;\n      });\n      const fakeBoundary = {\n        x1: -Infinity,\n        y1: -Infinity,\n        x2: 0,\n        y2: Infinity,\n        index: -1,\n        x1New: 0,\n        x2New: 0\n      };\n      const horizon = [{\n        start: -Infinity,\n        end: Infinity,\n        boundary: fakeBoundary\n      }];\n      bounds.forEach(function (boundary) {\n        let i = 0;\n\n        while (i < horizon.length && horizon[i].end <= boundary.y1) {\n          i++;\n        }\n\n        let j = horizon.length - 1;\n\n        while (j >= 0 && horizon[j].start >= boundary.y2) {\n          j--;\n        }\n\n        let horizonPart, affectedBoundary;\n        let q,\n            k,\n            maxXNew = -Infinity;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n          let xNew;\n\n          if (affectedBoundary.x2 > boundary.x1) {\n            xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n          } else if (affectedBoundary.x2New === undefined) {\n            xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n          } else {\n            xNew = affectedBoundary.x2New;\n          }\n\n          if (xNew > maxXNew) {\n            maxXNew = xNew;\n          }\n        }\n\n        boundary.x1New = maxXNew;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n\n          if (affectedBoundary.x2New === undefined) {\n            if (affectedBoundary.x2 > boundary.x1) {\n              if (affectedBoundary.index > boundary.index) {\n                affectedBoundary.x2New = affectedBoundary.x2;\n              }\n            } else {\n              affectedBoundary.x2New = maxXNew;\n            }\n          } else if (affectedBoundary.x2New > maxXNew) {\n            affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n          }\n        }\n\n        const changedHorizon = [];\n        let lastBoundary = null;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n          const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n          if (lastBoundary === useBoundary) {\n            changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n          } else {\n            changedHorizon.push({\n              start: horizonPart.start,\n              end: horizonPart.end,\n              boundary: useBoundary\n            });\n            lastBoundary = useBoundary;\n          }\n        }\n\n        if (horizon[i].start < boundary.y1) {\n          changedHorizon[0].start = boundary.y1;\n          changedHorizon.unshift({\n            start: horizon[i].start,\n            end: boundary.y1,\n            boundary: horizon[i].boundary\n          });\n        }\n\n        if (boundary.y2 < horizon[j].end) {\n          changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n          changedHorizon.push({\n            start: boundary.y2,\n            end: horizon[j].end,\n            boundary: horizon[j].boundary\n          });\n        }\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n\n          if (affectedBoundary.x2New !== undefined) {\n            continue;\n          }\n\n          let used = false;\n\n          for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n            used = horizon[k].boundary === affectedBoundary;\n          }\n\n          for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n            used = horizon[k].boundary === affectedBoundary;\n          }\n\n          for (k = 0; !used && k < changedHorizon.length; k++) {\n            used = changedHorizon[k].boundary === affectedBoundary;\n          }\n\n          if (!used) {\n            affectedBoundary.x2New = maxXNew;\n          }\n        }\n\n        Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n      });\n      horizon.forEach(function (horizonPart) {\n        const affectedBoundary = horizonPart.boundary;\n\n        if (affectedBoundary.x2New === undefined) {\n          affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n        }\n      });\n    }\n\n    function TextLayerRenderTask({\n      textContent,\n      textContentStream,\n      container,\n      viewport,\n      textDivs,\n      textContentItemsStr,\n      enhanceTextSelection\n    }) {\n      this._textContent = textContent;\n      this._textContentStream = textContentStream;\n      this._container = container;\n      this._document = container.ownerDocument;\n      this._viewport = viewport;\n      this._textDivs = textDivs || [];\n      this._textContentItemsStr = textContentItemsStr || [];\n      this._enhanceTextSelection = !!enhanceTextSelection;\n      this._fontInspectorEnabled = !!(globalThis.FontInspector && globalThis.FontInspector.enabled); // lwf\n      this._reader = null;\n      this._layoutTextLastFontSize = null;\n      this._layoutTextLastFontFamily = null;\n      this._layoutTextCtx = null;\n      this._textDivProperties = new WeakMap();\n      this._renderingDone = false;\n      this._canceled = false;\n      this._capability = (0, _util.createPromiseCapability)();\n      this._renderTimer = null;\n      this._bounds = [];\n\n      this._capability.promise.finally(() => {\n        if (this._layoutTextCtx) {\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      }).catch(() => {});\n    }\n\n    TextLayerRenderTask.prototype = {\n      get promise() {\n        return this._capability.promise;\n      },\n\n      cancel: function TextLayer_cancel() {\n        this._canceled = true;\n\n        if (this._reader) {\n          this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"));\n\n          this._reader = null;\n        }\n\n        if (this._renderTimer !== null) {\n          clearTimeout(this._renderTimer);\n          this._renderTimer = null;\n        }\n\n        this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n      },\n\n      _processItems(items, styleCache) {\n        for (let i = 0, len = items.length; i < len; i++) {\n          this._textContentItemsStr.push(items[i].str);\n\n          appendText(this, items[i], styleCache);\n        }\n      },\n\n      _layoutText(textDiv) {\n        const textDivProperties = this._textDivProperties.get(textDiv);\n\n        if (textDivProperties.isWhitespace) {\n          return;\n        }\n\n        let transform = \"\";\n\n        if (textDivProperties.canvasWidth !== 0) {\n          const {\n            fontSize,\n            fontFamily\n          } = textDiv.style;\n\n          if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n            this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n            this._layoutTextLastFontSize = fontSize;\n            this._layoutTextLastFontFamily = fontFamily;\n          }\n\n          const {\n            width\n          } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n          if (width > 0) {\n            textDivProperties.scale = textDivProperties.canvasWidth / width;\n            transform = `scaleX(${textDivProperties.scale})`;\n          }\n        }\n\n        if (textDivProperties.angle !== 0) {\n          transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n        }\n\n        if (transform.length > 0) {\n          if (this._enhanceTextSelection) {\n            textDivProperties.originalTransform = transform;\n          }\n\n          textDiv.style.transform = transform;\n        }\n\n        this._textDivProperties.set(textDiv, textDivProperties);\n\n        this._container.appendChild(textDiv);\n      },\n\n      _render: function TextLayer_render(timeout) {\n        const capability = (0, _util.createPromiseCapability)();\n        let styleCache = Object.create(null);\n\n        const canvas = this._document.createElement(\"canvas\");\n\n        canvas.mozOpaque = true;\n        this._layoutTextCtx = canvas.getContext(\"2d\", {\n          alpha: false\n        });\n\n        if (this._textContent) {\n          const textItems = this._textContent.items;\n          const textStyles = this._textContent.styles;\n\n          this._processItems(textItems, textStyles);\n\n          capability.resolve();\n        } else if (this._textContentStream) {\n          const pump = () => {\n            this._reader.read().then(({\n              value,\n              done\n            }) => {\n              if (done) {\n                capability.resolve();\n                return;\n              }\n\n              Object.assign(styleCache, value.styles);\n\n              this._processItems(value.items, styleCache);\n\n              pump();\n            }, capability.reject);\n          };\n\n          this._reader = this._textContentStream.getReader();\n          pump();\n        } else {\n          throw new Error('Neither \"textContent\" nor \"textContentStream\"' + \" parameters specified.\");\n        }\n\n        capability.promise.then(() => {\n          styleCache = null;\n\n          if (!timeout) {\n            render(this);\n          } else {\n            this._renderTimer = setTimeout(() => {\n              render(this);\n              this._renderTimer = null;\n            }, timeout);\n          }\n        }, this._capability.reject);\n      },\n      expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n        if (!this._enhanceTextSelection || !this._renderingDone) {\n          return;\n        }\n\n        if (this._bounds !== null) {\n          expand(this);\n          this._bounds = null;\n        }\n\n        const transformBuf = [],\n              paddingBuf = [];\n\n        for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n          const div = this._textDivs[i];\n\n          const divProps = this._textDivProperties.get(div);\n\n          if (divProps.isWhitespace) {\n            continue;\n          }\n\n          if (expandDivs) {\n            transformBuf.length = 0;\n            paddingBuf.length = 0;\n\n            if (divProps.originalTransform) {\n              transformBuf.push(divProps.originalTransform);\n            }\n\n            if (divProps.paddingTop > 0) {\n              paddingBuf.push(`${divProps.paddingTop}px`);\n              transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingRight > 0) {\n              paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingBottom > 0) {\n              paddingBuf.push(`${divProps.paddingBottom}px`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingLeft > 0) {\n              paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n              transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            div.style.padding = paddingBuf.join(\" \");\n\n            if (transformBuf.length) {\n              div.style.transform = transformBuf.join(\" \");\n            }\n          } else {\n            div.style.padding = null;\n            div.style.transform = divProps.originalTransform;\n          }\n        }\n      }\n    };\n\n    function renderTextLayer(renderParameters) {\n      const task = new TextLayerRenderTask({\n        textContent: renderParameters.textContent,\n        textContentStream: renderParameters.textContentStream,\n        container: renderParameters.container,\n        viewport: renderParameters.viewport,\n        textDivs: renderParameters.textDivs,\n        textContentItemsStr: renderParameters.textContentItemsStr,\n        enhanceTextSelection: renderParameters.enhanceTextSelection\n      });\n\n      task._render(renderParameters.timeout);\n\n      return task;\n    }\n\n    return renderTextLayer;\n  }();\n\n  exports.renderTextLayer = renderTextLayer;\n\n  /***/ }),\n  /* 22 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.SVGGraphics = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  let SVGGraphics = function () {\n    throw new Error(\"Not implemented: SVGGraphics\");\n  };\n\n  exports.SVGGraphics = SVGGraphics;\n  {\n    const SVG_DEFAULTS = {\n      fontStyle: \"normal\",\n      fontWeight: \"normal\",\n      fillColor: \"#000000\"\n    };\n    const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n    const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n    const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n    const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n    const convertImgDataToPng = function () {\n      const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n      const CHUNK_WRAPPER_SIZE = 12;\n      const crcTable = new Int32Array(256);\n\n      for (let i = 0; i < 256; i++) {\n        let c = i;\n\n        for (let h = 0; h < 8; h++) {\n          if (c & 1) {\n            c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n          } else {\n            c = c >> 1 & 0x7fffffff;\n          }\n        }\n\n        crcTable[i] = c;\n      }\n\n      function crc32(data, start, end) {\n        let crc = -1;\n\n        for (let i = start; i < end; i++) {\n          const a = (crc ^ data[i]) & 0xff;\n          const b = crcTable[a];\n          crc = crc >>> 8 ^ b;\n        }\n\n        return crc ^ -1;\n      }\n\n      function writePngChunk(type, body, data, offset) {\n        let p = offset;\n        const len = body.length;\n        data[p] = len >> 24 & 0xff;\n        data[p + 1] = len >> 16 & 0xff;\n        data[p + 2] = len >> 8 & 0xff;\n        data[p + 3] = len & 0xff;\n        p += 4;\n        data[p] = type.charCodeAt(0) & 0xff;\n        data[p + 1] = type.charCodeAt(1) & 0xff;\n        data[p + 2] = type.charCodeAt(2) & 0xff;\n        data[p + 3] = type.charCodeAt(3) & 0xff;\n        p += 4;\n        data.set(body, p);\n        p += body.length;\n        const crc = crc32(data, offset + 4, p);\n        data[p] = crc >> 24 & 0xff;\n        data[p + 1] = crc >> 16 & 0xff;\n        data[p + 2] = crc >> 8 & 0xff;\n        data[p + 3] = crc & 0xff;\n      }\n\n      function adler32(data, start, end) {\n        let a = 1;\n        let b = 0;\n\n        for (let i = start; i < end; ++i) {\n          a = (a + (data[i] & 0xff)) % 65521;\n          b = (b + a) % 65521;\n        }\n\n        return b << 16 | a;\n      }\n\n      function deflateSync(literals) {\n        if (!_is_node.isNodeJS) {\n          return deflateSyncUncompressed(literals);\n        }\n\n        try {\n          let input;\n\n          if (parseInt(process.versions.node) >= 8) {\n            input = literals;\n          } else {\n            input = Buffer.from(literals);\n          }\n\n          const output = require(\"zlib\").deflateSync(input, {\n            level: 9\n          });\n\n          return output instanceof Uint8Array ? output : new Uint8Array(output);\n        } catch (e) {\n          (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n        }\n\n        return deflateSyncUncompressed(literals);\n      }\n\n      function deflateSyncUncompressed(literals) {\n        let len = literals.length;\n        const maxBlockLength = 0xffff;\n        const deflateBlocks = Math.ceil(len / maxBlockLength);\n        const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n        let pi = 0;\n        idat[pi++] = 0x78;\n        idat[pi++] = 0x9c;\n        let pos = 0;\n\n        while (len > maxBlockLength) {\n          idat[pi++] = 0x00;\n          idat[pi++] = 0xff;\n          idat[pi++] = 0xff;\n          idat[pi++] = 0x00;\n          idat[pi++] = 0x00;\n          idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n          pi += maxBlockLength;\n          pos += maxBlockLength;\n          len -= maxBlockLength;\n        }\n\n        idat[pi++] = 0x01;\n        idat[pi++] = len & 0xff;\n        idat[pi++] = len >> 8 & 0xff;\n        idat[pi++] = ~len & 0xffff & 0xff;\n        idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n        idat.set(literals.subarray(pos), pi);\n        pi += literals.length - pos;\n        const adler = adler32(literals, 0, literals.length);\n        idat[pi++] = adler >> 24 & 0xff;\n        idat[pi++] = adler >> 16 & 0xff;\n        idat[pi++] = adler >> 8 & 0xff;\n        idat[pi++] = adler & 0xff;\n        return idat;\n      }\n\n      function encode(imgData, kind, forceDataSchema, isMask) {\n        const width = imgData.width;\n        const height = imgData.height;\n        let bitDepth, colorType, lineSize;\n        const bytes = imgData.data;\n\n        switch (kind) {\n          case _util.ImageKind.GRAYSCALE_1BPP:\n            colorType = 0;\n            bitDepth = 1;\n            lineSize = width + 7 >> 3;\n            break;\n\n          case _util.ImageKind.RGB_24BPP:\n            colorType = 2;\n            bitDepth = 8;\n            lineSize = width * 3;\n            break;\n\n          case _util.ImageKind.RGBA_32BPP:\n            colorType = 6;\n            bitDepth = 8;\n            lineSize = width * 4;\n            break;\n\n          default:\n            throw new Error(\"invalid format\");\n        }\n\n        const literals = new Uint8Array((1 + lineSize) * height);\n        let offsetLiterals = 0,\n            offsetBytes = 0;\n\n        for (let y = 0; y < height; ++y) {\n          literals[offsetLiterals++] = 0;\n          literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n          offsetBytes += lineSize;\n          offsetLiterals += lineSize;\n        }\n\n        if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n          offsetLiterals = 0;\n\n          for (let y = 0; y < height; y++) {\n            offsetLiterals++;\n\n            for (let i = 0; i < lineSize; i++) {\n              literals[offsetLiterals++] ^= 0xff;\n            }\n          }\n        }\n\n        const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n        const idat = deflateSync(literals);\n        const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n        const data = new Uint8Array(pngLength);\n        let offset = 0;\n        data.set(PNG_HEADER, offset);\n        offset += PNG_HEADER.length;\n        writePngChunk(\"IHDR\", ihdr, data, offset);\n        offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n        writePngChunk(\"IDATA\", idat, data, offset);\n        offset += CHUNK_WRAPPER_SIZE + idat.length;\n        writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n        return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n      }\n\n      return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n        const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n        return encode(imgData, kind, forceDataSchema, isMask);\n      };\n    }();\n\n    class SVGExtraState {\n      constructor() {\n        this.fontSizeScale = 1;\n        this.fontWeight = SVG_DEFAULTS.fontWeight;\n        this.fontSize = 0;\n        this.textMatrix = _util.IDENTITY_MATRIX;\n        this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n        this.leading = 0;\n        this.textRenderingMode = _util.TextRenderingMode.FILL;\n        this.textMatrixScale = 1;\n        this.x = 0;\n        this.y = 0;\n        this.lineX = 0;\n        this.lineY = 0;\n        this.charSpacing = 0;\n        this.wordSpacing = 0;\n        this.textHScale = 1;\n        this.textRise = 0;\n        this.fillColor = SVG_DEFAULTS.fillColor;\n        this.strokeColor = \"#000000\";\n        this.fillAlpha = 1;\n        this.strokeAlpha = 1;\n        this.lineWidth = 1;\n        this.lineJoin = \"\";\n        this.lineCap = \"\";\n        this.miterLimit = 0;\n        this.dashArray = [];\n        this.dashPhase = 0;\n        this.dependencies = [];\n        this.activeClipUrl = null;\n        this.clipGroup = null;\n        this.maskId = \"\";\n      }\n\n      clone() {\n        return Object.create(this);\n      }\n\n      setCurrentPoint(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n    }\n\n    function opListToTree(opList) {\n      let opTree = [];\n      const tmp = [];\n\n      for (const opListElement of opList) {\n        if (opListElement.fn === \"save\") {\n          opTree.push({\n            fnId: 92,\n            fn: \"group\",\n            items: []\n          });\n          tmp.push(opTree);\n          opTree = opTree[opTree.length - 1].items;\n          continue;\n        }\n\n        if (opListElement.fn === \"restore\") {\n          opTree = tmp.pop();\n        } else {\n          opTree.push(opListElement);\n        }\n      }\n\n      return opTree;\n    }\n\n    function pf(value) {\n      if (Number.isInteger(value)) {\n        return value.toString();\n      }\n\n      const s = value.toFixed(10);\n      let i = s.length - 1;\n\n      if (s[i] !== \"0\") {\n        return s;\n      }\n\n      do {\n        i--;\n      } while (s[i] === \"0\");\n\n      return s.substring(0, s[i] === \".\" ? i : i + 1);\n    }\n\n    function pm(m) {\n      if (m[4] === 0 && m[5] === 0) {\n        if (m[1] === 0 && m[2] === 0) {\n          if (m[0] === 1 && m[3] === 1) {\n            return \"\";\n          }\n\n          return `scale(${pf(m[0])} ${pf(m[3])})`;\n        }\n\n        if (m[0] === m[3] && m[1] === -m[2]) {\n          const a = Math.acos(m[0]) * 180 / Math.PI;\n          return `rotate(${pf(a)})`;\n        }\n      } else {\n        if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n          return `translate(${pf(m[4])} ${pf(m[5])})`;\n        }\n      }\n\n      return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n    }\n\n    let clipCount = 0;\n    let maskCount = 0;\n    let shadingCount = 0;\n    exports.SVGGraphics = SVGGraphics = class SVGGraphics {\n      constructor(commonObjs, objs, forceDataSchema = false) {\n        this.svgFactory = new _display_utils.DOMSVGFactory();\n        this.current = new SVGExtraState();\n        this.transformMatrix = _util.IDENTITY_MATRIX;\n        this.transformStack = [];\n        this.extraStack = [];\n        this.commonObjs = commonObjs;\n        this.objs = objs;\n        this.pendingClip = null;\n        this.pendingEOFill = false;\n        this.embedFonts = false;\n        this.embeddedFonts = Object.create(null);\n        this.cssStyle = null;\n        this.forceDataSchema = !!forceDataSchema;\n        this._operatorIdMapping = [];\n\n        for (const op in _util.OPS) {\n          this._operatorIdMapping[_util.OPS[op]] = op;\n        }\n      }\n\n      save() {\n        this.transformStack.push(this.transformMatrix);\n        const old = this.current;\n        this.extraStack.push(old);\n        this.current = old.clone();\n      }\n\n      restore() {\n        this.transformMatrix = this.transformStack.pop();\n        this.current = this.extraStack.pop();\n        this.pendingClip = null;\n        this.tgrp = null;\n      }\n\n      group(items) {\n        this.save();\n        this.executeOpTree(items);\n        this.restore();\n      }\n\n      loadDependencies(operatorList) {\n        const fnArray = operatorList.fnArray;\n        const argsArray = operatorList.argsArray;\n\n        for (let i = 0, ii = fnArray.length; i < ii; i++) {\n          if (fnArray[i] !== _util.OPS.dependency) {\n            continue;\n          }\n\n          for (const obj of argsArray[i]) {\n            const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n            const promise = new Promise(resolve => {\n              objsPool.get(obj, resolve);\n            });\n            this.current.dependencies.push(promise);\n          }\n        }\n\n        return Promise.all(this.current.dependencies);\n      }\n\n      transform(a, b, c, d, e, f) {\n        const transformMatrix = [a, b, c, d, e, f];\n        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n        this.tgrp = null;\n      }\n\n      getSVG(operatorList, viewport) {\n        this.viewport = viewport;\n\n        const svgElement = this._initialize(viewport);\n\n        return this.loadDependencies(operatorList).then(() => {\n          this.transformMatrix = _util.IDENTITY_MATRIX;\n          this.executeOpTree(this.convertOpList(operatorList));\n          return svgElement;\n        });\n      }\n\n      convertOpList(operatorList) {\n        const operatorIdMapping = this._operatorIdMapping;\n        const argsArray = operatorList.argsArray;\n        const fnArray = operatorList.fnArray;\n        const opList = [];\n\n        for (let i = 0, ii = fnArray.length; i < ii; i++) {\n          const fnId = fnArray[i];\n          opList.push({\n            fnId,\n            fn: operatorIdMapping[fnId],\n            args: argsArray[i]\n          });\n        }\n\n        return opListToTree(opList);\n      }\n\n      executeOpTree(opTree) {\n        for (const opTreeElement of opTree) {\n          const fn = opTreeElement.fn;\n          const fnId = opTreeElement.fnId;\n          const args = opTreeElement.args;\n\n          switch (fnId | 0) {\n            case _util.OPS.beginText:\n              this.beginText();\n              break;\n\n            case _util.OPS.dependency:\n              break;\n\n            case _util.OPS.setLeading:\n              this.setLeading(args);\n              break;\n\n            case _util.OPS.setLeadingMoveText:\n              this.setLeadingMoveText(args[0], args[1]);\n              break;\n\n            case _util.OPS.setFont:\n              this.setFont(args);\n              break;\n\n            case _util.OPS.showText:\n              this.showText(args[0]);\n              break;\n\n            case _util.OPS.showSpacedText:\n              this.showText(args[0]);\n              break;\n\n            case _util.OPS.endText:\n              this.endText();\n              break;\n\n            case _util.OPS.moveText:\n              this.moveText(args[0], args[1]);\n              break;\n\n            case _util.OPS.setCharSpacing:\n              this.setCharSpacing(args[0]);\n              break;\n\n            case _util.OPS.setWordSpacing:\n              this.setWordSpacing(args[0]);\n              break;\n\n            case _util.OPS.setHScale:\n              this.setHScale(args[0]);\n              break;\n\n            case _util.OPS.setTextMatrix:\n              this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.setTextRise:\n              this.setTextRise(args[0]);\n              break;\n\n            case _util.OPS.setTextRenderingMode:\n              this.setTextRenderingMode(args[0]);\n              break;\n\n            case _util.OPS.setLineWidth:\n              this.setLineWidth(args[0]);\n              break;\n\n            case _util.OPS.setLineJoin:\n              this.setLineJoin(args[0]);\n              break;\n\n            case _util.OPS.setLineCap:\n              this.setLineCap(args[0]);\n              break;\n\n            case _util.OPS.setMiterLimit:\n              this.setMiterLimit(args[0]);\n              break;\n\n            case _util.OPS.setFillRGBColor:\n              this.setFillRGBColor(args[0], args[1], args[2]);\n              break;\n\n            case _util.OPS.setStrokeRGBColor:\n              this.setStrokeRGBColor(args[0], args[1], args[2]);\n              break;\n\n            case _util.OPS.setStrokeColorN:\n              this.setStrokeColorN(args);\n              break;\n\n            case _util.OPS.setFillColorN:\n              this.setFillColorN(args);\n              break;\n\n            case _util.OPS.shadingFill:\n              this.shadingFill(args[0]);\n              break;\n\n            case _util.OPS.setDash:\n              this.setDash(args[0], args[1]);\n              break;\n\n            case _util.OPS.setRenderingIntent:\n              this.setRenderingIntent(args[0]);\n              break;\n\n            case _util.OPS.setFlatness:\n              this.setFlatness(args[0]);\n              break;\n\n            case _util.OPS.setGState:\n              this.setGState(args[0]);\n              break;\n\n            case _util.OPS.fill:\n              this.fill();\n              break;\n\n            case _util.OPS.eoFill:\n              this.eoFill();\n              break;\n\n            case _util.OPS.stroke:\n              this.stroke();\n              break;\n\n            case _util.OPS.fillStroke:\n              this.fillStroke();\n              break;\n\n            case _util.OPS.eoFillStroke:\n              this.eoFillStroke();\n              break;\n\n            case _util.OPS.clip:\n              this.clip(\"nonzero\");\n              break;\n\n            case _util.OPS.eoClip:\n              this.clip(\"evenodd\");\n              break;\n\n            case _util.OPS.paintSolidColorImageMask:\n              this.paintSolidColorImageMask();\n              break;\n\n            case _util.OPS.paintImageXObject:\n              this.paintImageXObject(args[0]);\n              break;\n\n            case _util.OPS.paintInlineImageXObject:\n              this.paintInlineImageXObject(args[0]);\n              break;\n\n            case _util.OPS.paintImageMaskXObject:\n              this.paintImageMaskXObject(args[0]);\n              break;\n\n            case _util.OPS.paintFormXObjectBegin:\n              this.paintFormXObjectBegin(args[0], args[1]);\n              break;\n\n            case _util.OPS.paintFormXObjectEnd:\n              this.paintFormXObjectEnd();\n              break;\n\n            case _util.OPS.closePath:\n              this.closePath();\n              break;\n\n            case _util.OPS.closeStroke:\n              this.closeStroke();\n              break;\n\n            case _util.OPS.closeFillStroke:\n              this.closeFillStroke();\n              break;\n\n            case _util.OPS.closeEOFillStroke:\n              this.closeEOFillStroke();\n              break;\n\n            case _util.OPS.nextLine:\n              this.nextLine();\n              break;\n\n            case _util.OPS.transform:\n              this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.constructPath:\n              this.constructPath(args[0], args[1]);\n              break;\n\n            case _util.OPS.endPath:\n              this.endPath();\n              break;\n\n            case 92:\n              this.group(opTreeElement.items);\n              break;\n\n            default:\n              (0, _util.warn)(`Unimplemented operator ${fn}`);\n              break;\n          }\n        }\n      }\n\n      setWordSpacing(wordSpacing) {\n        this.current.wordSpacing = wordSpacing;\n      }\n\n      setCharSpacing(charSpacing) {\n        this.current.charSpacing = charSpacing;\n      }\n\n      nextLine() {\n        this.moveText(0, this.current.leading);\n      }\n\n      setTextMatrix(a, b, c, d, e, f) {\n        const current = this.current;\n        current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n        current.textMatrixScale = Math.sqrt(a * a + b * b);\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtElement.appendChild(current.tspan);\n      }\n\n      beginText() {\n        const current = this.current;\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.textMatrix = _util.IDENTITY_MATRIX;\n        current.lineMatrix = _util.IDENTITY_MATRIX;\n        current.textMatrixScale = 1;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n\n      moveText(x, y) {\n        const current = this.current;\n        current.x = current.lineX += x;\n        current.y = current.lineY += y;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      showText(glyphs) {\n        const current = this.current;\n        const font = current.font;\n        const fontSize = current.fontSize;\n\n        if (fontSize === 0) {\n          return;\n        }\n\n        const fontSizeScale = current.fontSizeScale;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const fontDirection = current.fontDirection;\n        const textHScale = current.textHScale * fontDirection;\n        const vertical = font.vertical;\n        const spacingDir = vertical ? 1 : -1;\n        const defaultVMetrics = font.defaultVMetrics;\n        const widthAdvanceScale = fontSize * current.fontMatrix[0];\n        let x = 0;\n\n        for (const glyph of glyphs) {\n          if (glyph === null) {\n            x += fontDirection * wordSpacing;\n            continue;\n          } else if ((0, _util.isNum)(glyph)) {\n            x += spacingDir * glyph * fontSize / 1000;\n            continue;\n          }\n\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const character = glyph.fontChar;\n          let scaledX, scaledY;\n          let width = glyph.width;\n\n          if (vertical) {\n            let vx;\n            const vmetric = glyph.vmetric || defaultVMetrics;\n            vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n            vx = -vx * widthAdvanceScale;\n            const vy = vmetric[2] * widthAdvanceScale;\n            width = vmetric ? -vmetric[0] : width;\n            scaledX = vx / fontSizeScale;\n            scaledY = (x + vy) / fontSizeScale;\n          } else {\n            scaledX = x / fontSizeScale;\n            scaledY = 0;\n          }\n\n          if (glyph.isInFont || font.missingFile) {\n            current.xcoords.push(current.x + scaledX);\n\n            if (vertical) {\n              current.ycoords.push(-current.y + scaledY);\n            }\n\n            current.tspan.textContent += character;\n          } else {}\n\n          let charWidth;\n\n          if (vertical) {\n            charWidth = width * widthAdvanceScale - spacing * fontDirection;\n          } else {\n            charWidth = width * widthAdvanceScale + spacing * fontDirection;\n          }\n\n          x += charWidth;\n        }\n\n        current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n        if (vertical) {\n          current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n        } else {\n          current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        }\n\n        if (vertical) {\n          current.y -= x;\n        } else {\n          current.x += x * textHScale;\n        }\n\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n          current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n        }\n\n        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n          current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n        }\n\n        const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n            current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n          }\n\n          if (current.fillAlpha < 1) {\n            current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          }\n        } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n          current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n        } else {\n          current.tspan.setAttributeNS(null, \"fill\", \"none\");\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n          this._setStrokeAttributes(current.tspan, lineWidthScale);\n        }\n\n        let textMatrix = current.textMatrix;\n\n        if (current.textRise !== 0) {\n          textMatrix = textMatrix.slice();\n          textMatrix[5] += current.textRise;\n        }\n\n        current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n        current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n        current.txtElement.appendChild(current.tspan);\n        current.txtgrp.appendChild(current.txtElement);\n\n        this._ensureTransformGroup().appendChild(current.txtElement);\n      }\n\n      setLeadingMoveText(x, y) {\n        this.setLeading(-y);\n        this.moveText(x, y);\n      }\n\n      addFontStyle(fontObj) {\n        if (!fontObj.data) {\n          throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n        }\n\n        if (!this.cssStyle) {\n          this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n          this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n          this.defs.appendChild(this.cssStyle);\n        }\n\n        const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n        this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n      }\n\n      setFont(details) {\n        const current = this.current;\n        const fontObj = this.commonObjs.get(details[0]);\n        let size = details[1];\n        current.font = fontObj;\n\n        if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n          this.addFontStyle(fontObj);\n          this.embeddedFonts[fontObj.loadedName] = fontObj;\n        }\n\n        current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        let bold = \"normal\";\n\n        if (fontObj.black) {\n          bold = \"900\";\n        } else if (fontObj.bold) {\n          bold = \"bold\";\n        }\n\n        const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n        if (size < 0) {\n          size = -size;\n          current.fontDirection = -1;\n        } else {\n          current.fontDirection = 1;\n        }\n\n        current.fontSize = size;\n        current.fontFamily = fontObj.loadedName;\n        current.fontWeight = bold;\n        current.fontStyle = italic;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n\n      endText() {\n        const current = this.current;\n\n        if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement && current.txtElement.hasChildNodes()) { // lwf\n          current.element = current.txtElement;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n\n      setLineWidth(width) {\n        if (width > 0) {\n          this.current.lineWidth = width;\n        }\n      }\n\n      setLineCap(style) {\n        this.current.lineCap = LINE_CAP_STYLES[style];\n      }\n\n      setLineJoin(style) {\n        this.current.lineJoin = LINE_JOIN_STYLES[style];\n      }\n\n      setMiterLimit(limit) {\n        this.current.miterLimit = limit;\n      }\n\n      setStrokeAlpha(strokeAlpha) {\n        this.current.strokeAlpha = strokeAlpha;\n      }\n\n      setStrokeRGBColor(r, g, b) {\n        this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n      }\n\n      setFillAlpha(fillAlpha) {\n        this.current.fillAlpha = fillAlpha;\n      }\n\n      setFillRGBColor(r, g, b) {\n        this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n        this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        this.current.xcoords = [];\n        this.current.ycoords = [];\n      }\n\n      setStrokeColorN(args) {\n        this.current.strokeColor = this._makeColorN_Pattern(args);\n      }\n\n      setFillColorN(args) {\n        this.current.fillColor = this._makeColorN_Pattern(args);\n      }\n\n      shadingFill(args) {\n        const width = this.viewport.width;\n        const height = this.viewport.height;\n\n        const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n        const bl = _util.Util.applyTransform([0, 0], inv);\n\n        const br = _util.Util.applyTransform([0, height], inv);\n\n        const ul = _util.Util.applyTransform([width, 0], inv);\n\n        const ur = _util.Util.applyTransform([width, height], inv);\n\n        const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", x0);\n        rect.setAttributeNS(null, \"y\", y0);\n        rect.setAttributeNS(null, \"width\", x1 - x0);\n        rect.setAttributeNS(null, \"height\", y1 - y0);\n        rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n        if (this.current.fillAlpha < 1) {\n          rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n        }\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n\n      _makeColorN_Pattern(args) {\n        if (args[0] === \"TilingPattern\") {\n          return this._makeTilingPattern(args);\n        }\n\n        return this._makeShadingPattern(args);\n      }\n\n      _makeTilingPattern(args) {\n        const color = args[1];\n        const operatorList = args[2];\n        const matrix = args[3] || _util.IDENTITY_MATRIX;\n        const [x0, y0, x1, y1] = args[4];\n        const xstep = args[5];\n        const ystep = args[6];\n        const paintType = args[7];\n        const tilingId = `shading${shadingCount++}`;\n\n        const [tx0, ty0] = _util.Util.applyTransform([x0, y0], matrix);\n\n        const [tx1, ty1] = _util.Util.applyTransform([x1, y1], matrix);\n\n        const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n        const txstep = xstep * xscale;\n        const tystep = ystep * yscale;\n        const tiling = this.svgFactory.createElement(\"svg:pattern\");\n        tiling.setAttributeNS(null, \"id\", tilingId);\n        tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n        tiling.setAttributeNS(null, \"width\", txstep);\n        tiling.setAttributeNS(null, \"height\", tystep);\n        tiling.setAttributeNS(null, \"x\", `${tx0}`);\n        tiling.setAttributeNS(null, \"y\", `${ty0}`);\n        const svg = this.svg;\n        const transformMatrix = this.transformMatrix;\n        const fillColor = this.current.fillColor;\n        const strokeColor = this.current.strokeColor;\n        const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n        this.svg = bbox;\n        this.transformMatrix = matrix;\n\n        if (paintType === 2) {\n          const cssColor = _util.Util.makeHexColor(...color);\n\n          this.current.fillColor = cssColor;\n          this.current.strokeColor = cssColor;\n        }\n\n        this.executeOpTree(this.convertOpList(operatorList));\n        this.svg = svg;\n        this.transformMatrix = transformMatrix;\n        this.current.fillColor = fillColor;\n        this.current.strokeColor = strokeColor;\n        tiling.appendChild(bbox.childNodes[0]);\n        this.defs.appendChild(tiling);\n        return `url(#${tilingId})`;\n      }\n\n      _makeShadingPattern(args) {\n        switch (args[0]) {\n          case \"RadialAxial\":\n            const shadingId = `shading${shadingCount++}`;\n            const colorStops = args[3];\n            let gradient;\n\n            switch (args[1]) {\n              case \"axial\":\n                const point0 = args[4];\n                const point1 = args[5];\n                gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"x1\", point0[0]);\n                gradient.setAttributeNS(null, \"y1\", point0[1]);\n                gradient.setAttributeNS(null, \"x2\", point1[0]);\n                gradient.setAttributeNS(null, \"y2\", point1[1]);\n                break;\n\n              case \"radial\":\n                const focalPoint = args[4];\n                const circlePoint = args[5];\n                const focalRadius = args[6];\n                const circleRadius = args[7];\n                gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                gradient.setAttributeNS(null, \"r\", circleRadius);\n                gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                gradient.setAttributeNS(null, \"fr\", focalRadius);\n                break;\n\n              default:\n                throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n            }\n\n            for (const colorStop of colorStops) {\n              const stop = this.svgFactory.createElement(\"svg:stop\");\n              stop.setAttributeNS(null, \"offset\", colorStop[0]);\n              stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n              gradient.appendChild(stop);\n            }\n\n            this.defs.appendChild(gradient);\n            return `url(#${shadingId})`;\n\n          case \"Mesh\":\n            (0, _util.warn)(\"Unimplemented pattern Mesh\");\n            return null;\n\n          case \"Dummy\":\n            return \"hotpink\";\n\n          default:\n            throw new Error(`Unknown IR type: ${args[0]}`);\n        }\n      }\n\n      setDash(dashArray, dashPhase) {\n        this.current.dashArray = dashArray;\n        this.current.dashPhase = dashPhase;\n      }\n\n      constructPath(ops, args) {\n        const current = this.current;\n        let x = current.x,\n            y = current.y;\n        let d = [];\n        let j = 0;\n\n        for (const op of ops) {\n          switch (op | 0) {\n            case _util.OPS.rectangle:\n              x = args[j++];\n              y = args[j++];\n              const width = args[j++];\n              const height = args[j++];\n              const xw = x + width;\n              const yh = y + height;\n              d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n              break;\n\n            case _util.OPS.moveTo:\n              x = args[j++];\n              y = args[j++];\n              d.push(\"M\", pf(x), pf(y));\n              break;\n\n            case _util.OPS.lineTo:\n              x = args[j++];\n              y = args[j++];\n              d.push(\"L\", pf(x), pf(y));\n              break;\n\n            case _util.OPS.curveTo:\n              x = args[j + 4];\n              y = args[j + 5];\n              d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n              j += 6;\n              break;\n\n            case _util.OPS.curveTo2:\n              d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n              x = args[j + 2];\n              y = args[j + 3];\n              j += 4;\n              break;\n\n            case _util.OPS.curveTo3:\n              x = args[j + 2];\n              y = args[j + 3];\n              d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n              j += 4;\n              break;\n\n            case _util.OPS.closePath:\n              d.push(\"Z\");\n              break;\n          }\n        }\n\n        d = d.join(\" \");\n\n        if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n          d = current.path.getAttributeNS(null, \"d\") + d;\n        } else {\n          current.path = this.svgFactory.createElement(\"svg:path\");\n\n          this._ensureTransformGroup().appendChild(current.path);\n        }\n\n        current.path.setAttributeNS(null, \"d\", d);\n        current.path.setAttributeNS(null, \"fill\", \"none\");\n        current.element = current.path;\n        current.setCurrentPoint(x, y);\n      }\n\n      endPath() {\n        const current = this.current;\n        current.path = null;\n\n        if (!this.pendingClip) {\n          return;\n        }\n\n        if (!current.element) {\n          this.pendingClip = null;\n          return;\n        }\n\n        const clipId = `clippath${clipCount++}`;\n        const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n        clipPath.setAttributeNS(null, \"id\", clipId);\n        clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        const clipElement = current.element.cloneNode(true);\n\n        if (this.pendingClip === \"evenodd\") {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n        } else {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n        }\n\n        this.pendingClip = null;\n        clipPath.appendChild(clipElement);\n        this.defs.appendChild(clipPath);\n\n        if (current.activeClipUrl) {\n          current.clipGroup = null;\n          this.extraStack.forEach(function (prev) {\n            prev.clipGroup = null;\n          });\n          clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n        }\n\n        current.activeClipUrl = `url(#${clipId})`;\n        this.tgrp = null;\n      }\n\n      clip(type) {\n        this.pendingClip = type;\n      }\n\n      closePath() {\n        const current = this.current;\n\n        if (current.path) {\n          const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n          current.path.setAttributeNS(null, \"d\", d);\n        }\n      }\n\n      setLeading(leading) {\n        this.current.leading = -leading;\n      }\n\n      setTextRise(textRise) {\n        this.current.textRise = textRise;\n      }\n\n      setTextRenderingMode(textRenderingMode) {\n        this.current.textRenderingMode = textRenderingMode;\n      }\n\n      setHScale(scale) {\n        this.current.textHScale = scale / 100;\n      }\n\n      setRenderingIntent(intent) {}\n\n      setFlatness(flatness) {}\n\n      setGState(states) {\n        for (const [key, value] of states) {\n          switch (key) {\n            case \"LW\":\n              this.setLineWidth(value);\n              break;\n\n            case \"LC\":\n              this.setLineCap(value);\n              break;\n\n            case \"LJ\":\n              this.setLineJoin(value);\n              break;\n\n            case \"ML\":\n              this.setMiterLimit(value);\n              break;\n\n            case \"D\":\n              this.setDash(value[0], value[1]);\n              break;\n\n            case \"RI\":\n              this.setRenderingIntent(value);\n              break;\n\n            case \"FL\":\n              this.setFlatness(value);\n              break;\n\n            case \"Font\":\n              this.setFont(value);\n              break;\n\n            case \"CA\":\n              this.setStrokeAlpha(value);\n              break;\n\n            case \"ca\":\n              this.setFillAlpha(value);\n              break;\n\n            default:\n              (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n              break;\n          }\n        }\n      }\n\n      fill() {\n        const current = this.current;\n\n        if (current.element) {\n          current.element.setAttributeNS(null, \"fill\", current.fillColor);\n          current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          this.endPath();\n        }\n      }\n\n      stroke() {\n        const current = this.current;\n\n        if (current.element) {\n          this._setStrokeAttributes(current.element);\n\n          current.element.setAttributeNS(null, \"fill\", \"none\");\n          this.endPath();\n        }\n      }\n\n      _setStrokeAttributes(element, lineWidthScale = 1) {\n        const current = this.current;\n        let dashArray = current.dashArray;\n\n        if (lineWidthScale !== 1 && dashArray.length > 0) {\n          dashArray = dashArray.map(function (value) {\n            return lineWidthScale * value;\n          });\n        }\n\n        element.setAttributeNS(null, \"stroke\", current.strokeColor);\n        element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n        element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n        element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n        element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n        element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n        element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n        element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n      }\n\n      eoFill() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fill();\n      }\n\n      fillStroke() {\n        this.stroke();\n        this.fill();\n      }\n\n      eoFillStroke() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fillStroke();\n      }\n\n      closeStroke() {\n        this.closePath();\n        this.stroke();\n      }\n\n      closeFillStroke() {\n        this.closePath();\n        this.fillStroke();\n      }\n\n      closeEOFillStroke() {\n        this.closePath();\n        this.eoFillStroke();\n      }\n\n      paintSolidColorImageMask() {\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", \"1px\");\n        rect.setAttributeNS(null, \"height\", \"1px\");\n        rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n\n      paintImageXObject(objId) {\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n          return;\n        }\n\n        this.paintInlineImageXObject(imgData);\n      }\n\n      paintInlineImageXObject(imgData, mask) {\n        const width = imgData.width;\n        const height = imgData.height;\n        const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", \"0\");\n        cliprect.setAttributeNS(null, \"y\", \"0\");\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        const imgEl = this.svgFactory.createElement(\"svg:image\");\n        imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n        imgEl.setAttributeNS(null, \"x\", \"0\");\n        imgEl.setAttributeNS(null, \"y\", pf(-height));\n        imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n        imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n        imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n        if (mask) {\n          mask.appendChild(imgEl);\n        } else {\n          this._ensureTransformGroup().appendChild(imgEl);\n        }\n      }\n\n      paintImageMaskXObject(imgData) {\n        const current = this.current;\n        const width = imgData.width;\n        const height = imgData.height;\n        const fillColor = current.fillColor;\n        current.maskId = `mask${maskCount++}`;\n        const mask = this.svgFactory.createElement(\"svg:mask\");\n        mask.setAttributeNS(null, \"id\", current.maskId);\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", pf(width));\n        rect.setAttributeNS(null, \"height\", pf(height));\n        rect.setAttributeNS(null, \"fill\", fillColor);\n        rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n        this.defs.appendChild(mask);\n\n        this._ensureTransformGroup().appendChild(rect);\n\n        this.paintInlineImageXObject(imgData, mask);\n      }\n\n      paintFormXObjectBegin(matrix, bbox) {\n        if (Array.isArray(matrix) && matrix.length === 6) {\n          this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n        }\n\n        if (bbox) {\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const cliprect = this.svgFactory.createElement(\"svg:rect\");\n          cliprect.setAttributeNS(null, \"x\", bbox[0]);\n          cliprect.setAttributeNS(null, \"y\", bbox[1]);\n          cliprect.setAttributeNS(null, \"width\", pf(width));\n          cliprect.setAttributeNS(null, \"height\", pf(height));\n          this.current.element = cliprect;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n\n      paintFormXObjectEnd() {}\n\n      _initialize(viewport) {\n        const svg = this.svgFactory.create(viewport.width, viewport.height);\n        const definitions = this.svgFactory.createElement(\"svg:defs\");\n        svg.appendChild(definitions);\n        this.defs = definitions;\n        const rootGroup = this.svgFactory.createElement(\"svg:g\");\n        rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n        svg.appendChild(rootGroup);\n        this.svg = rootGroup;\n        return svg;\n      }\n\n      _ensureClipGroup() {\n        if (!this.current.clipGroup) {\n          const clipGroup = this.svgFactory.createElement(\"svg:g\");\n          clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n          this.svg.appendChild(clipGroup);\n          this.current.clipGroup = clipGroup;\n        }\n\n        return this.current.clipGroup;\n      }\n\n      _ensureTransformGroup() {\n        if (!this.tgrp) {\n          this.tgrp = this.svgFactory.createElement(\"svg:g\");\n          this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n          if (this.current.activeClipUrl) {\n            this._ensureClipGroup().appendChild(this.tgrp);\n          } else {\n            this.svg.appendChild(this.tgrp);\n          }\n        }\n\n        return this.tgrp;\n      }\n\n    };\n  }\n\n  /***/ }),\n  /* 23 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFNodeStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n\n  const fs = require(\"fs\");\n\n  const http = require(\"http\");\n\n  const https = require(\"https\");\n\n  const url = require(\"url\");\n\n  const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n  function parseUrl(sourceUrl) {\n    const parsedUrl = url.parse(sourceUrl);\n\n    if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n      return parsedUrl;\n    }\n\n    if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n      return url.parse(`file:///${sourceUrl}`);\n    }\n\n    if (!parsedUrl.host) {\n      parsedUrl.protocol = \"file:\";\n    }\n\n    return parsedUrl;\n  }\n\n  class PDFNodeStream {\n    constructor(source) {\n      this.source = source;\n      this.url = parseUrl(source.url);\n      this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n      this.isFsUrl = this.url.protocol === \"file:\";\n      this.httpHeaders = this.isHttp && source.httpHeaders || {};\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n      this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(start, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n      this._rangeRequestReaders.push(rangeReader);\n\n      return rangeReader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFNodeStream = PDFNodeStream;\n\n  class BaseFullReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      const source = stream.source;\n      this._contentLength = source.length;\n      this._loaded = 0;\n      this._filename = null;\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      this._readableStream = null;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      this._headersCapability = (0, _util.createPromiseCapability)();\n    }\n\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      const chunk = this._readableStream.read();\n\n      if (chunk === null) {\n        this._readCapability = (0, _util.createPromiseCapability)();\n        return this.read();\n      }\n\n      this._loaded += chunk.length;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded,\n          total: this._contentLength\n        });\n      }\n\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n\n    _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n\n      if (!this._isStreamingSupported && this._isRangeSupported) {\n        this._error(new _util.AbortException(\"streaming is disabled\"));\n      }\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n\n  }\n\n  class BaseRangeReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      this._loaded = 0;\n      this._readableStream = null;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      const source = stream.source;\n      this._isStreamingSupported = !source.disableStream;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      const chunk = this._readableStream.read();\n\n      if (chunk === null) {\n        this._readCapability = (0, _util.createPromiseCapability)();\n        return this.read();\n      }\n\n      this._loaded += chunk.length;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded\n        });\n      }\n\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n\n    _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n\n  }\n\n  function createRequestOptions(parsedUrl, headers) {\n    return {\n      protocol: parsedUrl.protocol,\n      auth: parsedUrl.auth,\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      path: parsedUrl.path,\n      method: \"GET\",\n      headers\n    };\n  }\n\n  class PDFNodeStreamFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n\n          this._headersCapability.reject(error);\n\n          return;\n        }\n\n        this._headersCapability.resolve();\n\n        this._setReadableStream(response);\n\n        const getResponseHeader = name => {\n          return this._readableStream.headers[name.toLowerCase()];\n        };\n\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = (0, _network_utils.validateRangeRequestCapabilities)({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n      };\n\n      this._request = null;\n\n      if (this._url.protocol === \"http:\") {\n        this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n      } else {\n        this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n      }\n\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n\n        this._headersCapability.reject(reason);\n      });\n\n      this._request.end();\n    }\n\n  }\n\n  class PDFNodeStreamRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      this._httpHeaders = {};\n\n      for (const property in stream.httpHeaders) {\n        const value = stream.httpHeaders[property];\n\n        if (typeof value === \"undefined\") {\n          continue;\n        }\n\n        this._httpHeaders[property] = value;\n      }\n\n      this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n          return;\n        }\n\n        this._setReadableStream(response);\n      };\n\n      this._request = null;\n\n      if (this._url.protocol === \"http:\") {\n        this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n      } else {\n        this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n      }\n\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n      });\n\n      this._request.end();\n    }\n\n  }\n\n  class PDFNodeStreamFsFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n      let path = decodeURIComponent(this._url.path);\n\n      if (fileUriRegex.test(this._url.href)) {\n        path = path.replace(/^\\//, \"\");\n      }\n\n      fs.lstat(path, (error, stat) => {\n        if (error) {\n          if (error.code === \"ENOENT\") {\n            error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n          }\n\n          this._storedError = error;\n\n          this._headersCapability.reject(error);\n\n          return;\n        }\n\n        this._contentLength = stat.size;\n\n        this._setReadableStream(fs.createReadStream(path));\n\n        this._headersCapability.resolve();\n      });\n    }\n\n  }\n\n  class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      let path = decodeURIComponent(this._url.path);\n\n      if (fileUriRegex.test(this._url.href)) {\n        path = path.replace(/^\\//, \"\");\n      }\n\n      this._setReadableStream(fs.createReadStream(path, {\n        start,\n        end: end - 1\n      }));\n    }\n\n  }\n\n  /***/ }),\n  /* 24 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.createResponseStatusError = createResponseStatusError;\n  exports.extractFilenameFromHeader = extractFilenameFromHeader;\n  exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n  exports.validateResponseStatus = validateResponseStatus;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _content_disposition = __w_pdfjs_require__(25);\n\n  function validateRangeRequestCapabilities({\n    getResponseHeader,\n    isHttp,\n    rangeChunkSize,\n    disableRange\n  }) {\n    (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n    const returnValues = {\n      allowRangeRequests: false,\n      suggestedLength: undefined\n    };\n    const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n    if (!Number.isInteger(length)) {\n      return returnValues;\n    }\n\n    returnValues.suggestedLength = length;\n\n    if (length <= 2 * rangeChunkSize) {\n      return returnValues;\n    }\n\n    if (disableRange || !isHttp) {\n      return returnValues;\n    }\n\n    if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n      return returnValues;\n    }\n\n    const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n    if (contentEncoding !== \"identity\") {\n      return returnValues;\n    }\n\n    returnValues.allowRangeRequests = true;\n    return returnValues;\n  }\n\n  function extractFilenameFromHeader(getResponseHeader) {\n    const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n    if (contentDisposition) {\n      let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n      if (filename.includes(\"%\")) {\n        try {\n          filename = decodeURIComponent(filename);\n        } catch (ex) {}\n      }\n\n      if (/\\.pdf$/i.test(filename)) {\n        return filename;\n      }\n    }\n\n    return null;\n  }\n\n  function createResponseStatusError(status, url) {\n    if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n      return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n    }\n\n    return new _util.UnexpectedResponseException(\"Unexpected server response (\" + status + ') while retrieving PDF \"' + url + '\".', status);\n  }\n\n  function validateResponseStatus(status) {\n    return status === 200 || status === 206;\n  }\n\n  /***/ }),\n  /* 25 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n  function getFilenameFromContentDispositionHeader(contentDisposition) {\n    let needsEncodingFixup = true;\n    let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = unescape(filename);\n      filename = rfc5987decode(filename);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n\n    tmp = rfc2231getparam(contentDisposition);\n\n    if (tmp) {\n      const filename = rfc2047decode(tmp);\n      return fixupEncoding(filename);\n    }\n\n    tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n\n    function toParamRegExp(attributePattern, flags) {\n      return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n    }\n\n    function textdecode(encoding, value) {\n      if (encoding) {\n        if (!/^[\\x00-\\xFF]+$/.test(value)) {\n          return value;\n        }\n\n        try {\n          const decoder = new TextDecoder(encoding, {\n            fatal: true\n          });\n          const bytes = Array.from(value, function (ch) {\n            return ch.charCodeAt(0) & 0xff;\n          });\n          value = decoder.decode(new Uint8Array(bytes));\n          needsEncodingFixup = false;\n        } catch (e) {\n          if (/^utf-?8$/i.test(encoding)) {\n            try {\n              value = decodeURIComponent(escape(value));\n              needsEncodingFixup = false;\n            } catch (err) {}\n          }\n        }\n      }\n\n      return value;\n    }\n\n    function fixupEncoding(value) {\n      if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n        value = textdecode(\"utf-8\", value);\n\n        if (needsEncodingFixup) {\n          value = textdecode(\"iso-8859-1\", value);\n        }\n      }\n\n      return value;\n    }\n\n    function rfc2231getparam(contentDispositionStr) {\n      const matches = [];\n      let match;\n      const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n      while ((match = iter.exec(contentDispositionStr)) !== null) {\n        let [, n, quot, part] = match;\n        n = parseInt(n, 10);\n\n        if (n in matches) {\n          if (n === 0) {\n            break;\n          }\n\n          continue;\n        }\n\n        matches[n] = [quot, part];\n      }\n\n      const parts = [];\n\n      for (let n = 0; n < matches.length; ++n) {\n        if (!(n in matches)) {\n          break;\n        }\n\n        let [quot, part] = matches[n];\n        part = rfc2616unquote(part);\n\n        if (quot) {\n          part = unescape(part);\n\n          if (n === 0) {\n            part = rfc5987decode(part);\n          }\n        }\n\n        parts.push(part);\n      }\n\n      return parts.join(\"\");\n    }\n\n    function rfc2616unquote(value) {\n      if (value.startsWith('\"')) {\n        const parts = value.slice(1).split('\\\\\"');\n\n        for (let i = 0; i < parts.length; ++i) {\n          const quotindex = parts[i].indexOf('\"');\n\n          if (quotindex !== -1) {\n            parts[i] = parts[i].slice(0, quotindex);\n            parts.length = i + 1;\n          }\n\n          parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n        }\n\n        value = parts.join('\"');\n      }\n\n      return value;\n    }\n\n    function rfc5987decode(extvalue) {\n      const encodingend = extvalue.indexOf(\"'\");\n\n      if (encodingend === -1) {\n        return extvalue;\n      }\n\n      const encoding = extvalue.slice(0, encodingend);\n      const langvalue = extvalue.slice(encodingend + 1);\n      const value = langvalue.replace(/^[^']*'/, \"\");\n      return textdecode(encoding, value);\n    }\n\n    function rfc2047decode(value) {\n      if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n        return value;\n      }\n\n      return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        }\n\n        try {\n          text = atob(text);\n        } catch (e) {}\n\n        return textdecode(charset, text);\n      });\n    }\n\n    return \"\";\n  }\n\n  /***/ }),\n  /* 26 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFNetworkStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n  const OK_RESPONSE = 200;\n  const PARTIAL_CONTENT_RESPONSE = 206;\n\n  function getArrayBuffer(xhr) {\n    const data = xhr.response;\n\n    if (typeof data !== \"string\") {\n      return data;\n    }\n\n    const array = (0, _util.stringToBytes)(data);\n    return array.buffer;\n  }\n\n  class NetworkManager {\n    constructor(url, args) {\n      this.url = url;\n      args = args || {};\n      this.isHttp = /^https?:/i.test(url);\n      this.httpHeaders = this.isHttp && args.httpHeaders || {};\n      this.withCredentials = args.withCredentials || false;\n\n      this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n      this.currXhrId = 0;\n      this.pendingRequests = Object.create(null);\n    }\n\n    requestRange(begin, end, listeners) {\n      const args = {\n        begin,\n        end\n      };\n\n      for (const prop in listeners) {\n        args[prop] = listeners[prop];\n      }\n\n      return this.request(args);\n    }\n\n    requestFull(listeners) {\n      return this.request(listeners);\n    }\n\n    request(args) {\n      const xhr = this.getXhr();\n      const xhrId = this.currXhrId++;\n      const pendingRequest = this.pendingRequests[xhrId] = {\n        xhr\n      };\n      xhr.open(\"GET\", this.url);\n      xhr.withCredentials = this.withCredentials;\n\n      for (const property in this.httpHeaders) {\n        const value = this.httpHeaders[property];\n\n        if (typeof value === \"undefined\") {\n          continue;\n        }\n\n        xhr.setRequestHeader(property, value);\n      }\n\n      if (this.isHttp && \"begin\" in args && \"end\" in args) {\n        xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n        pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n      } else {\n        pendingRequest.expectedStatus = OK_RESPONSE;\n      }\n\n      xhr.responseType = \"arraybuffer\";\n\n      if (args.onError) {\n        xhr.onerror = function (evt) {\n          args.onError(xhr.status);\n        };\n      }\n\n      xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n      xhr.onprogress = this.onProgress.bind(this, xhrId);\n      pendingRequest.onHeadersReceived = args.onHeadersReceived;\n      pendingRequest.onDone = args.onDone;\n      pendingRequest.onError = args.onError;\n      pendingRequest.onProgress = args.onProgress;\n      xhr.send(null);\n      return xhrId;\n    }\n\n    onProgress(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      if (pendingRequest.onProgress) {\n        pendingRequest.onProgress(evt);\n      }\n    }\n\n    onStateChange(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      const xhr = pendingRequest.xhr;\n\n      if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n        pendingRequest.onHeadersReceived();\n        delete pendingRequest.onHeadersReceived;\n      }\n\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (!(xhrId in this.pendingRequests)) {\n        return;\n      }\n\n      delete this.pendingRequests[xhrId];\n\n      if (xhr.status === 0 && this.isHttp) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      const xhrStatus = xhr.status || OK_RESPONSE;\n      const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n      if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      const chunk = getArrayBuffer(xhr);\n\n      if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n        const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n        const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n        pendingRequest.onDone({\n          begin: parseInt(matches[1], 10),\n          chunk\n        });\n      } else if (chunk) {\n        pendingRequest.onDone({\n          begin: 0,\n          chunk\n        });\n      } else if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n    }\n\n    getRequestXhr(xhrId) {\n      return this.pendingRequests[xhrId].xhr;\n    }\n\n    isPendingRequest(xhrId) {\n      return xhrId in this.pendingRequests;\n    }\n\n    abortRequest(xhrId) {\n      const xhr = this.pendingRequests[xhrId].xhr;\n      delete this.pendingRequests[xhrId];\n      xhr.abort();\n    }\n\n  }\n\n  class PDFNetworkStream {\n    constructor(source) {\n      this._source = source;\n      this._manager = new NetworkManager(source.url, {\n        httpHeaders: source.httpHeaders,\n        withCredentials: source.withCredentials\n      });\n      this._rangeChunkSize = source.rangeChunkSize;\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    _onRangeRequestReaderClosed(reader) {\n      const i = this._rangeRequestReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeRequestReaders.splice(i, 1);\n      }\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(begin, end) {\n      const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n      reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFNetworkStream = PDFNetworkStream;\n\n  class PDFNetworkStreamFullRequestReader {\n    constructor(manager, source) {\n      this._manager = manager;\n      const args = {\n        onHeadersReceived: this._onHeadersReceived.bind(this),\n        onDone: this._onDone.bind(this),\n        onError: this._onError.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._url = source.url;\n      this._fullRequestId = manager.requestFull(args);\n      this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n      this._disableRange = source.disableRange || false;\n      this._contentLength = source.length;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      this._isStreamingSupported = false;\n      this._isRangeSupported = false;\n      this._cachedChunks = [];\n      this._requests = [];\n      this._done = false;\n      this._storedError = undefined;\n      this._filename = null;\n      this.onProgress = null;\n    }\n\n    _onHeadersReceived() {\n      const fullRequestXhrId = this._fullRequestId;\n\n      const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n      const getResponseHeader = name => {\n        return fullRequestXhr.getResponseHeader(name);\n      };\n\n      const {\n        allowRangeRequests,\n        suggestedLength\n      } = (0, _network_utils.validateRangeRequestCapabilities)({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange\n      });\n\n      if (allowRangeRequests) {\n        this._isRangeSupported = true;\n      }\n\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n      if (this._isRangeSupported) {\n        this._manager.abortRequest(fullRequestXhrId);\n      }\n\n      this._headersReceivedCapability.resolve();\n    }\n\n    _onDone(args) {\n      if (args) {\n        if (this._requests.length > 0) {\n          const requestCapability = this._requests.shift();\n\n          requestCapability.resolve({\n            value: args.chunk,\n            done: false\n          });\n        } else {\n          this._cachedChunks.push(args.chunk);\n        }\n      }\n\n      this._done = true;\n\n      if (this._cachedChunks.length > 0) {\n        return;\n      }\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n\n    _onError(status) {\n      const url = this._url;\n      const exception = (0, _network_utils.createResponseStatusError)(status, url);\n      this._storedError = exception;\n\n      this._headersReceivedCapability.reject(exception);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.reject(exception);\n      });\n\n      this._requests = [];\n      this._cachedChunks = [];\n    }\n\n    _onProgress(data) {\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: data.loaded,\n          total: data.lengthComputable ? data.total : this._contentLength\n        });\n      }\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get headersReady() {\n      return this._headersReceivedCapability.promise;\n    }\n\n    async read() {\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      if (this._cachedChunks.length > 0) {\n        const chunk = this._cachedChunks.shift();\n\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._headersReceivedCapability.reject(reason);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._fullRequestId)) {\n        this._manager.abortRequest(this._fullRequestId);\n      }\n\n      this._fullRequestReader = null;\n    }\n\n  }\n\n  class PDFNetworkStreamRangeRequestReader {\n    constructor(manager, begin, end) {\n      this._manager = manager;\n      const args = {\n        onDone: this._onDone.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._requestId = manager.requestRange(begin, end, args);\n      this._requests = [];\n      this._queuedChunk = null;\n      this._done = false;\n      this.onProgress = null;\n      this.onClosed = null;\n    }\n\n    _close() {\n      if (this.onClosed) {\n        this.onClosed(this);\n      }\n    }\n\n    _onDone(data) {\n      const chunk = data.chunk;\n\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunk = chunk;\n      }\n\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._close();\n    }\n\n    _onProgress(evt) {\n      if (!this.isStreamingSupported && this.onProgress) {\n        this.onProgress({\n          loaded: evt.loaded\n        });\n      }\n    }\n\n    get isStreamingSupported() {\n      return false;\n    }\n\n    async read() {\n      if (this._queuedChunk !== null) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._requestId)) {\n        this._manager.abortRequest(this._requestId);\n      }\n\n      this._close();\n    }\n\n  }\n\n  /***/ }),\n  /* 27 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFFetchStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n\n  function createFetchOptions(headers, withCredentials, abortController) {\n    return {\n      method: \"GET\",\n      headers,\n      signal: abortController && abortController.signal, // lwf\n      mode: \"cors\",\n      credentials: withCredentials ? \"include\" : \"same-origin\",\n      redirect: \"follow\"\n    };\n  }\n\n  function createHeaders(httpHeaders) {\n    const headers = new Headers();\n\n    for (const property in httpHeaders) {\n      const value = httpHeaders[property];\n\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n\n      headers.append(property, value);\n    }\n\n    return headers;\n  }\n\n  class PDFFetchStream {\n    constructor(source) {\n      this.source = source;\n      this.isHttp = /^https?:/i.test(source.url);\n      this.httpHeaders = this.isHttp && source.httpHeaders || {};\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFFetchStreamReader(this);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFFetchStream = PDFFetchStream;\n\n  class PDFFetchStreamReader {\n    constructor(stream) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      this._filename = null;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._contentLength = source.length;\n      this._headersCapability = (0, _util.createPromiseCapability)();\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      if (typeof AbortController !== \"undefined\") {\n        this._abortController = new AbortController();\n      }\n\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      this._headers = createHeaders(this._stream.httpHeaders);\n      const url = source.url;\n      fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n        if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n          throw (0, _network_utils.createResponseStatusError)(response.status, url);\n        }\n\n        this._reader = response.body.getReader();\n\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = (0, _network_utils.validateRangeRequestCapabilities)({\n          getResponseHeader,\n          isHttp: this._stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n        }\n      }).catch(this._headersCapability.reject);\n      this.onProgress = null;\n    }\n\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._headersCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n\n      this._loaded += value.byteLength;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded,\n          total: this._contentLength\n        });\n      }\n\n      const buffer = new Uint8Array(value).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n\n  }\n\n  class PDFFetchStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      this._isStreamingSupported = !source.disableStream;\n\n      if (typeof AbortController !== \"undefined\") {\n        this._abortController = new AbortController();\n      }\n\n      this._headers = createHeaders(this._stream.httpHeaders);\n\n      this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n      const url = source.url;\n      fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n        if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n          throw (0, _network_utils.createResponseStatusError)(response.status, url);\n        }\n\n        this._readCapability.resolve();\n\n        this._reader = response.body.getReader();\n      }).catch(reason => {\n        if (reason && reason.name === \"AbortError\") { // lwf\n          return;\n        }\n\n        throw reason;\n      });\n      this.onProgress = null;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n\n      this._loaded += value.byteLength;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded\n        });\n      }\n\n      const buffer = new Uint8Array(value).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n\n  }\n/***/ })\n/******/  ]);\n/************************************************************************/\n/******/  // The module cache\n/******/  var __webpack_module_cache__ = {};\n/******/  \n/******/  // The require function\n/******/  function __w_pdfjs_require__(moduleId) {\n/******/    // Check if module is in cache\n/******/    if(__webpack_module_cache__[moduleId]) {\n/******/      return __webpack_module_cache__[moduleId].exports;\n/******/    }\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = __webpack_module_cache__[moduleId] = {\n/******/      // no module.id needed\n/******/      // no module.loaded needed\n/******/      exports: {}\n/******/    };\n/******/  \n/******/    // Execute the module function\n/******/    __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n/******/  \n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n/******/  \n/************************************************************************/\n/******/  // module exports must be returned from runtime so entry inlining is disabled\n/******/  // startup\n/******/  // Load entry module and return exports\n/******/  return __w_pdfjs_require__(0);\n/******/ })()\n;\n});\n\ndefine('skylark-pdfjs-display/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./pdf\"\r\n],function(skylark,pdfjs) {\r\n\treturn skylark.attach(\"intg.pdfjs.display\",pdfjs);\r\n});\ndefine('skylark-pdfjs-display', ['skylark-pdfjs-display/main'], function (main) { return main; });\n\n"]}