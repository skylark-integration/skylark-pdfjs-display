{"version":3,"sources":["skylark-pdfjs-display.js"],"names":["define","__webpack_modules__","__unused_webpack_module","exports","__w_pdfjs_require__","Object","defineProperty","value","enumerable","get","_display_utils","addLinkAttributes","getFilenameFromUrl","LinkTarget","loadScript","PDFDateString","RenderingCancelledException","_api","build","getDocument","LoopbackPort","PDFDataRangeTransport","PDFWorker","version","_util","CMapCompressionType","createObjectURL","createPromiseCapability","createValidAbsoluteUrl","InvalidPDFException","MissingPDFException","OPS","PasswordResponses","PermissionFlag","removeNullCharacters","shadow","UnexpectedResponseException","UNSUPPORTED_FEATURES","Util","VerbosityLevel","_annotation_layer","AnnotationLayer","_api_compatibility","apiCompatibilityParams","_worker_options","GlobalWorkerOptions","_text_layer","renderTextLayer","_svg","SVGGraphics","isNodeJS","PDFNodeStream","setPDFNetworkStreamFactory","params","PDFNetworkStream","PDFFetchStream","isFetchSupported","isValidFetchUrl","url","link","target","rel","enabled","assert","urlNullRemoved","href","title","onclick","targetStr","NONE","SELF","BLANK","PARENT","TOP","DEFAULT_LINK_REL","deprecated","details","console","log","anchor","indexOf","query","end","Math","min","length","substring","lastIndexOf","src","removeScriptElement","Promise","resolve","reject","script","document","createElement","onload","evt","remove","onerror","Error","head","documentElement","appendChild","StatTimer","PageViewport","DOMSVGFactory","DOMCMapReaderFactory","DOMCanvasFactory","BaseCMapReaderFactory","BaseCanvasFactory","SVG_NS","[object Object]","this","constructor","unreachable","width","height","canvasAndContext","canvas","context","ownerDocument","globalThis","super","_document","getContext","baseUrl","isCompressed","name","compressionType","BINARY","_fetchData","catch","reason","baseURI","fetch","then","async","response","ok","statusText","cMapData","Uint8Array","arrayBuffer","stringToBytes","text","request","XMLHttpRequest","open","responseType","onreadystatechange","readyState","DONE","status","responseText","send","svg","createElementNS","setAttribute","type","viewBox","scale","rotation","offsetX","offsetY","dontFlip","centerX","centerY","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","offsetCanvasY","abs","transform","slice","x","y","applyTransform","rect","topLeft","bottomRight","applyInverseTransform","BaseException","msg","Response","prototype","ReadableStream","protocol","URL","ex","pdfDateStringRegex","started","create","times","warn","Date","now","push","start","outBuf","longest","time","duration","padEnd","join","input","isString","RegExp","matches","exec","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","UTC","arrayByteLength","arraysToBytes","arr","resultLength","i","pos","data","item","itemLength","byteLength","set","bytesToString","bytes","undefined","String","fromCharCode","apply","strBuf","chunkEnd","chunk","subarray","capability","isSettled","promise","absoluteUrl","_isValidProtocol","encodeToXmlString","str","buffer","ii","char","codePointAt","entity","XMLEntities","toString","toUpperCase","escapeString","replace","match","getModificationDate","date","getUTCFullYear","getUTCMonth","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getVerbosityLevel","verbosity","info","INFOS","isArrayBuffer","v","isArrayEqual","arr1","arr2","every","element","index","isAscii","test","isBool","isNum","isSameOrigin","otherUrl","base","origin","e","other","objectFromEntries","iterable","assign","fromEntries","objectSize","obj","keys","NullCharactersRegExp","setVerbosityLevel","level","Number","isInteger","string32","stringToPDFString","charCodeAt","code","PDFStringTranslateTable","charAt","stringToUTF16BEString","buf","stringToUTF8String","decodeURIComponent","escape","utf8StringToString","unescape","encodeURIComponent","UnknownErrorException","TextRenderingMode","StreamType","PasswordException","PageActionEventType","IsLittleEndianCached","IsEvalSupportedCached","ImageKind","IDENTITY_MATRIX","FormatError","FontType","FONT_IDENTITY_MATRIX","DocumentActionEventType","AnnotationType","AnnotationStateModelType","AnnotationReviewState","AnnotationReplyType","AnnotationMarkedState","AnnotationFlag","AnnotationFieldFlag","AnnotationBorderStyleType","AnnotationActionEventType","AbortException","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","WC","WS","DS","WP","DP","O","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","unknown","forms","javaScript","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontGetPath","errorMarkedContent","NEED_PASSWORD","INCORRECT_PASSWORD","cond","prop","configurable","writable","message","buffer8","Uint32Array","isLittleEndian","Function","isEvalSupported","hexNumbers","Array","map","n","r","g","b","m1","m2","p","m","xt","yt","d","p1","p2","p3","p4","max","transpose","a","c","first","sqrt","sx","sy","rect1","rect2","compare","orderedX","sort","orderedY","result","normalizeRect","digits","contentType","forceDataSchema","blob","Blob","b1","b2","b3","d1","d2","d3","d4","60","62","38","34","39","__unused_webpack_exports","process","versions","nw","electron","PDFPageProxy","PDFDocumentProxy","DefaultCMapReaderFactory","DefaultCanvasFactory","_font_loader","_node_utils","_annotation_storage","_canvas","_is_node","_message_handler","_metadata","_optional_content_config","_transport_stream","_webgl","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","NodeCanvasFactory","NodeCMapReaderFactory","createPDFNetworkStream","pdfNetworkStreamFactory","task","PDFDocumentLoadingTask","source","range","rangeTransport","worker","key","window","pdfBytes","isNaN","location","rangeChunkSize","CMapReaderFactory","ignoreErrors","stopAtErrors","fontExtraProperties","pdfBug","maxImageSize","disableFontFace","disableRange","disableStream","disableAutoFetch","workerParams","port","workerPort","fromPort","_worker","docId","destroyed","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","PDFDataTransportStream","initialData","progressiveDone","httpHeaders","withCredentials","all","workerId","messageHandler","MessageHandler","postMessageTransfers","transport","WorkerTransport","_transport","_capability","pdfDataRangeTransport","sendWithPromise","apiVersion","password","docBaseUrl","nextDocumentId","onPassword","onProgress","onUnsupportedFeature","transportDestroyed","destroy","_rangeListeners","_progressListeners","_progressiveReadListeners","_progressiveDoneListeners","_readyCapability","listener","begin","loaded","total","pdfInfo","_pdfInfo","annotationStorage","AnnotationStorage","numPages","fingerprint","pageNumber","getPage","ref","getPageIndex","getDestinations","id","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getDocJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","downloadInfoCapability","getStats","startCleanup","loadingTask","loadingParams","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pageIndex","pageInfo","_pageIndex","_pageInfo","_ownerDocument","_stats","_pdfBug","commonObjs","objs","PDFObjects","cleanupAfterRender","pendingCleanup","_intentStates","Map","rotate","userUnit","view","intent","annotationsPromise","annotationsIntent","getAnnotations","_jsActionsPromise","getPageJSActions","canvasContext","viewport","enableWebGL","renderInteractiveForms","imageLayer","canvasFactory","background","optionalContentConfigPromise","renderingIntent","intentState","streamReaderCancelTimeout","clearTimeout","canvasFactoryInstance","webGLContext","WebGLContext","enable","displayReadyCapability","operatorList","fnArray","argsArray","lastChunk","_pumpOperatorList","getAll","complete","error","renderTasks","internalRenderTask","splice","_tryCleanup","_abortOperatorList","timeEnd","InternalRenderTask","callback","useRequestAnimationFrame","renderTask","transparency","optionalContentConfig","initializeGraphics","operatorListChanged","opListTask","opListReadCapability","normalizeWhitespace","disableCombineTextItems","sendWithStream","combineTextItems","highWaterMark","size","textContent","items","readableStream","streamTextContent","reader","getReader","styles","pump","read","done","pageCache","waitOn","force","completed","cancel","clear","resetStats","values","operatorListChunk","args","streamReader","_renderPageChunk","setTimeout","curIntentState","delete","cleanup","stats","defer","_listeners","_defer","_deferred","transfers","forEach","call","cloned","WeakMap","cloneValue","has","includes","byteOffset","isArray","desc","getOwnPropertyDescriptor","getPrototypeOf","hasOwnProperty","PDFWorkerClosure","pdfWorkerPorts","isWorkerDisabled","fallbackWorkerSrc","nextFakeWorkerId","fakeWorkerCapability","require","pdfjsFilePath","currentScript","getWorkerSrc","workerSrc","getMainThreadWorkerMessageHandler","mainWorkerMessageHandler","pdfjsWorker","WorkerMessageHandler","setupFakeWorkerGlobal","loader","eval","createCDNWrapper","wrapper","_port","_webWorker","_messageHandler","_initializeFromPort","_initialize","on","Worker","terminateEarly","removeEventListener","onWorkerError","terminate","_setupFakeWorker","addEventListener","supportTransfers","sendTest","testObj","workerHandler","setup","fontLoader","FontLoader","_onUnsupportedFeature","bind","_params","cMapUrl","cMapPacked","destroyCapability","_passwordCapability","_networkStream","_fullReader","_lastProgress","pagePromises","setupMessageHandler","loadingTaskSettled","settled","page","_destroy","terminated","annotationStorageResetModified","pdfDocument","resetModified","_hasJSActionsPromise","cancelAllRequests","sink","getFullReader","onPull","close","enqueue","onCancel","ready","readyReason","headersCapability","fullReader","headersReady","isStreamingSupported","isRangeSupported","contentLength","rangeReader","getRangeReader","_numPages","exception","updatePassword","_startRenderPage","exportedData","exportedError","fontRegistry","FontInspector","fontAdded","FontFaceObject","finally","imageData","pageProxy","MAX_IMAGE_SIZE_TO_STORE","fetched","builtInCMap","featureId","filename","results","OptionalContentConfig","metadata","Metadata","contentDispositionFilename","cleanupSuccessful","_objs","objId","resolved","_ensureObj","RenderTask","_internalRenderTask","onContinue","canvasInRendering","WeakSet","operatorListIdx","running","graphicsReadyCallback","graphicsReady","_useRequestAnimationFrame","cancelled","_continueBound","_continue","_scheduleNextBound","_scheduleNext","_nextBound","_next","add","StepperManager","stepper","init","nextBreakPoint","getNextBreakPoint","gfx","CanvasGraphics","beginDrawing","endDrawing","updateOperatorList","requestAnimationFrame","executeOperatorList","BaseFontLoader","nativeFontFaces","styleElement","nativeFontFace","fonts","rule","getElementsByTagName","styleSheet","sheet","insertRule","cssRules","attached","missingFile","isFontLoadingAPISupported","createNativeFontFace","addNativeFontFace","family","createFontFaceRule","isSyncFontLoadingSupported","_queueLoadingCallback","_prepareFontLoadEvent","_loadTestFont","rules","fontsToLoad","loadingContext","requests","nextRequestId","loadTestFontId","supported","navigator","userAgent","otherRequest","shift","atob","int32","offset","spliceString","s","insert","chunk1","chunk2","ctx","called","checksum","btoa","names","loadedName","div","style","visibility","position","top","left","span","fontFamily","body","isFontReady","fillText","getImageData","removeChild","translatedData","compiledGlyphs","FontFace","registerFont","mimetype","character","cmds","current","js","cmd","Canvas","createCanvas","fs","readFile","_storage","_modified","onSetModified","onResetModified","defaultValue","modified","entry","val","entries","_setModified","compatibilityParams","freeze","_pattern_helper","FULL_CHUNK_HEIGHT","addContextCurrentTransform","mozCurrentTransform","_originalSave","_originalRestore","_originalRotate","_originalScale","_originalTranslate","translate","_originalTransform","_originalSetTransform","setTransform","_transformMatrix","_transformStack","f","ad_bc","bc_ad","old","prev","pop","angle","cosValue","cos","sinValue","sin","CachedCanvases","cache","getCanvas","trackTransform","canvasEntry","reset","CanvasExtraState","alphaIsShape","fontSize","fontSizeScale","textMatrix","textMatrixScale","fontMatrix","leading","lineX","lineY","charSpacing","wordSpacing","textHScale","textRenderingMode","textRise","fillColor","strokeColor","patternFill","fillAlpha","strokeAlpha","lineWidth","activeSMask","resumeSMaskCtx","transferMaps","clone","setCurrentPoint","canvasCtx","stateStack","pendingClip","pendingEOFill","res","xobjs","groupStack","processingType3","baseTransform","baseTransformStack","groupLevel","smaskStack","smaskCounter","tempSMask","contentVisible","markedContentStack","cachedCanvases","_cachedGetSinglePixelWidth","putBinaryImageData","imgData","ImageData","putImageData","partialChunkHeight","fullChunks","totalChunks","chunkImgData","createImageData","destPos","srcPos","dest","j","thisChunkHeight","elemsInThisChunk","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","kind","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","srcDiff","k","kEnd","kEndUnrolled","mask","srcByte","hasTransferMaps","putBinaryImageMask","elem","copyCtxState","sourceCtx","destCtx","properties","property","setLineDash","getLineDash","lineDashOffset","resetCtxToDefault","strokeStyle","fillStyle","fillRule","globalAlpha","lineCap","lineJoin","miterLimit","globalCompositeOperation","composeSMaskBackdrop","r0","g0","b0","alpha","alpha_","composeSMaskAlpha","maskData","layerData","transferMap","composeSMaskLuminosity","composeSMask","layerCtx","maskCtx","scaleX","scaleY","backdrop","isEnabled","composed","layer","subtype","drawImage","hasBackdrop","composeFn","chunkSize","ceil","row","chunkHeight","genericComposeSMask","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","fillRect","transparentCanvas","compositeCtx","_combinedScaleFactor","hypot","beginLayout","executionStartIdx","continueCallback","argsArrayLen","chunkOperations","endTime","steps","fnId","breakIt","depObjId","objsPool","startsWith","endLayout","limit","dashArray","dashPhase","flatness","states","state","suspendSMaskGroup","endSMaskGroup","beginSMaskGroup","drawnWidth","drawnHeight","cacheId","scratchCanvas","currentCtx","currentTransform","groupCtx","startTransformInverse","mozCurrentTransformInverse","deltaTransform","clearRect","resumeSMaskGroup","ops","xw","yh","bezierCurveTo","consumePath","getPattern","singularValueDecompose2dScale","getSinglePixelWidth","scaledLineWidth","resetTransform","round","isPatternFill","needRestore","paths","pendingTextPaths","beginPath","path","addToPath","spacing","fontRefName","fontObj","fontDirection","isType3Font","bold","italic","typeface","fallbackName","browserFontSize","mode","rise","patternTransform","resetLineWidthToOne","fillStrokeMode","isAddToPathSet","getPathGenerator","strokeText","isFontSubpixelAAEnabled","glyphs","showType3Text","glyphsLength","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","glyph","restoreNeeded","isSpace","fontChar","accent","scaledX","scaledY","charWidth","vmetric","vx","vy","remeasure","measuredWidth","measureText","characterScaleX","isInFont","paintChar","scaledAccentX","scaledAccentY","isTextInvisible","spacingLength","charProcOperatorList","operatorListId","transformed","xWidth","yWidth","llx","lly","urx","ury","getColorN_Pattern","IR","color","canvasGraphicsFactory","createCanvasGraphics","TilingPattern","getShadingPatternFromIR","arguments","makeHexColor","patternIR","inv","bl","br","ul","ur","x0","y0","x1","y1","matrix","bbox","group","isolated","knockout","bounds","getAxialAlignedBoundingBox","canvasBounds","intersect","floor","imageSmoothingEnabled","mozImageSmoothingEnabled","img","compiled","width1","j0","points","POINT_TYPES","lineSize","data0","count","sum","Int32Array","outlines","coords","p0","step","pp","kk","o","l","ll","compileType3Glyph","maskCanvas","skewX","skewY","positions","images","image","w","h","widthScale","imgToPaint","tmpCanvas","tmpCtx","heightScale","HTMLElement","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","getCanvasPosition","appendImage","tag","visible","isVisible","isContentVisible","absDet","sqNorm1","sqNorm2","pixelHeight","EPSILON","op","raw","shadingIR","ShadingIRs","fromIR","applyBoundingBox","Path2D","region","RadialAxial","colorStops","r1","grad","createLinearGradient","createRadialGradient","addColorStop","createMeshCanvas","drawTriangle","c1","c2","c3","colors","rowSize","tmp","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","drawFigure","figure","ps","cs","verticesPerRow","rows","cols","q","combinesScale","figures","backgroundColor","boundsWidth","boundsHeight","paddedWidth","BORDER_SIZE","paddedHeight","drawFigures","Mesh","owner","matrixScale","temporaryPatternCanvas","createPattern","Dummy","PaintType","COLORED","UNCOLORED","xstep","ystep","paintType","tilingType","createPatternCanvas","curMatrixScale","combinedScale","dimx","getSizeAndScale","dimy","graphics","setFillAndStrokeStyleToContext","clipBbox","realOutputSize","maxSize","bboxWidth","bboxHeight","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","event","stream","_processStreamMessage","action","cbSourceName","cbTargetName","postMessage","_createStreamSink","actionName","handler","ah","_postMessage","queueingStrategy","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","cancelCapability","self","streamSink","isCancelled","lastDesiredSize","sinkCapability","success","_deleteStreamController","allSettled","_xml_parser","_repair","parser","SimpleXMLParser","lowerCaseName","xmlDocument","parseFromString","_metadataMap","_parse","_data","codes","chars","nodeName","childNodes","filter","node","hasChildNodes","seqNode","authors","_getSequence","trim","rdf","firstChild","nextSibling","_getCreators","SimpleDOMNode","XMLParserErrorCode","NoError","EndOfDocument","UnterminatedCdat","UnterminatedXmlDeclaration","UnterminatedDoctypeDeclaration","UnterminatedComment","MalformedElement","OutOfMemory","UnterminatedAttributeValue","UnterminatedElement","ElementNeverBegun","isWhitespace","ch","XMLParserBase","fromCodePoint","onResolveEntity","attributes","skipWs","attrName","attrValue","attrEndChar","attrEndIndex","_resolveEntities","parsed","attrStart","ch2","onError","onEndElement","pi","_parseProcessingInstruction","onPi","onComment","onCdata","q2","complexDoctype","doctypeContent","onDoctype","content","_parseContent","onBeginElement","onText","isEmpty","nodeValue","parentNode","child","component","stack","parent","siblingPos","searchNode","currentPos","newPos","attribute","dump","hasAttributes","_currentFragment","_stack","_errorCode","_hasAttributes","_lowerCaseName","parseXml","isWhitespaceString","toLowerCase","lastElement","OptionalContentGroup","creator","_order","_groups","order","groups","baseState","off","expression","policy","ids","from","_queuedChunks","_progressiveDone","_pdfDataRangeTransport","_isStreamingSupported","_isRangeSupported","_contentLength","_fullRequestReader","_rangeReaders","addRangeListener","_onReceiveData","addProgressListener","_onProgress","addProgressiveReadListener","addProgressiveDoneListener","_onProgressiveDone","transportReady","_enqueue","found","some","_begin","_progressiveDataLength","_loaded","firstReader","queuedChunks","PDFDataTransportStreamReader","PDFDataTransportStreamRangeReader","requestDataRange","readers","abort","_stream","_done","_filename","_requests","_headersReady","requestCapability","_end","_queuedChunk","requestsCapability","_removeRangeReader","_enabled","WebGLUtils","tryInitGL","loadShader","gl","shaderType","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errorMsg","getShaderInfoLog","createVertexShader","VERTEX_SHADER","createFragmentShader","FRAGMENT_SHADER","createProgram","shaders","program","attachShader","linkProgram","linked","getProgramParameter","LINK_STATUS","getProgramInfoLog","createTexture","textureId","activeTexture","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","currentGL","currentCanvas","generateGL","premultipliedalpha","smaskVertexShaderCode","smaskFragmentShaderCode","smaskCache","figuresVertexShaderCode","figuresFragmentShaderCode","figuresCache","vertexShader","fragmentShader","useProgram","resolutionLocation","getUniformLocation","positionLocation","getAttribLocation","backdropLocation","subtypeLocation","texCoordLocation","texLayerLocation","texMaskLocation","texCoordBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform1i","initSmaskGL","drawingBufferWidth","drawingBufferHeight","uniform2f","uniform4f","TEXTURE0","maskTexture","TEXTURE1","clearColor","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","COLOR_BUFFER_BIT","drawArrays","TRIANGLES","flush","deleteTexture","deleteBuffer","scaleLocation","offsetLocation","colorLocation","initFiguresGL","coordsMap","colorsMap","pIndex","cIndex","col","jj","coordsBuffer","colorsBuffer","_scripting_utils","AnnotationElementFactory","parameters","annotationType","LinkAnnotationElement","TextAnnotationElement","fieldType","TextWidgetAnnotationElement","radioButton","RadioButtonWidgetAnnotationElement","checkBox","CheckboxWidgetAnnotationElement","PushButtonWidgetAnnotationElement","ChoiceWidgetAnnotationElement","WidgetAnnotationElement","PopupAnnotationElement","FreeTextAnnotationElement","LineAnnotationElement","SquareAnnotationElement","CircleAnnotationElement","PolylineAnnotationElement","CaretAnnotationElement","InkAnnotationElement","PolygonAnnotationElement","HighlightAnnotationElement","UnderlineAnnotationElement","SquigglyAnnotationElement","StrikeOutAnnotationElement","StampAnnotationElement","FileAttachmentAnnotationElement","AnnotationElement","isRenderable","ignoreBorder","createQuadrilaterals","linkService","downloadManager","imageResourcesPath","svgFactory","enableScripting","_mouseState","mouseState","container","_createContainer","quadrilaterals","_createQuadrilaterals","transformOrigin","borderStyle","borderWidth","horizontalRadius","horizontalCornerRadius","verticalRadius","verticalCornerRadius","radius","borderRadius","borderBottomStyle","borderColor","quadPoints","savedRect","quadPoint","trigger","popupElement","PopupElement","modificationDate","contents","hideWrapper","popup","render","className","quadrilateral","isTooltipOnly","actions","Action","newWindow","externalLinkTarget","externalLinkRel","externalLinkEnabled","_bindNamedAction","_bindLink","_bindJSAction","_renderQuadrilaterals","linkElement","cloneNode","destination","getDestinationHash","goToDestination","getAnchorUrl","executeNamedAction","jsName","eventBus","dispatch","detail","hasPopup","alt","dataset","l10nId","l10nArgs","JSON","stringify","_createPopup","alternativeText","platform","ctrlKey","metaKey","baseName","eventName","valueGetter","shiftKey","modifier","_getKeyModifier","checked","getter","_setEventListener","hasAppearance","fieldValue","storage","getOrCreateValue","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","multiLine","setValue","blurListener","setSelectionRange","valueAsString","activeElement","focus","preventScroll","userName","hidden","disabled","editable","selStart","selEnd","selRange","ColorConverters","commitKey","willCommit","selectionStart","selectionEnd","_blurListener","isDown","change","_setEventListeners","readOnly","fieldName","maxLen","maxLength","comb","fieldWidth","combWidth","classList","letterSpacing","verticalAlign","display","_setTextStyle","TEXT_ALIGNMENT","fontColor","defaultAppearanceData","textAlignment","textAlign","checkbox","getElementsByName","getAttribute","buttonValue","radio","radioId","selectElement","combo","options","multiSelect","multiple","option","optionElement","displayValue","exportValue","getValue","selectedIndex","changeEx","keyDown","parentType","selector","parentId","parentElements","querySelectorAll","parentRect","popupLeft","popupTop","pinned","hideElement","dateObject","toDateObject","toLocaleDateString","toLocaleTimeString","_formatContents","_toggle","_show","_hide","lines","split","line","createTextNode","pin","hasAttribute","removeAttribute","zIndex","unpin","lineCoordinates","append","square","circle","containerClassName","svgElementName","coordinate","vertices","polyline","inkList","inkLists","file","_download","downloadData","sortedAnnotations","popupAnnotations","annotations","rendered","renderedElement","prepend","elements","makeColorComp","G","R","B","components","RGB_HTML","CMYK_RGB","MAX_TEXT_DIVS_TO_RENDER","NonWhitespaceRegexp","appendText","geom","textDiv","textDivProperties","canvasWidth","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","_textDivs","_textDivProperties","tx","_viewport","atan2","fontName","fontHeight","fontAscent","ascent","descent","_fontInspectorEnabled","shouldScaleText","absScaleX","absScaleY","_textContentStream","_layoutText","_enhanceTextSelection","angleCos","angleSin","divWidth","divHeight","_bounds","right","bottom","_canceled","textDivs","textDivsLength","_renderingDone","findPositiveMin","ts","t","expand","expanded","boxes","box","x1New","x2New","expandBoundsLTR","expandBounds","divProperties","Float64Array","boxScale","fakeBoundary","Infinity","horizon","boundary","horizonPart","affectedBoundary","maxXNew","xNew","changedHorizon","lastBoundary","useBoundary","unshift","used","concat","TextLayerRenderTask","textContentStream","textContentItemsStr","enhanceTextSelection","_textContent","_container","_textContentItemsStr","_reader","_layoutTextLastFontSize","_layoutTextLastFontFamily","_layoutTextCtx","_renderTimer","styleCache","len","_render","timeout","mozOpaque","textItems","textStyles","_processItems","expandTextDivs","expandDivs","transformBuf","paddingBuf","divProps","padding","renderParameters","SVG_DEFAULTS","fontStyle","fontWeight","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","writePngChunk","crc","crc32","deflateSyncUncompressed","literals","deflateBlocks","idat","adler","adler32","encode","isMask","bitDepth","colorType","offsetLiterals","offsetBytes","ihdr","Buffer","output","deflateSync","pngLength","SVGExtraState","dependencies","activeClipUrl","clipGroup","maskId","pf","toFixed","pm","acos","clipCount","maskCount","shadingCount","transformMatrix","transformStack","extraStack","embedFonts","embeddedFonts","cssStyle","_operatorIdMapping","tgrp","executeOpTree","svgElement","loadDependencies","convertOpList","operatorIdMapping","opList","fn","opTree","opListElement","opListToTree","opTreeElement","lineMatrix","xcoords","ycoords","tspan","setAttributeNS","txtElement","txtgrp","lineWidthScale","_setStrokeAttributes","_ensureTransformGroup","defs","addFontStyle","_makeColorN_Pattern","inverseTransform","_makeShadingPattern","_makeTilingPattern","tilingId","tx0","ty0","tx1","ty1","xscale","yscale","txstep","tystep","tiling","shadingId","gradient","point0","point1","focalPoint","circlePoint","focalRadius","circleRadius","colorStop","stop","getAttributeNS","clipId","clipPath","clipElement","setStrokeAlpha","setFillAlpha","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","_network_utils","http","https","fileUriRegex","sourceUrl","parsedUrl","parse","host","parseUrl","isHttp","isFsUrl","_rangeRequestReaders","PDFNodeStreamFsFullReader","PDFNodeStreamFullReader","PDFNodeStreamFsRangeReader","PDFNodeStreamRangeReader","BaseFullReader","_url","_storedError","_disableRange","_rangeChunkSize","_readableStream","_readCapability","_headersCapability","_error","BaseRangeReader","createRequestOptions","headers","auth","hostname","method","handleResponse","statusCode","_setReadableStream","getResponseHeader","allowRangeRequests","suggestedLength","validateRangeRequestCapabilities","extractFilenameFromHeader","_request","_httpHeaders","Range","lstat","stat","createReadStream","createResponseStatusError","contentDisposition","_content_disposition","getFilenameFromContentDispositionHeader","returnValues","validateResponseStatus","needsEncodingFixup","toParamRegExp","rfc2616unquote","fixupEncoding","rfc2047decode","rfc5987decode","contentDispositionStr","iter","quot","part","parts","rfc2231getparam","attributePattern","flags","textdecode","encoding","decoder","TextDecoder","fatal","decode","err","quotindex","extvalue","encodingend","langvalue","charset","hex","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","NetworkManager","getXhr","currXhrId","pendingRequests","listeners","xhr","xhrId","pendingRequest","setRequestHeader","expectedStatus","onStateChange","onprogress","onHeadersReceived","onDone","xhrStatus","ok_response_on_range_request","getArrayBuffer","rangeHeader","_source","_manager","PDFNetworkStreamFullRequestReader","PDFNetworkStreamRangeRequestReader","onClosed","_onRangeRequestReaderClosed","manager","_onHeadersReceived","_onDone","_onError","_fullRequestId","requestFull","_headersReceivedCapability","_cachedChunks","fullRequestXhrId","fullRequestXhr","getRequestXhr","abortRequest","lengthComputable","isPendingRequest","_requestId","requestRange","_close","createFetchOptions","abortController","signal","credentials","redirect","createHeaders","Headers","PDFFetchStreamReader","PDFFetchStreamRangeReader","_withCredentials","AbortController","_abortController","_headers","__webpack_module_cache__","moduleId","module","skylark","pdfjs","attach","main"],"mappings":"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","file":"../skylark-pdfjs-display.js","sourcesContent":["define('skylark-pdfjs-display/pdf',[\n],function(){\nreturn /******/ (() => { // webpackBootstrap\n/******/  \"use strict\";\n/******/  var __webpack_modules__ = ([\n/* 0 */\n/***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  Object.defineProperty(exports, \"addLinkAttributes\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.addLinkAttributes;\n    }\n  }));\n  Object.defineProperty(exports, \"getFilenameFromUrl\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.getFilenameFromUrl;\n    }\n  }));\n  Object.defineProperty(exports, \"LinkTarget\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.LinkTarget;\n    }\n  }));\n  Object.defineProperty(exports, \"loadScript\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.loadScript;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFDateString\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.PDFDateString;\n    }\n  }));\n  Object.defineProperty(exports, \"RenderingCancelledException\", ({\n    enumerable: true,\n    get: function () {\n      return _display_utils.RenderingCancelledException;\n    }\n  }));\n  Object.defineProperty(exports, \"build\", ({\n    enumerable: true,\n    get: function () {\n      return _api.build;\n    }\n  }));\n  Object.defineProperty(exports, \"getDocument\", ({\n    enumerable: true,\n    get: function () {\n      return _api.getDocument;\n    }\n  }));\n  Object.defineProperty(exports, \"LoopbackPort\", ({\n    enumerable: true,\n    get: function () {\n      return _api.LoopbackPort;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFDataRangeTransport\", ({\n    enumerable: true,\n    get: function () {\n      return _api.PDFDataRangeTransport;\n    }\n  }));\n  Object.defineProperty(exports, \"PDFWorker\", ({\n    enumerable: true,\n    get: function () {\n      return _api.PDFWorker;\n    }\n  }));\n  Object.defineProperty(exports, \"version\", ({\n    enumerable: true,\n    get: function () {\n      return _api.version;\n    }\n  }));\n  Object.defineProperty(exports, \"CMapCompressionType\", ({\n    enumerable: true,\n    get: function () {\n      return _util.CMapCompressionType;\n    }\n  }));\n  Object.defineProperty(exports, \"createObjectURL\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createObjectURL;\n    }\n  }));\n  Object.defineProperty(exports, \"createPromiseCapability\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createPromiseCapability;\n    }\n  }));\n  Object.defineProperty(exports, \"createValidAbsoluteUrl\", ({\n    enumerable: true,\n    get: function () {\n      return _util.createValidAbsoluteUrl;\n    }\n  }));\n  Object.defineProperty(exports, \"InvalidPDFException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.InvalidPDFException;\n    }\n  }));\n  Object.defineProperty(exports, \"MissingPDFException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.MissingPDFException;\n    }\n  }));\n  Object.defineProperty(exports, \"OPS\", ({\n    enumerable: true,\n    get: function () {\n      return _util.OPS;\n    }\n  }));\n  Object.defineProperty(exports, \"PasswordResponses\", ({\n    enumerable: true,\n    get: function () {\n      return _util.PasswordResponses;\n    }\n  }));\n  Object.defineProperty(exports, \"PermissionFlag\", ({\n    enumerable: true,\n    get: function () {\n      return _util.PermissionFlag;\n    }\n  }));\n  Object.defineProperty(exports, \"removeNullCharacters\", ({\n    enumerable: true,\n    get: function () {\n      return _util.removeNullCharacters;\n    }\n  }));\n  Object.defineProperty(exports, \"shadow\", ({\n    enumerable: true,\n    get: function () {\n      return _util.shadow;\n    }\n  }));\n  Object.defineProperty(exports, \"UnexpectedResponseException\", ({\n    enumerable: true,\n    get: function () {\n      return _util.UnexpectedResponseException;\n    }\n  }));\n  Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", ({\n    enumerable: true,\n    get: function () {\n      return _util.UNSUPPORTED_FEATURES;\n    }\n  }));\n  Object.defineProperty(exports, \"Util\", ({\n    enumerable: true,\n    get: function () {\n      return _util.Util;\n    }\n  }));\n  Object.defineProperty(exports, \"VerbosityLevel\", ({\n    enumerable: true,\n    get: function () {\n      return _util.VerbosityLevel;\n    }\n  }));\n  Object.defineProperty(exports, \"AnnotationLayer\", ({\n    enumerable: true,\n    get: function () {\n      return _annotation_layer.AnnotationLayer;\n    }\n  }));\n  Object.defineProperty(exports, \"apiCompatibilityParams\", ({\n    enumerable: true,\n    get: function () {\n      return _api_compatibility.apiCompatibilityParams;\n    }\n  }));\n  Object.defineProperty(exports, \"GlobalWorkerOptions\", ({\n    enumerable: true,\n    get: function () {\n      return _worker_options.GlobalWorkerOptions;\n    }\n  }));\n  Object.defineProperty(exports, \"renderTextLayer\", ({\n    enumerable: true,\n    get: function () {\n      return _text_layer.renderTextLayer;\n    }\n  }));\n  Object.defineProperty(exports, \"SVGGraphics\", ({\n    enumerable: true,\n    get: function () {\n      return _svg.SVGGraphics;\n    }\n  }));\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _api = __w_pdfjs_require__(5);\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _annotation_layer = __w_pdfjs_require__(19);\n\n  var _api_compatibility = __w_pdfjs_require__(9);\n\n  var _worker_options = __w_pdfjs_require__(12);\n\n  var _text_layer = __w_pdfjs_require__(21);\n\n  var _svg = __w_pdfjs_require__(22);\n\n  const pdfjsVersion = '2.7.570';\n  const pdfjsBuild = 'f2c7338b0';\n  {\n    const {\n      isNodeJS\n    } = __w_pdfjs_require__(4);\n\n    if (isNodeJS) {\n      const PDFNodeStream = __w_pdfjs_require__(23).PDFNodeStream;\n\n      (0, _api.setPDFNetworkStreamFactory)(params => {\n        return new PDFNodeStream(params);\n      });\n    } else {\n      const PDFNetworkStream = __w_pdfjs_require__(26).PDFNetworkStream;\n\n      let PDFFetchStream;\n\n      if ((0, _display_utils.isFetchSupported)()) {\n        PDFFetchStream = __w_pdfjs_require__(27).PDFFetchStream;\n      }\n\n      (0, _api.setPDFNetworkStreamFactory)(params => {\n        if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {\n          return new PDFFetchStream(params);\n        }\n\n        return new PDFNetworkStream(params);\n      });\n    }\n  }\n\n  /***/ }),\n  /* 1 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.addLinkAttributes = addLinkAttributes;\n  exports.deprecated = deprecated;\n  exports.getFilenameFromUrl = getFilenameFromUrl;\n  exports.isFetchSupported = isFetchSupported;\n  exports.isValidFetchUrl = isValidFetchUrl;\n  exports.loadScript = loadScript;\n  exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n  exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\n  const SVG_NS = \"http://www.w3.org/2000/svg\";\n\n  class BaseCanvasFactory {\n    constructor() {\n      if (this.constructor === BaseCanvasFactory) {\n        (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n      }\n    }\n\n    create(width, height) {\n      (0, _util.unreachable)(\"Abstract method `create` called.\");\n    }\n\n    reset(canvasAndContext, width, height) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      canvasAndContext.canvas.width = width;\n      canvasAndContext.canvas.height = height;\n    }\n\n    destroy(canvasAndContext) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      canvasAndContext.canvas.width = 0;\n      canvasAndContext.canvas.height = 0;\n      canvasAndContext.canvas = null;\n      canvasAndContext.context = null;\n    }\n\n  }\n\n  exports.BaseCanvasFactory = BaseCanvasFactory;\n\n  class DOMCanvasFactory extends BaseCanvasFactory {\n    constructor({\n      ownerDocument = globalThis.document\n    } = {}) {\n      super();\n      this._document = ownerDocument;\n    }\n\n    create(width, height) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      const canvas = this._document.createElement(\"canvas\");\n\n      const context = canvas.getContext(\"2d\");\n      canvas.width = width;\n      canvas.height = height;\n      return {\n        canvas,\n        context\n      };\n    }\n\n  }\n\n  exports.DOMCanvasFactory = DOMCanvasFactory;\n\n  class BaseCMapReaderFactory {\n    constructor({\n      baseUrl = null,\n      isCompressed = false\n    }) {\n      if (this.constructor === BaseCMapReaderFactory) {\n        (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n      }\n\n      this.baseUrl = baseUrl;\n      this.isCompressed = isCompressed;\n    }\n\n    async fetch({\n      name\n    }) {\n      if (!this.baseUrl) {\n        throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n      }\n\n      if (!name) {\n        throw new Error(\"CMap name must be specified.\");\n      }\n\n      const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n      const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n      return this._fetchData(url, compressionType).catch(reason => {\n        throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n      });\n    }\n\n    _fetchData(url, compressionType) {\n      (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n    }\n\n  }\n\n  exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n  class DOMCMapReaderFactory extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {\n        return fetch(url).then(async response => {\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          let cMapData;\n\n          if (this.isCompressed) {\n            cMapData = new Uint8Array(await response.arrayBuffer());\n          } else {\n            cMapData = (0, _util.stringToBytes)(await response.text());\n          }\n\n          return {\n            cMapData,\n            compressionType\n          };\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n\n        if (this.isCompressed) {\n          request.responseType = \"arraybuffer\";\n        }\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== XMLHttpRequest.DONE) {\n            return;\n          }\n\n          if (request.status === 200 || request.status === 0) {\n            let cMapData;\n\n            if (this.isCompressed && request.response) {\n              cMapData = new Uint8Array(request.response);\n            } else if (!this.isCompressed && request.responseText) {\n              cMapData = (0, _util.stringToBytes)(request.responseText);\n            }\n\n            if (cMapData) {\n              resolve({\n                cMapData,\n                compressionType\n              });\n              return;\n            }\n          }\n\n          reject(new Error(request.statusText));\n        };\n\n        request.send(null);\n      });\n    }\n\n  }\n\n  exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n  class DOMSVGFactory {\n    create(width, height) {\n      (0, _util.assert)(width > 0 && height > 0, \"Invalid SVG dimensions\");\n      const svg = document.createElementNS(SVG_NS, \"svg:svg\");\n      svg.setAttribute(\"version\", \"1.1\");\n      svg.setAttribute(\"width\", width + \"px\");\n      svg.setAttribute(\"height\", height + \"px\");\n      svg.setAttribute(\"preserveAspectRatio\", \"none\");\n      svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n      return svg;\n    }\n\n    createElement(type) {\n      (0, _util.assert)(typeof type === \"string\", \"Invalid SVG element type\");\n      return document.createElementNS(SVG_NS, type);\n    }\n\n  }\n\n  exports.DOMSVGFactory = DOMSVGFactory;\n\n  class PageViewport {\n    constructor({\n      viewBox,\n      scale,\n      rotation,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    }) {\n      this.viewBox = viewBox;\n      this.scale = scale;\n      this.rotation = rotation;\n      this.offsetX = offsetX;\n      this.offsetY = offsetY;\n      const centerX = (viewBox[2] + viewBox[0]) / 2;\n      const centerY = (viewBox[3] + viewBox[1]) / 2;\n      let rotateA, rotateB, rotateC, rotateD;\n      rotation = rotation % 360;\n      rotation = rotation < 0 ? rotation + 360 : rotation;\n\n      switch (rotation) {\n        case 180:\n          rotateA = -1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = 1;\n          break;\n\n        case 90:\n          rotateA = 0;\n          rotateB = 1;\n          rotateC = 1;\n          rotateD = 0;\n          break;\n\n        case 270:\n          rotateA = 0;\n          rotateB = -1;\n          rotateC = -1;\n          rotateD = 0;\n          break;\n\n        case 0:\n          rotateA = 1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = -1;\n          break;\n\n        default:\n          throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n      }\n\n      if (dontFlip) {\n        rotateC = -rotateC;\n        rotateD = -rotateD;\n      }\n\n      let offsetCanvasX, offsetCanvasY;\n      let width, height;\n\n      if (rotateA === 0) {\n        offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n        width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n        height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      } else {\n        offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n        width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n        height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      }\n\n      this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n      this.width = width;\n      this.height = height;\n    }\n\n    clone({\n      scale = this.scale,\n      rotation = this.rotation,\n      offsetX = this.offsetX,\n      offsetY = this.offsetY,\n      dontFlip = false\n    } = {}) {\n      return new PageViewport({\n        viewBox: this.viewBox.slice(),\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n\n    convertToViewportPoint(x, y) {\n      return _util.Util.applyTransform([x, y], this.transform);\n    }\n\n    convertToViewportRectangle(rect) {\n      const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n      const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n      return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n    }\n\n    convertToPdfPoint(x, y) {\n      return _util.Util.applyInverseTransform([x, y], this.transform);\n    }\n\n  }\n\n  exports.PageViewport = PageViewport;\n\n  class RenderingCancelledException extends _util.BaseException {\n    constructor(msg, type) {\n      super(msg);\n      this.type = type;\n    }\n\n  }\n\n  exports.RenderingCancelledException = RenderingCancelledException;\n  const LinkTarget = {\n    NONE: 0,\n    SELF: 1,\n    BLANK: 2,\n    PARENT: 3,\n    TOP: 4\n  };\n  exports.LinkTarget = LinkTarget;\n\n  function addLinkAttributes(link, {\n    url,\n    target,\n    rel,\n    enabled = true\n  } = {}) {\n    (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n    const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n    if (enabled) {\n      link.href = link.title = urlNullRemoved;\n    } else {\n      link.href = \"\";\n      link.title = `Disabled: ${urlNullRemoved}`;\n\n      link.onclick = () => {\n        return false;\n      };\n    }\n\n    let targetStr = \"\";\n\n    switch (target) {\n      case LinkTarget.NONE:\n        break;\n\n      case LinkTarget.SELF:\n        targetStr = \"_self\";\n        break;\n\n      case LinkTarget.BLANK:\n        targetStr = \"_blank\";\n        break;\n\n      case LinkTarget.PARENT:\n        targetStr = \"_parent\";\n        break;\n\n      case LinkTarget.TOP:\n        targetStr = \"_top\";\n        break;\n    }\n\n    link.target = targetStr;\n    link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n  }\n\n  function getFilenameFromUrl(url) {\n    const anchor = url.indexOf(\"#\");\n    const query = url.indexOf(\"?\");\n    const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n    return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n  }\n\n  class StatTimer {\n    constructor() {\n      this.started = Object.create(null);\n      this.times = [];\n    }\n\n    time(name) {\n      if (name in this.started) {\n        (0, _util.warn)(`Timer is already running for ${name}`);\n      }\n\n      this.started[name] = Date.now();\n    }\n\n    timeEnd(name) {\n      if (!(name in this.started)) {\n        (0, _util.warn)(`Timer has not been started for ${name}`);\n      }\n\n      this.times.push({\n        name,\n        start: this.started[name],\n        end: Date.now()\n      });\n      delete this.started[name];\n    }\n\n    toString() {\n      const outBuf = [];\n      let longest = 0;\n\n      for (const time of this.times) {\n        const name = time.name;\n\n        if (name.length > longest) {\n          longest = name.length;\n        }\n      }\n\n      for (const time of this.times) {\n        const duration = time.end - time.start;\n        outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n      }\n\n      return outBuf.join(\"\");\n    }\n\n  }\n\n  exports.StatTimer = StatTimer;\n\n  function isFetchSupported() {\n    return typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype && typeof ReadableStream !== \"undefined\";\n  }\n\n  function isValidFetchUrl(url, baseUrl) {\n    try {\n      const {\n        protocol\n      } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n      return protocol === \"http:\" || protocol === \"https:\";\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  function loadScript(src, removeScriptElement = false) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = src;\n\n      script.onload = function (evt) {\n        if (removeScriptElement) {\n          script.remove();\n        }\n\n        resolve(evt);\n      };\n\n      script.onerror = function () {\n        reject(new Error(`Cannot load script at: ${script.src}`));\n      };\n\n      (document.head || document.documentElement).appendChild(script);\n    });\n  }\n\n  function deprecated(details) {\n    console.log(\"Deprecated API usage: \" + details);\n  }\n\n  let pdfDateStringRegex;\n\n  class PDFDateString {\n    static toDateObject(input) {\n      if (!input || !(0, _util.isString)(input)) {\n        return null;\n      }\n\n      if (!pdfDateStringRegex) {\n        pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n      }\n\n      const matches = pdfDateStringRegex.exec(input);\n\n      if (!matches) {\n        return null;\n      }\n\n      const year = parseInt(matches[1], 10);\n      let month = parseInt(matches[2], 10);\n      month = month >= 1 && month <= 12 ? month - 1 : 0;\n      let day = parseInt(matches[3], 10);\n      day = day >= 1 && day <= 31 ? day : 1;\n      let hour = parseInt(matches[4], 10);\n      hour = hour >= 0 && hour <= 23 ? hour : 0;\n      let minute = parseInt(matches[5], 10);\n      minute = minute >= 0 && minute <= 59 ? minute : 0;\n      let second = parseInt(matches[6], 10);\n      second = second >= 0 && second <= 59 ? second : 0;\n      const universalTimeRelation = matches[7] || \"Z\";\n      let offsetHour = parseInt(matches[8], 10);\n      offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n      let offsetMinute = parseInt(matches[9], 10) || 0;\n      offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n      if (universalTimeRelation === \"-\") {\n        hour += offsetHour;\n        minute += offsetMinute;\n      } else if (universalTimeRelation === \"+\") {\n        hour -= offsetHour;\n        minute -= offsetMinute;\n      }\n\n      return new Date(Date.UTC(year, month, day, hour, minute, second));\n    }\n\n  }\n\n  exports.PDFDateString = PDFDateString;\n\n  /***/ }),\n  /* 2 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.arrayByteLength = arrayByteLength;\n  exports.arraysToBytes = arraysToBytes;\n  exports.assert = assert;\n  exports.bytesToString = bytesToString;\n  exports.createPromiseCapability = createPromiseCapability;\n  exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n  exports.encodeToXmlString = encodeToXmlString;\n  exports.escapeString = escapeString;\n  exports.getModificationDate = getModificationDate;\n  exports.getVerbosityLevel = getVerbosityLevel;\n  exports.info = info;\n  exports.isArrayBuffer = isArrayBuffer;\n  exports.isArrayEqual = isArrayEqual;\n  exports.isAscii = isAscii;\n  exports.isBool = isBool;\n  exports.isNum = isNum;\n  exports.isSameOrigin = isSameOrigin;\n  exports.isString = isString;\n  exports.objectFromEntries = objectFromEntries;\n  exports.objectSize = objectSize;\n  exports.removeNullCharacters = removeNullCharacters;\n  exports.setVerbosityLevel = setVerbosityLevel;\n  exports.shadow = shadow;\n  exports.string32 = string32;\n  exports.stringToBytes = stringToBytes;\n  exports.stringToPDFString = stringToPDFString;\n  exports.stringToUTF16BEString = stringToUTF16BEString;\n  exports.stringToUTF8String = stringToUTF8String;\n  exports.unreachable = unreachable;\n  exports.utf8StringToString = utf8StringToString;\n  exports.warn = warn;\n  exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.createObjectURL = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n  __w_pdfjs_require__(3);\n\n  const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n  exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n  const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n  exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n  const PermissionFlag = {\n    PRINT: 0x04,\n    MODIFY_CONTENTS: 0x08,\n    COPY: 0x10,\n    MODIFY_ANNOTATIONS: 0x20,\n    FILL_INTERACTIVE_FORMS: 0x100,\n    COPY_FOR_ACCESSIBILITY: 0x200,\n    ASSEMBLE: 0x400,\n    PRINT_HIGH_QUALITY: 0x800\n  };\n  exports.PermissionFlag = PermissionFlag;\n  const TextRenderingMode = {\n    FILL: 0,\n    STROKE: 1,\n    FILL_STROKE: 2,\n    INVISIBLE: 3,\n    FILL_ADD_TO_PATH: 4,\n    STROKE_ADD_TO_PATH: 5,\n    FILL_STROKE_ADD_TO_PATH: 6,\n    ADD_TO_PATH: 7,\n    FILL_STROKE_MASK: 3,\n    ADD_TO_PATH_FLAG: 4\n  };\n  exports.TextRenderingMode = TextRenderingMode;\n  const ImageKind = {\n    GRAYSCALE_1BPP: 1,\n    RGB_24BPP: 2,\n    RGBA_32BPP: 3\n  };\n  exports.ImageKind = ImageKind;\n  const AnnotationType = {\n    TEXT: 1,\n    LINK: 2,\n    FREETEXT: 3,\n    LINE: 4,\n    SQUARE: 5,\n    CIRCLE: 6,\n    POLYGON: 7,\n    POLYLINE: 8,\n    HIGHLIGHT: 9,\n    UNDERLINE: 10,\n    SQUIGGLY: 11,\n    STRIKEOUT: 12,\n    STAMP: 13,\n    CARET: 14,\n    INK: 15,\n    POPUP: 16,\n    FILEATTACHMENT: 17,\n    SOUND: 18,\n    MOVIE: 19,\n    WIDGET: 20,\n    SCREEN: 21,\n    PRINTERMARK: 22,\n    TRAPNET: 23,\n    WATERMARK: 24,\n    THREED: 25,\n    REDACT: 26\n  };\n  exports.AnnotationType = AnnotationType;\n  const AnnotationStateModelType = {\n    MARKED: \"Marked\",\n    REVIEW: \"Review\"\n  };\n  exports.AnnotationStateModelType = AnnotationStateModelType;\n  const AnnotationMarkedState = {\n    MARKED: \"Marked\",\n    UNMARKED: \"Unmarked\"\n  };\n  exports.AnnotationMarkedState = AnnotationMarkedState;\n  const AnnotationReviewState = {\n    ACCEPTED: \"Accepted\",\n    REJECTED: \"Rejected\",\n    CANCELLED: \"Cancelled\",\n    COMPLETED: \"Completed\",\n    NONE: \"None\"\n  };\n  exports.AnnotationReviewState = AnnotationReviewState;\n  const AnnotationReplyType = {\n    GROUP: \"Group\",\n    REPLY: \"R\"\n  };\n  exports.AnnotationReplyType = AnnotationReplyType;\n  const AnnotationFlag = {\n    INVISIBLE: 0x01,\n    HIDDEN: 0x02,\n    PRINT: 0x04,\n    NOZOOM: 0x08,\n    NOROTATE: 0x10,\n    NOVIEW: 0x20,\n    READONLY: 0x40,\n    LOCKED: 0x80,\n    TOGGLENOVIEW: 0x100,\n    LOCKEDCONTENTS: 0x200\n  };\n  exports.AnnotationFlag = AnnotationFlag;\n  const AnnotationFieldFlag = {\n    READONLY: 0x0000001,\n    REQUIRED: 0x0000002,\n    NOEXPORT: 0x0000004,\n    MULTILINE: 0x0001000,\n    PASSWORD: 0x0002000,\n    NOTOGGLETOOFF: 0x0004000,\n    RADIO: 0x0008000,\n    PUSHBUTTON: 0x0010000,\n    COMBO: 0x0020000,\n    EDIT: 0x0040000,\n    SORT: 0x0080000,\n    FILESELECT: 0x0100000,\n    MULTISELECT: 0x0200000,\n    DONOTSPELLCHECK: 0x0400000,\n    DONOTSCROLL: 0x0800000,\n    COMB: 0x1000000,\n    RICHTEXT: 0x2000000,\n    RADIOSINUNISON: 0x2000000,\n    COMMITONSELCHANGE: 0x4000000\n  };\n  exports.AnnotationFieldFlag = AnnotationFieldFlag;\n  const AnnotationBorderStyleType = {\n    SOLID: 1,\n    DASHED: 2,\n    BEVELED: 3,\n    INSET: 4,\n    UNDERLINE: 5\n  };\n  exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n  const AnnotationActionEventType = {\n    E: \"Mouse Enter\",\n    X: \"Mouse Exit\",\n    D: \"Mouse Down\",\n    U: \"Mouse Up\",\n    Fo: \"Focus\",\n    Bl: \"Blur\",\n    PO: \"PageOpen\",\n    PC: \"PageClose\",\n    PV: \"PageVisible\",\n    PI: \"PageInvisible\",\n    K: \"Keystroke\",\n    F: \"Format\",\n    V: \"Validate\",\n    C: \"Calculate\"\n  };\n  exports.AnnotationActionEventType = AnnotationActionEventType;\n  const DocumentActionEventType = {\n    WC: \"WillClose\",\n    WS: \"WillSave\",\n    DS: \"DidSave\",\n    WP: \"WillPrint\",\n    DP: \"DidPrint\"\n  };\n  exports.DocumentActionEventType = DocumentActionEventType;\n  const PageActionEventType = {\n    O: \"PageOpen\",\n    C: \"PageClose\"\n  };\n  exports.PageActionEventType = PageActionEventType;\n  const StreamType = {\n    UNKNOWN: \"UNKNOWN\",\n    FLATE: \"FLATE\",\n    LZW: \"LZW\",\n    DCT: \"DCT\",\n    JPX: \"JPX\",\n    JBIG: \"JBIG\",\n    A85: \"A85\",\n    AHX: \"AHX\",\n    CCF: \"CCF\",\n    RLX: \"RLX\"\n  };\n  exports.StreamType = StreamType;\n  const FontType = {\n    UNKNOWN: \"UNKNOWN\",\n    TYPE1: \"TYPE1\",\n    TYPE1C: \"TYPE1C\",\n    CIDFONTTYPE0: \"CIDFONTTYPE0\",\n    CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n    TRUETYPE: \"TRUETYPE\",\n    CIDFONTTYPE2: \"CIDFONTTYPE2\",\n    TYPE3: \"TYPE3\",\n    OPENTYPE: \"OPENTYPE\",\n    TYPE0: \"TYPE0\",\n    MMTYPE1: \"MMTYPE1\"\n  };\n  exports.FontType = FontType;\n  const VerbosityLevel = {\n    ERRORS: 0,\n    WARNINGS: 1,\n    INFOS: 5\n  };\n  exports.VerbosityLevel = VerbosityLevel;\n  const CMapCompressionType = {\n    NONE: 0,\n    BINARY: 1,\n    STREAM: 2\n  };\n  exports.CMapCompressionType = CMapCompressionType;\n  const OPS = {\n    dependency: 1,\n    setLineWidth: 2,\n    setLineCap: 3,\n    setLineJoin: 4,\n    setMiterLimit: 5,\n    setDash: 6,\n    setRenderingIntent: 7,\n    setFlatness: 8,\n    setGState: 9,\n    save: 10,\n    restore: 11,\n    transform: 12,\n    moveTo: 13,\n    lineTo: 14,\n    curveTo: 15,\n    curveTo2: 16,\n    curveTo3: 17,\n    closePath: 18,\n    rectangle: 19,\n    stroke: 20,\n    closeStroke: 21,\n    fill: 22,\n    eoFill: 23,\n    fillStroke: 24,\n    eoFillStroke: 25,\n    closeFillStroke: 26,\n    closeEOFillStroke: 27,\n    endPath: 28,\n    clip: 29,\n    eoClip: 30,\n    beginText: 31,\n    endText: 32,\n    setCharSpacing: 33,\n    setWordSpacing: 34,\n    setHScale: 35,\n    setLeading: 36,\n    setFont: 37,\n    setTextRenderingMode: 38,\n    setTextRise: 39,\n    moveText: 40,\n    setLeadingMoveText: 41,\n    setTextMatrix: 42,\n    nextLine: 43,\n    showText: 44,\n    showSpacedText: 45,\n    nextLineShowText: 46,\n    nextLineSetSpacingShowText: 47,\n    setCharWidth: 48,\n    setCharWidthAndBounds: 49,\n    setStrokeColorSpace: 50,\n    setFillColorSpace: 51,\n    setStrokeColor: 52,\n    setStrokeColorN: 53,\n    setFillColor: 54,\n    setFillColorN: 55,\n    setStrokeGray: 56,\n    setFillGray: 57,\n    setStrokeRGBColor: 58,\n    setFillRGBColor: 59,\n    setStrokeCMYKColor: 60,\n    setFillCMYKColor: 61,\n    shadingFill: 62,\n    beginInlineImage: 63,\n    beginImageData: 64,\n    endInlineImage: 65,\n    paintXObject: 66,\n    markPoint: 67,\n    markPointProps: 68,\n    beginMarkedContent: 69,\n    beginMarkedContentProps: 70,\n    endMarkedContent: 71,\n    beginCompat: 72,\n    endCompat: 73,\n    paintFormXObjectBegin: 74,\n    paintFormXObjectEnd: 75,\n    beginGroup: 76,\n    endGroup: 77,\n    beginAnnotations: 78,\n    endAnnotations: 79,\n    beginAnnotation: 80,\n    endAnnotation: 81,\n    paintJpegXObject: 82,\n    paintImageMaskXObject: 83,\n    paintImageMaskXObjectGroup: 84,\n    paintImageXObject: 85,\n    paintInlineImageXObject: 86,\n    paintInlineImageXObjectGroup: 87,\n    paintImageXObjectRepeat: 88,\n    paintImageMaskXObjectRepeat: 89,\n    paintSolidColorImageMask: 90,\n    constructPath: 91\n  };\n  exports.OPS = OPS;\n  const UNSUPPORTED_FEATURES = {\n    unknown: \"unknown\",\n    forms: \"forms\",\n    javaScript: \"javaScript\",\n    smask: \"smask\",\n    shadingPattern: \"shadingPattern\",\n    font: \"font\",\n    errorTilingPattern: \"errorTilingPattern\",\n    errorExtGState: \"errorExtGState\",\n    errorXObject: \"errorXObject\",\n    errorFontLoadType3: \"errorFontLoadType3\",\n    errorFontState: \"errorFontState\",\n    errorFontMissing: \"errorFontMissing\",\n    errorFontTranslate: \"errorFontTranslate\",\n    errorColorSpace: \"errorColorSpace\",\n    errorOperatorList: \"errorOperatorList\",\n    errorFontToUnicode: \"errorFontToUnicode\",\n    errorFontLoadNative: \"errorFontLoadNative\",\n    errorFontGetPath: \"errorFontGetPath\",\n    errorMarkedContent: \"errorMarkedContent\"\n  };\n  exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n  const PasswordResponses = {\n    NEED_PASSWORD: 1,\n    INCORRECT_PASSWORD: 2\n  };\n  exports.PasswordResponses = PasswordResponses;\n  let verbosity = VerbosityLevel.WARNINGS;\n\n  function setVerbosityLevel(level) {\n    if (Number.isInteger(level)) {\n      verbosity = level;\n    }\n  }\n\n  function getVerbosityLevel() {\n    return verbosity;\n  }\n\n  function info(msg) {\n    if (verbosity >= VerbosityLevel.INFOS) {\n      console.log(`Info: ${msg}`);\n    }\n  }\n\n  function warn(msg) {\n    if (verbosity >= VerbosityLevel.WARNINGS) {\n      console.log(`Warning: ${msg}`);\n    }\n  }\n\n  function unreachable(msg) {\n    throw new Error(msg);\n  }\n\n  function assert(cond, msg) {\n    if (!cond) {\n      unreachable(msg);\n    }\n  }\n\n  function isSameOrigin(baseUrl, otherUrl) {\n    let base;\n\n    try {\n      base = new URL(baseUrl);\n\n      if (!base.origin || base.origin === \"null\") {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  }\n\n  function _isValidProtocol(url) {\n    if (!url) {\n      return false;\n    }\n\n    switch (url.protocol) {\n      case \"http:\":\n      case \"https:\":\n      case \"ftp:\":\n      case \"mailto:\":\n      case \"tel:\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function createValidAbsoluteUrl(url, baseUrl) {\n    if (!url) {\n      return null;\n    }\n\n    try {\n      const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n      if (_isValidProtocol(absoluteUrl)) {\n        return absoluteUrl;\n      }\n    } catch (ex) {}\n\n    return null;\n  }\n\n  function shadow(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n      value,\n      enumerable: true,\n      configurable: true,\n      writable: false\n    });\n    return value;\n  }\n\n  const BaseException = function BaseExceptionClosure() {\n    function BaseException(message) {\n      if (this.constructor === BaseException) {\n        unreachable(\"Cannot initialize BaseException.\");\n      }\n\n      this.message = message;\n      this.name = this.constructor.name;\n    }\n\n    BaseException.prototype = new Error();\n    BaseException.constructor = BaseException;\n    return BaseException;\n  }();\n\n  exports.BaseException = BaseException;\n\n  class PasswordException extends BaseException {\n    constructor(msg, code) {\n      super(msg);\n      this.code = code;\n    }\n\n  }\n\n  exports.PasswordException = PasswordException;\n\n  class UnknownErrorException extends BaseException {\n    constructor(msg, details) {\n      super(msg);\n      this.details = details;\n    }\n\n  }\n\n  exports.UnknownErrorException = UnknownErrorException;\n\n  class InvalidPDFException extends BaseException {}\n\n  exports.InvalidPDFException = InvalidPDFException;\n\n  class MissingPDFException extends BaseException {}\n\n  exports.MissingPDFException = MissingPDFException;\n\n  class UnexpectedResponseException extends BaseException {\n    constructor(msg, status) {\n      super(msg);\n      this.status = status;\n    }\n\n  }\n\n  exports.UnexpectedResponseException = UnexpectedResponseException;\n\n  class FormatError extends BaseException {}\n\n  exports.FormatError = FormatError;\n\n  class AbortException extends BaseException {}\n\n  exports.AbortException = AbortException;\n  const NullCharactersRegExp = /\\x00/g;\n\n  function removeNullCharacters(str) {\n    if (typeof str !== \"string\") {\n      warn(\"The argument for removeNullCharacters must be a string.\");\n      return str;\n    }\n\n    return str.replace(NullCharactersRegExp, \"\");\n  }\n\n  function bytesToString(bytes) {\n    assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n    const length = bytes.length;\n    const MAX_ARGUMENT_COUNT = 8192;\n\n    if (length < MAX_ARGUMENT_COUNT) {\n      return String.fromCharCode.apply(null, bytes);\n    }\n\n    const strBuf = [];\n\n    for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n      const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n      const chunk = bytes.subarray(i, chunkEnd);\n      strBuf.push(String.fromCharCode.apply(null, chunk));\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  function stringToBytes(str) {\n    assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n    const length = str.length;\n    const bytes = new Uint8Array(length);\n\n    for (let i = 0; i < length; ++i) {\n      bytes[i] = str.charCodeAt(i) & 0xff;\n    }\n\n    return bytes;\n  }\n\n  function arrayByteLength(arr) {\n    if (arr.length !== undefined) {\n      return arr.length;\n    }\n\n    assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n    return arr.byteLength;\n  }\n\n  function arraysToBytes(arr) {\n    const length = arr.length;\n\n    if (length === 1 && arr[0] instanceof Uint8Array) {\n      return arr[0];\n    }\n\n    let resultLength = 0;\n\n    for (let i = 0; i < length; i++) {\n      resultLength += arrayByteLength(arr[i]);\n    }\n\n    let pos = 0;\n    const data = new Uint8Array(resultLength);\n\n    for (let i = 0; i < length; i++) {\n      let item = arr[i];\n\n      if (!(item instanceof Uint8Array)) {\n        if (typeof item === \"string\") {\n          item = stringToBytes(item);\n        } else {\n          item = new Uint8Array(item);\n        }\n      }\n\n      const itemLength = item.byteLength;\n      data.set(item, pos);\n      pos += itemLength;\n    }\n\n    return data;\n  }\n\n  function string32(value) {\n    return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n  }\n\n  function objectSize(obj) {\n    return Object.keys(obj).length;\n  }\n\n  function objectFromEntries(iterable) {\n    return Object.assign(Object.create(null), Object.fromEntries(iterable));\n  }\n\n  function isLittleEndian() {\n    const buffer8 = new Uint8Array(4);\n    buffer8[0] = 1;\n    const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n    return view32[0] === 1;\n  }\n\n  const IsLittleEndianCached = {\n    get value() {\n      return shadow(this, \"value\", isLittleEndian());\n    }\n\n  };\n  exports.IsLittleEndianCached = IsLittleEndianCached;\n\n  function isEvalSupported() {\n    try {\n      new Function(\"\");\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const IsEvalSupportedCached = {\n    get value() {\n      return shadow(this, \"value\", isEvalSupported());\n    }\n\n  };\n  exports.IsEvalSupportedCached = IsEvalSupportedCached;\n  const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n  class Util {\n    static makeHexColor(r, g, b) {\n      return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n    }\n\n    static transform(m1, m2) {\n      return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n    }\n\n    static applyTransform(p, m) {\n      const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n      const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n      return [xt, yt];\n    }\n\n    static applyInverseTransform(p, m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n      const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n      return [xt, yt];\n    }\n\n    static getAxialAlignedBoundingBox(r, m) {\n      const p1 = Util.applyTransform(r, m);\n      const p2 = Util.applyTransform(r.slice(2, 4), m);\n      const p3 = Util.applyTransform([r[0], r[3]], m);\n      const p4 = Util.applyTransform([r[2], r[1]], m);\n      return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n    }\n\n    static inverseTransform(m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n    }\n\n    static apply3dTransform(m, v) {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n    }\n\n    static singularValueDecompose2dScale(m) {\n      const transpose = [m[0], m[2], m[1], m[3]];\n      const a = m[0] * transpose[0] + m[1] * transpose[2];\n      const b = m[0] * transpose[1] + m[1] * transpose[3];\n      const c = m[2] * transpose[0] + m[3] * transpose[2];\n      const d = m[2] * transpose[1] + m[3] * transpose[3];\n      const first = (a + d) / 2;\n      const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n      const sx = first + second || 1;\n      const sy = first - second || 1;\n      return [Math.sqrt(sx), Math.sqrt(sy)];\n    }\n\n    static normalizeRect(rect) {\n      const r = rect.slice(0);\n\n      if (rect[0] > rect[2]) {\n        r[0] = rect[2];\n        r[2] = rect[0];\n      }\n\n      if (rect[1] > rect[3]) {\n        r[1] = rect[3];\n        r[3] = rect[1];\n      }\n\n      return r;\n    }\n\n    static intersect(rect1, rect2) {\n      function compare(a, b) {\n        return a - b;\n      }\n\n      const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n      const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n      const result = [];\n      rect1 = Util.normalizeRect(rect1);\n      rect2 = Util.normalizeRect(rect2);\n\n      if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n        result[0] = orderedX[1];\n        result[2] = orderedX[2];\n      } else {\n        return null;\n      }\n\n      if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n        result[1] = orderedY[1];\n        result[3] = orderedY[2];\n      } else {\n        return null;\n      }\n\n      return result;\n    }\n\n  }\n\n  exports.Util = Util;\n  const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\n  function stringToPDFString(str) {\n    const length = str.length,\n          strBuf = [];\n\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      for (let i = 2; i < length; i += 2) {\n        strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n      }\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      for (let i = 2; i < length; i += 2) {\n        strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n      }\n    } else {\n      for (let i = 0; i < length; ++i) {\n        const code = PDFStringTranslateTable[str.charCodeAt(i)];\n        strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  function escapeString(str) {\n    return str.replace(/([()\\\\\\n\\r])/g, match => {\n      if (match === \"\\n\") {\n        return \"\\\\n\";\n      } else if (match === \"\\r\") {\n        return \"\\\\r\";\n      }\n\n      return `\\\\${match}`;\n    });\n  }\n\n  function isAscii(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n  }\n\n  function stringToUTF16BEString(str) {\n    const buf = [\"\\xFE\\xFF\"];\n\n    for (let i = 0, ii = str.length; i < ii; i++) {\n      const char = str.charCodeAt(i);\n      buf.push(String.fromCharCode(char >> 8 & 0xff));\n      buf.push(String.fromCharCode(char & 0xff));\n    }\n\n    return buf.join(\"\");\n  }\n\n  function stringToUTF8String(str) {\n    return decodeURIComponent(escape(str));\n  }\n\n  function utf8StringToString(str) {\n    return unescape(encodeURIComponent(str));\n  }\n\n  function isBool(v) {\n    return typeof v === \"boolean\";\n  }\n\n  function isNum(v) {\n    return typeof v === \"number\";\n  }\n\n  function isString(v) {\n    return typeof v === \"string\";\n  }\n\n  function isArrayBuffer(v) {\n    return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n  }\n\n  function isArrayEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.every(function (element, index) {\n      return element === arr2[index];\n    });\n  }\n\n  function getModificationDate(date = new Date()) {\n    const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n    return buffer.join(\"\");\n  }\n\n  function createPromiseCapability() {\n    const capability = Object.create(null);\n    let isSettled = false;\n    Object.defineProperty(capability, \"settled\", {\n      get() {\n        return isSettled;\n      }\n\n    });\n    capability.promise = new Promise(function (resolve, reject) {\n      capability.resolve = function (data) {\n        isSettled = true;\n        resolve(data);\n      };\n\n      capability.reject = function (reason) {\n        isSettled = true;\n        reject(reason);\n      };\n    });\n    return capability;\n  }\n\n  const createObjectURL = function createObjectURLClosure() {\n    const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    return function createObjectURL(data, contentType, forceDataSchema = false) {\n      if (!forceDataSchema && URL.createObjectURL) {\n        const blob = new Blob([data], {\n          type: contentType\n        });\n        return URL.createObjectURL(blob);\n      }\n\n      let buffer = `data:${contentType};base64,`;\n\n      for (let i = 0, ii = data.length; i < ii; i += 3) {\n        const b1 = data[i] & 0xff;\n        const b2 = data[i + 1] & 0xff;\n        const b3 = data[i + 2] & 0xff;\n        const d1 = b1 >> 2,\n              d2 = (b1 & 3) << 4 | b2 >> 4;\n        const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n        const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n        buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n      }\n\n      return buffer;\n    };\n  }();\n\n  exports.createObjectURL = createObjectURL;\n  const XMLEntities = {\n    0x3c: \"&lt;\",\n    0x3e: \"&gt;\",\n    0x26: \"&amp;\",\n    0x22: \"&quot;\",\n    0x27: \"&apos;\"\n  };\n\n  function encodeToXmlString(str) {\n    const buffer = [];\n    let start = 0;\n\n    for (let i = 0, ii = str.length; i < ii; i++) {\n      const char = str.codePointAt(i);\n\n      if (0x20 <= char && char <= 0x7e) {\n        const entity = XMLEntities[char];\n\n        if (entity) {\n          if (start < i) {\n            buffer.push(str.substring(start, i));\n          }\n\n          buffer.push(entity);\n          start = i + 1;\n        }\n      } else {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n\n        buffer.push(`&#x${char.toString(16).toUpperCase()};`);\n\n        if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n          i++;\n        }\n\n        start = i + 1;\n      }\n    }\n\n    if (buffer.length === 0) {\n      return str;\n    }\n\n    if (start < str.length) {\n      buffer.push(str.substring(start, str.length));\n    }\n\n    return buffer.join(\"\");\n  }\n\n  /***/ }),\n  /* 3 */\n  /***/ ((__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n\n\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  ;\n\n  /***/ }),\n  /* 4 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.isNodeJS = void 0;\n  const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n  exports.isNodeJS = isNodeJS;\n\n  /***/ }),\n  /* 5 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getDocument = getDocument;\n  exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n  exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _font_loader = __w_pdfjs_require__(6);\n\n  var _node_utils = __w_pdfjs_require__(7);\n\n  var _annotation_storage = __w_pdfjs_require__(8);\n\n  var _api_compatibility = __w_pdfjs_require__(9);\n\n  var _canvas = __w_pdfjs_require__(10);\n\n  var _worker_options = __w_pdfjs_require__(12);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  var _message_handler = __w_pdfjs_require__(13);\n\n  var _metadata = __w_pdfjs_require__(14);\n\n  var _optional_content_config = __w_pdfjs_require__(16);\n\n  var _transport_stream = __w_pdfjs_require__(17);\n\n  var _webgl = __w_pdfjs_require__(18);\n\n  const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n  const RENDERING_CANCELLED_TIMEOUT = 100;\n  const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n  exports.DefaultCanvasFactory = DefaultCanvasFactory;\n  const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n  exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n  let createPDFNetworkStream;\n\n  function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n    createPDFNetworkStream = pdfNetworkStreamFactory;\n  }\n\n  function getDocument(src) {\n    const task = new PDFDocumentLoadingTask();\n    let source;\n\n    if (typeof src === \"string\") {\n      source = {\n        url: src\n      };\n    } else if ((0, _util.isArrayBuffer)(src)) {\n      source = {\n        data: src\n      };\n    } else if (src instanceof PDFDataRangeTransport) {\n      source = {\n        range: src\n      };\n    } else {\n      if (typeof src !== \"object\") {\n        throw new Error(\"Invalid parameter in getDocument, \" + \"need either Uint8Array, string or a parameter object\");\n      }\n\n      if (!src.url && !src.data && !src.range) {\n        throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n      }\n\n      source = src;\n    }\n\n    const params = Object.create(null);\n    let rangeTransport = null,\n        worker = null;\n\n    for (const key in source) {\n      if (key === \"url\" && typeof window !== \"undefined\") {\n        params[key] = new URL(source[key], window.location).href;\n        continue;\n      } else if (key === \"range\") {\n        rangeTransport = source[key];\n        continue;\n      } else if (key === \"worker\") {\n        worker = source[key];\n        continue;\n      } else if (key === \"data\" && !(source[key] instanceof Uint8Array)) {\n        const pdfBytes = source[key];\n\n        if (typeof pdfBytes === \"string\") {\n          params[key] = (0, _util.stringToBytes)(pdfBytes);\n        } else if (typeof pdfBytes === \"object\" && pdfBytes !== null && !isNaN(pdfBytes.length)) {\n          params[key] = new Uint8Array(pdfBytes);\n        } else if ((0, _util.isArrayBuffer)(pdfBytes)) {\n          params[key] = new Uint8Array(pdfBytes);\n        } else {\n          throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string or array-like object is expected in the \" + \"data property.\");\n        }\n\n        continue;\n      }\n\n      params[key] = source[key];\n    }\n\n    params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n    params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n    params.ignoreErrors = params.stopAtErrors !== true;\n    params.fontExtraProperties = params.fontExtraProperties === true;\n    params.pdfBug = params.pdfBug === true;\n\n    if (!Number.isInteger(params.maxImageSize)) {\n      params.maxImageSize = -1;\n    }\n\n    if (typeof params.isEvalSupported !== \"boolean\") {\n      params.isEvalSupported = true;\n    }\n\n    if (typeof params.disableFontFace !== \"boolean\") {\n      params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;\n    }\n\n    if (typeof params.ownerDocument === \"undefined\") {\n      params.ownerDocument = globalThis.document;\n    }\n\n    if (typeof params.disableRange !== \"boolean\") {\n      params.disableRange = false;\n    }\n\n    if (typeof params.disableStream !== \"boolean\") {\n      params.disableStream = false;\n    }\n\n    if (typeof params.disableAutoFetch !== \"boolean\") {\n      params.disableAutoFetch = false;\n    }\n\n    (0, _util.setVerbosityLevel)(params.verbosity);\n\n    if (!worker) {\n      const workerParams = {\n        verbosity: params.verbosity,\n        port: _worker_options.GlobalWorkerOptions.workerPort\n      };\n      worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n      task._worker = worker;\n    }\n\n    const docId = task.docId;\n    worker.promise.then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n\n        if (rangeTransport) {\n          networkStream = new _transport_stream.PDFDataTransportStream({\n            length: params.length,\n            initialData: params.initialData,\n            progressiveDone: params.progressiveDone,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream\n          }, rangeTransport);\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream\n          });\n        }\n\n        resolve(networkStream);\n      });\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {\n        if (task.destroyed) {\n          throw new Error(\"Loading aborted\");\n        }\n\n        const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n        messageHandler.postMessageTransfers = worker.postMessageTransfers;\n        const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n        task._transport = transport;\n        messageHandler.send(\"Ready\", null);\n      });\n    }).catch(task._capability.reject);\n    return task;\n  }\n\n  function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n    if (worker.destroyed) {\n      return Promise.reject(new Error(\"Worker was destroyed\"));\n    }\n\n    if (pdfDataRangeTransport) {\n      source.length = pdfDataRangeTransport.length;\n      source.initialData = pdfDataRangeTransport.initialData;\n      source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    }\n\n    return worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n      docId,\n      apiVersion: '2.7.570',\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties\n    }).then(function (workerId) {\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n\n      return workerId;\n    });\n  }\n\n  const PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n    let nextDocumentId = 0;\n\n    class PDFDocumentLoadingTask {\n      constructor() {\n        this._capability = (0, _util.createPromiseCapability)();\n        this._transport = null;\n        this._worker = null;\n        this.docId = \"d\" + nextDocumentId++;\n        this.destroyed = false;\n        this.onPassword = null;\n        this.onProgress = null;\n        this.onUnsupportedFeature = null;\n      }\n\n      get promise() {\n        return this._capability.promise;\n      }\n\n      destroy() {\n        this.destroyed = true;\n        const transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n        return transportDestroyed.then(() => {\n          this._transport = null;\n\n          if (this._worker) {\n            this._worker.destroy();\n\n            this._worker = null;\n          }\n        });\n      }\n\n    }\n\n    return PDFDocumentLoadingTask;\n  }();\n\n  class PDFDataRangeTransport {\n    constructor(length, initialData, progressiveDone = false) {\n      this.length = length;\n      this.initialData = initialData;\n      this.progressiveDone = progressiveDone;\n      this._rangeListeners = [];\n      this._progressListeners = [];\n      this._progressiveReadListeners = [];\n      this._progressiveDoneListeners = [];\n      this._readyCapability = (0, _util.createPromiseCapability)();\n    }\n\n    addRangeListener(listener) {\n      this._rangeListeners.push(listener);\n    }\n\n    addProgressListener(listener) {\n      this._progressListeners.push(listener);\n    }\n\n    addProgressiveReadListener(listener) {\n      this._progressiveReadListeners.push(listener);\n    }\n\n    addProgressiveDoneListener(listener) {\n      this._progressiveDoneListeners.push(listener);\n    }\n\n    onDataRange(begin, chunk) {\n      for (const listener of this._rangeListeners) {\n        listener(begin, chunk);\n      }\n    }\n\n    onDataProgress(loaded, total) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressListeners) {\n          listener(loaded, total);\n        }\n      });\n    }\n\n    onDataProgressiveRead(chunk) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveReadListeners) {\n          listener(chunk);\n        }\n      });\n    }\n\n    onDataProgressiveDone() {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveDoneListeners) {\n          listener();\n        }\n      });\n    }\n\n    transportReady() {\n      this._readyCapability.resolve();\n    }\n\n    requestDataRange(begin, end) {\n      (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n    }\n\n    abort() {}\n\n  }\n\n  exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n  class PDFDocumentProxy {\n    constructor(pdfInfo, transport) {\n      this._pdfInfo = pdfInfo;\n      this._transport = transport;\n    }\n\n    get annotationStorage() {\n      return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n    }\n\n    get numPages() {\n      return this._pdfInfo.numPages;\n    }\n\n    get fingerprint() {\n      return this._pdfInfo.fingerprint;\n    }\n\n    getPage(pageNumber) {\n      return this._transport.getPage(pageNumber);\n    }\n\n    getPageIndex(ref) {\n      return this._transport.getPageIndex(ref);\n    }\n\n    getDestinations() {\n      return this._transport.getDestinations();\n    }\n\n    getDestination(id) {\n      return this._transport.getDestination(id);\n    }\n\n    getPageLabels() {\n      return this._transport.getPageLabels();\n    }\n\n    getPageLayout() {\n      return this._transport.getPageLayout();\n    }\n\n    getPageMode() {\n      return this._transport.getPageMode();\n    }\n\n    getViewerPreferences() {\n      return this._transport.getViewerPreferences();\n    }\n\n    getOpenAction() {\n      return this._transport.getOpenAction();\n    }\n\n    getAttachments() {\n      return this._transport.getAttachments();\n    }\n\n    getJavaScript() {\n      return this._transport.getJavaScript();\n    }\n\n    getJSActions() {\n      return this._transport.getDocJSActions();\n    }\n\n    getOutline() {\n      return this._transport.getOutline();\n    }\n\n    getOptionalContentConfig() {\n      return this._transport.getOptionalContentConfig();\n    }\n\n    getPermissions() {\n      return this._transport.getPermissions();\n    }\n\n    getMetadata() {\n      return this._transport.getMetadata();\n    }\n\n    getMarkInfo() {\n      return this._transport.getMarkInfo();\n    }\n\n    getData() {\n      return this._transport.getData();\n    }\n\n    getDownloadInfo() {\n      return this._transport.downloadInfoCapability.promise;\n    }\n\n    getStats() {\n      return this._transport.getStats();\n    }\n\n    cleanup() {\n      return this._transport.startCleanup();\n    }\n\n    destroy() {\n      return this.loadingTask.destroy();\n    }\n\n    get loadingParams() {\n      return this._transport.loadingParams;\n    }\n\n    get loadingTask() {\n      return this._transport.loadingTask;\n    }\n\n    saveDocument(annotationStorage) {\n      return this._transport.saveDocument(annotationStorage);\n    }\n\n    getFieldObjects() {\n      return this._transport.getFieldObjects();\n    }\n\n    hasJSActions() {\n      return this._transport.hasJSActions();\n    }\n\n    getCalculationOrderIds() {\n      return this._transport.getCalculationOrderIds();\n    }\n\n  }\n\n  exports.PDFDocumentProxy = PDFDocumentProxy;\n\n  class PDFPageProxy {\n    constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n      this._pageIndex = pageIndex;\n      this._pageInfo = pageInfo;\n      this._ownerDocument = ownerDocument;\n      this._transport = transport;\n      this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n      this._pdfBug = pdfBug;\n      this.commonObjs = transport.commonObjs;\n      this.objs = new PDFObjects();\n      this.cleanupAfterRender = false;\n      this.pendingCleanup = false;\n      this._intentStates = new Map();\n      this.destroyed = false;\n    }\n\n    get pageNumber() {\n      return this._pageIndex + 1;\n    }\n\n    get rotate() {\n      return this._pageInfo.rotate;\n    }\n\n    get ref() {\n      return this._pageInfo.ref;\n    }\n\n    get userUnit() {\n      return this._pageInfo.userUnit;\n    }\n\n    get view() {\n      return this._pageInfo.view;\n    }\n\n    getViewport({\n      scale,\n      rotation = this.rotate,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    } = {}) {\n      return new _display_utils.PageViewport({\n        viewBox: this.view,\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n\n    getAnnotations({\n      intent = null\n    } = {}) {\n      if (!this.annotationsPromise || this.annotationsIntent !== intent) {\n        this.annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);\n        this.annotationsIntent = intent;\n      }\n\n      return this.annotationsPromise;\n    }\n\n    getJSActions() {\n      return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));\n    }\n\n    render({\n      canvasContext,\n      viewport,\n      intent = \"display\",\n      enableWebGL = false,\n      renderInteractiveForms = false,\n      transform = null,\n      imageLayer = null,\n      canvasFactory = null,\n      background = null,\n      annotationStorage = null,\n      optionalContentConfigPromise = null\n    }) {\n      if (this._stats) {\n        this._stats.time(\"Overall\");\n      }\n\n      const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n      this.pendingCleanup = false;\n\n      if (!optionalContentConfigPromise) {\n        optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n      }\n\n      let intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      if (intentState.streamReaderCancelTimeout) {\n        clearTimeout(intentState.streamReaderCancelTimeout);\n        intentState.streamReaderCancelTimeout = null;\n      }\n\n      const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n        ownerDocument: this._ownerDocument\n      });\n      const webGLContext = new _webgl.WebGLContext({\n        enable: enableWebGL\n      });\n\n      if (!intentState.displayReadyCapability) {\n        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent,\n          renderInteractiveForms: renderInteractiveForms === true,\n          annotationStorage: annotationStorage && annotationStorage.getAll() || null  // lwf\n        });\n      }\n\n      const complete = error => {\n        const i = intentState.renderTasks.indexOf(internalRenderTask);\n\n        if (i >= 0) {\n          intentState.renderTasks.splice(i, 1);\n        }\n\n        if (this.cleanupAfterRender || renderingIntent === \"print\") {\n          this.pendingCleanup = true;\n        }\n\n        this._tryCleanup();\n\n        if (error) {\n          internalRenderTask.capability.reject(error);\n\n          this._abortOperatorList({\n            intentState,\n            reason: error\n          });\n        } else {\n          internalRenderTask.capability.resolve();\n        }\n\n        if (this._stats) {\n          this._stats.timeEnd(\"Rendering\");\n\n          this._stats.timeEnd(\"Overall\");\n        }\n      };\n\n      const internalRenderTask = new InternalRenderTask({\n        callback: complete,\n        params: {\n          canvasContext,\n          viewport,\n          transform,\n          imageLayer,\n          background\n        },\n        objs: this.objs,\n        commonObjs: this.commonObjs,\n        operatorList: intentState.operatorList,\n        pageIndex: this._pageIndex,\n        canvasFactory: canvasFactoryInstance,\n        webGLContext,\n        useRequestAnimationFrame: renderingIntent !== \"print\",\n        pdfBug: this._pdfBug\n      });\n\n      if (!intentState.renderTasks) {\n        intentState.renderTasks = [];\n      }\n\n      intentState.renderTasks.push(internalRenderTask);\n      const renderTask = internalRenderTask.task;\n      Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig\n        });\n        internalRenderTask.operatorListChanged();\n      }).catch(complete);\n      return renderTask;\n    }\n\n    getOperatorList() {\n      function operatorListChanged() {\n        if (intentState.operatorList.lastChunk) {\n          intentState.opListReadCapability.resolve(intentState.operatorList);\n          const i = intentState.renderTasks.indexOf(opListTask);\n\n          if (i >= 0) {\n            intentState.renderTasks.splice(i, 1);\n          }\n        }\n      }\n\n      const renderingIntent = \"oplist\";\n\n      let intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      let opListTask;\n\n      if (!intentState.opListReadCapability) {\n        opListTask = Object.create(null);\n        opListTask.operatorListChanged = operatorListChanged;\n        intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n        intentState.renderTasks = [];\n        intentState.renderTasks.push(opListTask);\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent\n        });\n      }\n\n      return intentState.opListReadCapability.promise;\n    }\n\n    streamTextContent({\n      normalizeWhitespace = false,\n      disableCombineTextItems = false\n    } = {}) {\n      const TEXT_CONTENT_CHUNK_SIZE = 100;\n      return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true\n      }, {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n        size(textContent) {\n          return textContent.items.length;\n        }\n\n      });\n    }\n\n    getTextContent(params = {}) {\n      const readableStream = this.streamTextContent(params);\n      return new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              resolve(textContent);\n              return;\n            }\n\n            Object.assign(textContent.styles, value.styles);\n            textContent.items.push(...value.items);\n            pump();\n          }, reject);\n        }\n\n        const reader = readableStream.getReader();\n        const textContent = {\n          items: [],\n          styles: Object.create(null)\n        };\n        pump();\n      });\n    }\n\n    _destroy() {\n      this.destroyed = true;\n      this._transport.pageCache[this._pageIndex] = null;\n      const waitOn = [];\n\n      for (const [intent, intentState] of this._intentStates) {\n        this._abortOperatorList({\n          intentState,\n          reason: new Error(\"Page was destroyed.\"),\n          force: true\n        });\n\n        if (intent === \"oplist\") {\n          continue;\n        }\n\n        for (const internalRenderTask of intentState.renderTasks) {\n          waitOn.push(internalRenderTask.completed);\n          internalRenderTask.cancel();\n        }\n      }\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n      this.pendingCleanup = false;\n      return Promise.all(waitOn);\n    }\n\n    cleanup(resetStats = false) {\n      this.pendingCleanup = true;\n      return this._tryCleanup(resetStats);\n    }\n\n    _tryCleanup(resetStats = false) {\n      if (!this.pendingCleanup) {\n        return false;\n      }\n\n      for (const {\n        renderTasks,\n        operatorList\n      } of this._intentStates.values()) {\n        if (renderTasks.length !== 0 || !operatorList.lastChunk) {\n          return false;\n        }\n      }\n\n      this._intentStates.clear();\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n\n      if (resetStats && this._stats) {\n        this._stats = new _display_utils.StatTimer();\n      }\n\n      this.pendingCleanup = false;\n      return true;\n    }\n\n    _startRenderPage(transparency, intent) {\n      const intentState = this._intentStates.get(intent);\n\n      if (!intentState) {\n        return;\n      }\n\n      if (this._stats) {\n        this._stats.timeEnd(\"Page Request\");\n      }\n\n      if (intentState.displayReadyCapability) {\n        intentState.displayReadyCapability.resolve(transparency);\n      }\n    }\n\n    _renderPageChunk(operatorListChunk, intentState) {\n      for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n      }\n\n      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n      for (let i = 0; i < intentState.renderTasks.length; i++) {\n        intentState.renderTasks[i].operatorListChanged();\n      }\n\n      if (operatorListChunk.lastChunk) {\n        this._tryCleanup();\n      }\n    }\n\n    _pumpOperatorList(args) {\n      (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.');\n\n      const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", args);\n\n      const reader = readableStream.getReader();\n\n      const intentState = this._intentStates.get(args.intent);\n\n      intentState.streamReader = reader;\n\n      const pump = () => {\n        reader.read().then(({\n          value,\n          done\n        }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n\n          if (this._transport.destroyed) {\n            return;\n          }\n\n          this._renderPageChunk(value, intentState);\n\n          pump();\n        }, reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return;\n          }\n\n          if (intentState.operatorList) {\n            intentState.operatorList.lastChunk = true;\n\n            for (let i = 0; i < intentState.renderTasks.length; i++) {\n              intentState.renderTasks[i].operatorListChanged();\n            }\n\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        });\n      };\n\n      pump();\n    }\n\n    _abortOperatorList({\n      intentState,\n      reason,\n      force = false\n    }) {\n      (0, _util.assert)(reason instanceof Error || typeof reason === \"object\" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.');\n\n      if (!intentState.streamReader) {\n        return;\n      }\n\n      if (!force) {\n        if (intentState.renderTasks.length !== 0) {\n          return;\n        }\n\n        if (reason instanceof _display_utils.RenderingCancelledException) {\n          intentState.streamReaderCancelTimeout = setTimeout(() => {\n            this._abortOperatorList({\n              intentState,\n              reason,\n              force: true\n            });\n\n            intentState.streamReaderCancelTimeout = null;\n          }, RENDERING_CANCELLED_TIMEOUT);\n          return;\n        }\n      }\n\n      intentState.streamReader.cancel(new _util.AbortException(reason && reason.message)); // lwf\n      intentState.streamReader = null;\n\n      if (this._transport.destroyed) {\n        return;\n      }\n\n      for (const [intent, curIntentState] of this._intentStates) {\n        if (curIntentState === intentState) {\n          this._intentStates.delete(intent);\n\n          break;\n        }\n      }\n\n      this.cleanup();\n    }\n\n    get stats() {\n      return this._stats;\n    }\n\n  }\n\n  exports.PDFPageProxy = PDFPageProxy;\n\n  class LoopbackPort {\n    constructor(defer = true) {\n      this._listeners = [];\n      this._defer = defer;\n      this._deferred = Promise.resolve(undefined);\n    }\n\n    postMessage(obj, transfers) {\n      function cloneValue(value) {\n        if (typeof value !== \"object\" || value === null) {\n          return value;\n        }\n\n        if (cloned.has(value)) {\n          return cloned.get(value);\n        }\n\n        let buffer, result;\n\n        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n          if (transfers && transfers.includes(buffer)) { // lwf\n            result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n          } else {\n            result = new value.constructor(value);\n          }\n\n          cloned.set(value, result);\n          return result;\n        }\n\n        result = Array.isArray(value) ? [] : {};\n        cloned.set(value, result);\n\n        for (const i in value) {\n          let desc,\n              p = value;\n\n          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n            p = Object.getPrototypeOf(p);\n          }\n\n          if (typeof desc.value === \"undefined\") {\n            continue;\n          }\n\n          if (typeof desc.value === \"function\") {\n            if (value.hasOwnProperty && value.hasOwnProperty(i)) {\n              throw new Error(`LoopbackPort.postMessage - cannot clone: ${value[i]}`);\n            }\n\n            continue;\n          }\n\n          result[i] = cloneValue(desc.value);\n        }\n\n        return result;\n      }\n\n      if (!this._defer) {\n        this._listeners.forEach(listener => {\n          listener.call(this, {\n            data: obj\n          });\n        });\n\n        return;\n      }\n\n      const cloned = new WeakMap();\n      const e = {\n        data: cloneValue(obj)\n      };\n\n      this._deferred.then(() => {\n        this._listeners.forEach(listener => {\n          listener.call(this, e);\n        });\n      });\n    }\n\n    addEventListener(name, listener) {\n      this._listeners.push(listener);\n    }\n\n    removeEventListener(name, listener) {\n      const i = this._listeners.indexOf(listener);\n\n      this._listeners.splice(i, 1);\n    }\n\n    terminate() {\n      this._listeners.length = 0;\n    }\n\n  }\n\n  exports.LoopbackPort = LoopbackPort;\n\n  const PDFWorker = function PDFWorkerClosure() {\n    const pdfWorkerPorts = new WeakMap();\n    let isWorkerDisabled = false;\n    let fallbackWorkerSrc;\n    let nextFakeWorkerId = 0;\n    let fakeWorkerCapability;\n\n    if (_is_node.isNodeJS && typeof require === \"function\") {\n      isWorkerDisabled = true;\n      fallbackWorkerSrc = \"./skylark-pdfjs-worker-all.js\"; //\"./pdf.worker.js\";\n    } else if (typeof document === \"object\" && \"currentScript\" in document) {\n      const pdfjsFilePath = document.currentScript && document.currentScript.src; // lwf\n\n      if (pdfjsFilePath) {\n        fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n      }\n    }\n\n    function getWorkerSrc() {\n      if (_worker_options.GlobalWorkerOptions.workerSrc) {\n        return _worker_options.GlobalWorkerOptions.workerSrc;\n      }\n\n      if (typeof fallbackWorkerSrc !== \"undefined\") {\n        if (!_is_node.isNodeJS) {\n          (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n        }\n\n        return fallbackWorkerSrc;\n      }\n\n      throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n    }\n\n    function getMainThreadWorkerMessageHandler() {\n      let mainWorkerMessageHandler;\n\n      try {\n        mainWorkerMessageHandler = globalThis.pdfjsWorker && globalThis.pdfjsWorker.WorkerMessageHandler;  // lwf\n      } catch (ex) {}\n\n      return mainWorkerMessageHandler || null;\n    }\n\n    function setupFakeWorkerGlobal() {\n      if (fakeWorkerCapability) {\n        return fakeWorkerCapability.promise;\n      }\n\n      fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n      const loader = async function () {\n        const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n        if (mainWorkerMessageHandler) {\n          return mainWorkerMessageHandler;\n        }\n\n        if (_is_node.isNodeJS && typeof require === \"function\") {\n          const worker = eval(\"require\")(getWorkerSrc());\n          return worker.WorkerMessageHandler;\n        }\n\n        await (0, _display_utils.loadScript)(getWorkerSrc());\n        return window.pdfjsWorker.WorkerMessageHandler;\n      };\n\n      loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n      return fakeWorkerCapability.promise;\n    }\n\n    function createCDNWrapper(url) {\n      const wrapper = \"importScripts('\" + url + \"');\";\n      return URL.createObjectURL(new Blob([wrapper]));\n    }\n\n    class PDFWorker {\n      constructor({\n        name = null,\n        port = null,\n        verbosity = (0, _util.getVerbosityLevel)()\n      } = {}) {\n        if (port && pdfWorkerPorts.has(port)) {\n          throw new Error(\"Cannot use more than one PDFWorker per port\");\n        }\n\n        this.name = name;\n        this.destroyed = false;\n        this.postMessageTransfers = true;\n        this.verbosity = verbosity;\n        this._readyCapability = (0, _util.createPromiseCapability)();\n        this._port = null;\n        this._webWorker = null;\n        this._messageHandler = null;\n\n        if (port) {\n          pdfWorkerPorts.set(port, this);\n\n          this._initializeFromPort(port);\n\n          return;\n        }\n\n        this._initialize();\n      }\n\n      get promise() {\n        return this._readyCapability.promise;\n      }\n\n      get port() {\n        return this._port;\n      }\n\n      get messageHandler() {\n        return this._messageHandler;\n      }\n\n      _initializeFromPort(port) {\n        this._port = port;\n        this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n        this._messageHandler.on(\"ready\", function () {});\n\n        this._readyCapability.resolve();\n      }\n\n      _initialize() {\n        if (typeof Worker !== \"undefined\" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n          let workerSrc = getWorkerSrc();\n\n          try {\n            if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n              workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n            }\n\n            const worker = new Worker(workerSrc);\n            const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n            const terminateEarly = () => {\n              worker.removeEventListener(\"error\", onWorkerError);\n              messageHandler.destroy();\n              worker.terminate();\n\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n              } else {\n                this._setupFakeWorker();\n              }\n            };\n\n            const onWorkerError = () => {\n              if (!this._webWorker) {\n                terminateEarly();\n              }\n            };\n\n            worker.addEventListener(\"error\", onWorkerError);\n            messageHandler.on(\"test\", data => {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (this.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              if (data) {\n                this._messageHandler = messageHandler;\n                this._port = worker;\n                this._webWorker = worker;\n\n                if (!data.supportTransfers) {\n                  this.postMessageTransfers = false;\n                }\n\n                this._readyCapability.resolve();\n\n                messageHandler.send(\"configure\", {\n                  verbosity: this.verbosity\n                });\n              } else {\n                this._setupFakeWorker();\n\n                messageHandler.destroy();\n                worker.terminate();\n              }\n            });\n            messageHandler.on(\"ready\", data => {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (this.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              try {\n                sendTest();\n              } catch (e) {\n                this._setupFakeWorker();\n              }\n            });\n\n            const sendTest = () => {\n              const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n              try {\n                messageHandler.send(\"test\", testObj, [testObj.buffer]);\n              } catch (ex) {\n                (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                testObj[0] = 0;\n                messageHandler.send(\"test\", testObj);\n              }\n            };\n\n            sendTest();\n            return;\n          } catch (e) {\n            (0, _util.info)(\"The worker has been disabled.\");\n          }\n        }\n\n        this._setupFakeWorker();\n      }\n\n      _setupFakeWorker() {\n        if (!isWorkerDisabled) {\n          (0, _util.warn)(\"Setting up fake worker.\");\n          isWorkerDisabled = true;\n        }\n\n        setupFakeWorkerGlobal().then(WorkerMessageHandler => {\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n            return;\n          }\n\n          const port = new LoopbackPort();\n          this._port = port;\n          const id = \"fake\" + nextFakeWorkerId++;\n          const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n          WorkerMessageHandler.setup(workerHandler, port);\n          const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n          this._messageHandler = messageHandler;\n\n          this._readyCapability.resolve();\n\n          messageHandler.send(\"configure\", {\n            verbosity: this.verbosity\n          });\n        }).catch(reason => {\n          this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n        });\n      }\n\n      destroy() {\n        this.destroyed = true;\n\n        if (this._webWorker) {\n          this._webWorker.terminate();\n\n          this._webWorker = null;\n        }\n\n        pdfWorkerPorts.delete(this._port);\n        this._port = null;\n\n        if (this._messageHandler) {\n          this._messageHandler.destroy();\n\n          this._messageHandler = null;\n        }\n      }\n\n      static fromPort(params) {\n        if (!params || !params.port) {\n          throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n        }\n\n        if (pdfWorkerPorts.has(params.port)) {\n          return pdfWorkerPorts.get(params.port);\n        }\n\n        return new PDFWorker(params);\n      }\n\n      static getWorkerSrc() {\n        return getWorkerSrc();\n      }\n\n    }\n\n    return PDFWorker;\n  }();\n\n  exports.PDFWorker = PDFWorker;\n\n  class WorkerTransport {\n    constructor(messageHandler, loadingTask, networkStream, params) {\n      this.messageHandler = messageHandler;\n      this.loadingTask = loadingTask;\n      this.commonObjs = new PDFObjects();\n      this.fontLoader = new _font_loader.FontLoader({\n        docId: loadingTask.docId,\n        onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n        ownerDocument: params.ownerDocument\n      });\n      this._params = params;\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked\n      });\n      this.destroyed = false;\n      this.destroyCapability = null;\n      this._passwordCapability = null;\n      this._networkStream = networkStream;\n      this._fullReader = null;\n      this._lastProgress = null;\n      this.pageCache = [];\n      this.pagePromises = [];\n      this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n      this.setupMessageHandler();\n    }\n\n    get loadingTaskSettled() {\n      return this.loadingTask._capability.settled;\n    }\n\n    destroy() {\n      if (this.destroyCapability) {\n        return this.destroyCapability.promise;\n      }\n\n      this.destroyed = true;\n      this.destroyCapability = (0, _util.createPromiseCapability)();\n\n      if (this._passwordCapability) {\n        this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n      }\n\n      const waitOn = [];\n      this.pageCache.forEach(function (page) {\n        if (page) {\n          waitOn.push(page._destroy());\n        }\n      });\n      this.pageCache.length = 0;\n      this.pagePromises.length = 0;\n      const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n      waitOn.push(terminated);\n\n      if (this.loadingTaskSettled) {\n        const annotationStorageResetModified = this.loadingTask.promise.then(pdfDocument => {\n          if (pdfDocument.hasOwnProperty(\"annotationStorage\")) {\n            pdfDocument.annotationStorage.resetModified();\n          }\n        }).catch(() => {});\n        waitOn.push(annotationStorageResetModified);\n      }\n\n      Promise.all(waitOn).then(() => {\n        this.commonObjs.clear();\n        this.fontLoader.clear();\n        this._hasJSActionsPromise = null;\n\n        if (this._networkStream) {\n          this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n        }\n\n        if (this.messageHandler) {\n          this.messageHandler.destroy();\n          this.messageHandler = null;\n        }\n\n        this.destroyCapability.resolve();\n      }, this.destroyCapability.reject);\n      return this.destroyCapability.promise;\n    }\n\n    setupMessageHandler() {\n      const {\n        messageHandler,\n        loadingTask\n      } = this;\n      messageHandler.on(\"GetReader\", (data, sink) => {\n        (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n        this._fullReader = this._networkStream.getFullReader();\n\n        this._fullReader.onProgress = evt => {\n          this._lastProgress = {\n            loaded: evt.loaded,\n            total: evt.total\n          };\n        };\n\n        sink.onPull = () => {\n          this._fullReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = reason => {\n          this._fullReader.cancel(reason);\n\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"ReaderHeadersReady\", data => {\n        const headersCapability = (0, _util.createPromiseCapability)();\n        const fullReader = this._fullReader;\n        fullReader.headersReady.then(() => {\n          if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n            if (this._lastProgress && loadingTask.onProgress) {\n              loadingTask.onProgress(this._lastProgress);\n            }\n\n            fullReader.onProgress = evt => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            };\n          }\n\n          headersCapability.resolve({\n            isStreamingSupported: fullReader.isStreamingSupported,\n            isRangeSupported: fullReader.isRangeSupported,\n            contentLength: fullReader.contentLength\n          });\n        }, headersCapability.reject);\n        return headersCapability.promise;\n      });\n      messageHandler.on(\"GetRangeReader\", (data, sink) => {\n        (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n        const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n        if (!rangeReader) {\n          sink.close();\n          return;\n        }\n\n        sink.onPull = () => {\n          rangeReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = reason => {\n          rangeReader.cancel(reason);\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"GetDoc\", ({\n        pdfInfo\n      }) => {\n        this._numPages = pdfInfo.numPages;\n\n        loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n      });\n      messageHandler.on(\"DocException\", function (ex) {\n        let reason;\n\n        switch (ex.name) {\n          case \"PasswordException\":\n            reason = new _util.PasswordException(ex.message, ex.code);\n            break;\n\n          case \"InvalidPDFException\":\n            reason = new _util.InvalidPDFException(ex.message);\n            break;\n\n          case \"MissingPDFException\":\n            reason = new _util.MissingPDFException(ex.message);\n            break;\n\n          case \"UnexpectedResponseException\":\n            reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n            break;\n\n          case \"UnknownErrorException\":\n            reason = new _util.UnknownErrorException(ex.message, ex.details);\n            break;\n        }\n\n        if (!(reason instanceof Error)) {\n          const msg = \"DocException - expected a valid Error.\";\n          (0, _util.warn)(msg);\n        }\n\n        loadingTask._capability.reject(reason);\n      });\n      messageHandler.on(\"PasswordRequest\", exception => {\n        this._passwordCapability = (0, _util.createPromiseCapability)();\n\n        if (loadingTask.onPassword) {\n          const updatePassword = password => {\n            this._passwordCapability.resolve({\n              password\n            });\n          };\n\n          try {\n            loadingTask.onPassword(updatePassword, exception.code);\n          } catch (ex) {\n            this._passwordCapability.reject(ex);\n          }\n        } else {\n          this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n        }\n\n        return this._passwordCapability.promise;\n      });\n      messageHandler.on(\"DataLoaded\", data => {\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.length,\n            total: data.length\n          });\n        }\n\n        this.downloadInfoCapability.resolve(data);\n      });\n      messageHandler.on(\"StartRenderPage\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        const page = this.pageCache[data.pageIndex];\n\n        page._startRenderPage(data.transparency, data.intent);\n      });\n      messageHandler.on(\"commonobj\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        const [id, type, exportedData] = data;\n\n        if (this.commonObjs.has(id)) {\n          return;\n        }\n\n        switch (type) {\n          case \"Font\":\n            const params = this._params;\n\n            if (\"error\" in exportedData) {\n              const exportedError = exportedData.error;\n              (0, _util.warn)(`Error during font loading: ${exportedError}`);\n              this.commonObjs.resolve(id, exportedError);\n              break;\n            }\n\n            let fontRegistry = null;\n\n            if (params.pdfBug && globalThis.FontInspector && globalThis.FontInspector.enabled) { //lwf\n              fontRegistry = {\n                registerFont(font, url) {\n                  globalThis.FontInspector.fontAdded(font, url);\n                }\n\n              };\n            }\n\n            const font = new _font_loader.FontFaceObject(exportedData, {\n              isEvalSupported: params.isEvalSupported,\n              disableFontFace: params.disableFontFace,\n              ignoreErrors: params.ignoreErrors,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              fontRegistry\n            });\n            this.fontLoader.bind(font).catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", {\n                id\n              });\n            }).finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                font.data = null;\n              }\n\n              this.commonObjs.resolve(id, font);\n            });\n            break;\n\n          case \"FontPath\":\n          case \"Image\":\n            this.commonObjs.resolve(id, exportedData);\n            break;\n\n          default:\n            throw new Error(`Got unknown common object type ${type}`);\n        }\n      });\n      messageHandler.on(\"obj\", data => {\n        if (this.destroyed) {\n          return undefined;\n        }\n\n        const [id, pageIndex, type, imageData] = data;\n        const pageProxy = this.pageCache[pageIndex];\n\n        if (pageProxy.objs.has(id)) {\n          return undefined;\n        }\n\n        switch (type) {\n          case \"Image\":\n            pageProxy.objs.resolve(id, imageData);\n            const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n            if (imageData && imageData.data && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) { //lwf\n              pageProxy.cleanupAfterRender = true;\n            }\n\n            break;\n\n          default:\n            throw new Error(`Got unknown object type ${type}`);\n        }\n\n        return undefined;\n      });\n      messageHandler.on(\"DocProgress\", data => {\n        if (this.destroyed) {\n          return;\n        }\n\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.loaded,\n            total: data.total\n          });\n        }\n      });\n      messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n      messageHandler.on(\"FetchBuiltInCMap\", (data, sink) => {\n        if (this.destroyed) {\n          sink.error(new Error(\"Worker was destroyed\"));\n          return;\n        }\n\n        let fetched = false;\n\n        sink.onPull = () => {\n          if (fetched) {\n            sink.close();\n            return;\n          }\n\n          fetched = true;\n          this.CMapReaderFactory.fetch(data).then(function (builtInCMap) {\n            sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n          }).catch(function (reason) {\n            sink.error(reason);\n          });\n        };\n      });\n    }\n\n    _onUnsupportedFeature({\n      featureId\n    }) {\n      if (this.destroyed) {\n        return;\n      }\n\n      if (this.loadingTask.onUnsupportedFeature) {\n        this.loadingTask.onUnsupportedFeature(featureId);\n      }\n    }\n\n    getData() {\n      return this.messageHandler.sendWithPromise(\"GetData\", null);\n    }\n\n    getPage(pageNumber) {\n      if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n        return Promise.reject(new Error(\"Invalid page request\"));\n      }\n\n      const pageIndex = pageNumber - 1;\n\n      if (pageIndex in this.pagePromises) {\n        return this.pagePromises[pageIndex];\n      }\n\n      const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n        pageIndex\n      }).then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n\n        const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n      this.pagePromises[pageIndex] = promise;\n      return promise;\n    }\n\n    getPageIndex(ref) {\n      return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n        ref\n      }).catch(function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n    }\n\n    getAnnotations(pageIndex, intent) {\n      return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n        pageIndex,\n        intent\n      });\n    }\n\n    saveDocument(annotationStorage) {\n      return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n        numPages: this._numPages,\n        annotationStorage: annotationStorage && annotationStorage.getAll() || null,  // lwf\n        filename: this._fullReader && this._fullReader.filename || null // lwf\n      }).finally(() => {\n        if (annotationStorage) {\n          annotationStorage.resetModified();\n        }\n      });\n    }\n\n    getFieldObjects() {\n      return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n    }\n\n    hasJSActions() {\n      return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise(\"HasJSActions\", null));\n    }\n\n    getCalculationOrderIds() {\n      return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n    }\n\n    getDestinations() {\n      return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n    }\n\n    getDestination(id) {\n      if (typeof id !== \"string\") {\n        return Promise.reject(new Error(\"Invalid destination request.\"));\n      }\n\n      return this.messageHandler.sendWithPromise(\"GetDestination\", {\n        id\n      });\n    }\n\n    getPageLabels() {\n      return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n    }\n\n    getPageLayout() {\n      return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n    }\n\n    getPageMode() {\n      return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n    }\n\n    getViewerPreferences() {\n      return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n    }\n\n    getOpenAction() {\n      return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n    }\n\n    getAttachments() {\n      return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n    }\n\n    getJavaScript() {\n      return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n    }\n\n    getDocJSActions() {\n      return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n    }\n\n    getPageJSActions(pageIndex) {\n      return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n        pageIndex\n      });\n    }\n\n    getOutline() {\n      return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n    }\n\n    getOptionalContentConfig() {\n      return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n        return new _optional_content_config.OptionalContentConfig(results);\n      });\n    }\n\n    getPermissions() {\n      return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n    }\n\n    getMetadata() {\n      return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader && this._fullReader.filename || null, // lwf\n          contentLength: this._fullReader && this._fullReader.contentLength || null  // lwf\n        };\n      });\n    }\n\n    getMarkInfo() {\n      return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n    }\n\n    getStats() {\n      return this.messageHandler.sendWithPromise(\"GetStats\", null);\n    }\n\n    startCleanup() {\n      return this.messageHandler.sendWithPromise(\"Cleanup\", null).then(() => {\n        for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n          const page = this.pageCache[i];\n\n          if (page) {\n            const cleanupSuccessful = page.cleanup();\n\n            if (!cleanupSuccessful) {\n              throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n            }\n          }\n        }\n\n        this.commonObjs.clear();\n        this.fontLoader.clear();\n        this._hasJSActionsPromise = null;\n      });\n    }\n\n    get loadingParams() {\n      const params = this._params;\n      return (0, _util.shadow)(this, \"loadingParams\", {\n        disableAutoFetch: params.disableAutoFetch,\n        disableFontFace: params.disableFontFace\n      });\n    }\n\n  }\n\n  class PDFObjects {\n    constructor() {\n      this._objs = Object.create(null);\n    }\n\n    _ensureObj(objId) {\n      if (this._objs[objId]) {\n        return this._objs[objId];\n      }\n\n      return this._objs[objId] = {\n        capability: (0, _util.createPromiseCapability)(),\n        data: null,\n        resolved: false\n      };\n    }\n\n    get(objId, callback = null) {\n      if (callback) {\n        this._ensureObj(objId).capability.promise.then(callback);\n\n        return null;\n      }\n\n      const obj = this._objs[objId];\n\n      if (!obj || !obj.resolved) {\n        throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n      }\n\n      return obj.data;\n    }\n\n    has(objId) {\n      const obj = this._objs[objId];\n      return obj && obj.resolved || false; // lwf\n    }\n\n    resolve(objId, data) {\n      const obj = this._ensureObj(objId);\n\n      obj.resolved = true;\n      obj.data = data;\n      obj.capability.resolve(data);\n    }\n\n    clear() {\n      this._objs = Object.create(null);\n    }\n\n  }\n\n  class RenderTask {\n    constructor(internalRenderTask) {\n      this._internalRenderTask = internalRenderTask;\n      this.onContinue = null;\n    }\n\n    get promise() {\n      return this._internalRenderTask.capability.promise;\n    }\n\n    cancel() {\n      this._internalRenderTask.cancel();\n    }\n\n  }\n\n  const InternalRenderTask = function InternalRenderTaskClosure() {\n    const canvasInRendering = new WeakSet();\n\n    class InternalRenderTask {\n      constructor({\n        callback,\n        params,\n        objs,\n        commonObjs,\n        operatorList,\n        pageIndex,\n        canvasFactory,\n        webGLContext,\n        useRequestAnimationFrame = false,\n        pdfBug = false\n      }) {\n        this.callback = callback;\n        this.params = params;\n        this.objs = objs;\n        this.commonObjs = commonObjs;\n        this.operatorListIdx = null;\n        this.operatorList = operatorList;\n        this._pageIndex = pageIndex;\n        this.canvasFactory = canvasFactory;\n        this.webGLContext = webGLContext;\n        this._pdfBug = pdfBug;\n        this.running = false;\n        this.graphicsReadyCallback = null;\n        this.graphicsReady = false;\n        this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n        this.cancelled = false;\n        this.capability = (0, _util.createPromiseCapability)();\n        this.task = new RenderTask(this);\n        this._continueBound = this._continue.bind(this);\n        this._scheduleNextBound = this._scheduleNext.bind(this);\n        this._nextBound = this._next.bind(this);\n        this._canvas = params.canvasContext.canvas;\n      }\n\n      get completed() {\n        return this.capability.promise.catch(function () {});\n      }\n\n      initializeGraphics({\n        transparency = false,\n        optionalContentConfig\n      }) {\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this._canvas) {\n          if (canvasInRendering.has(this._canvas)) {\n            throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n          }\n\n          canvasInRendering.add(this._canvas);\n        }\n\n        if (this._pdfBug && globalThis.StepperManager && globalThis.StepperManager.enabled) { // lwf\n          this.stepper = globalThis.StepperManager.create(this._pageIndex);\n          this.stepper.init(this.operatorList);\n          this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n        }\n\n        const {\n          canvasContext,\n          viewport,\n          transform,\n          imageLayer,\n          background\n        } = this.params;\n        this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);\n        this.gfx.beginDrawing({\n          transform,\n          viewport,\n          transparency,\n          background\n        });\n        this.operatorListIdx = 0;\n        this.graphicsReady = true;\n\n        if (this.graphicsReadyCallback) {\n          this.graphicsReadyCallback();\n        }\n      }\n\n      cancel(error = null) {\n        this.running = false;\n        this.cancelled = true;\n\n        if (this.gfx) {\n          this.gfx.endDrawing();\n        }\n\n        if (this._canvas) {\n          canvasInRendering.delete(this._canvas);\n        }\n\n        this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n      }\n\n      operatorListChanged() {\n        if (!this.graphicsReady) {\n          if (!this.graphicsReadyCallback) {\n            this.graphicsReadyCallback = this._continueBound;\n          }\n\n          return;\n        }\n\n        if (this.stepper) {\n          this.stepper.updateOperatorList(this.operatorList);\n        }\n\n        if (this.running) {\n          return;\n        }\n\n        this._continue();\n      }\n\n      _continue() {\n        this.running = true;\n\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this.task.onContinue) {\n          this.task.onContinue(this._scheduleNextBound);\n        } else {\n          this._scheduleNext();\n        }\n      }\n\n      _scheduleNext() {\n        if (this._useRequestAnimationFrame) {\n          window.requestAnimationFrame(() => {\n            this._nextBound().catch(this.cancel.bind(this));\n          });\n        } else {\n          Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this));\n        }\n      }\n\n      async _next() {\n        if (this.cancelled) {\n          return;\n        }\n\n        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n        if (this.operatorListIdx === this.operatorList.argsArray.length) {\n          this.running = false;\n\n          if (this.operatorList.lastChunk) {\n            this.gfx.endDrawing();\n\n            if (this._canvas) {\n              canvasInRendering.delete(this._canvas);\n            }\n\n            this.callback();\n          }\n        }\n      }\n\n    }\n\n    return InternalRenderTask;\n  }();\n\n  const version = '2.7.570';\n  exports.version = version;\n  const build = 'f2c7338b0';\n  exports.build = build;\n\n  /***/ }),\n  /* 6 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.FontLoader = exports.FontFaceObject = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class BaseFontLoader {\n    constructor({\n      docId,\n      onUnsupportedFeature,\n      ownerDocument = globalThis.document\n    }) {\n      if (this.constructor === BaseFontLoader) {\n        (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n      }\n\n      this.docId = docId;\n      this._onUnsupportedFeature = onUnsupportedFeature;\n      this._document = ownerDocument;\n      this.nativeFontFaces = [];\n      this.styleElement = null;\n    }\n\n    addNativeFontFace(nativeFontFace) {\n      this.nativeFontFaces.push(nativeFontFace);\n\n      this._document.fonts.add(nativeFontFace);\n    }\n\n    insertRule(rule) {\n      let styleElement = this.styleElement;\n\n      if (!styleElement) {\n        styleElement = this.styleElement = this._document.createElement(\"style\");\n        styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n        this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n      }\n\n      const styleSheet = styleElement.sheet;\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n\n    clear() {\n      this.nativeFontFaces.forEach(nativeFontFace => {\n        this._document.fonts.delete(nativeFontFace);\n      });\n      this.nativeFontFaces.length = 0;\n\n      if (this.styleElement) {\n        this.styleElement.remove();\n        this.styleElement = null;\n      }\n    }\n\n    async bind(font) {\n      if (font.attached || font.missingFile) {\n        return;\n      }\n\n      font.attached = true;\n\n      if (this.isFontLoadingAPISupported) {\n        const nativeFontFace = font.createNativeFontFace();\n\n        if (nativeFontFace) {\n          this.addNativeFontFace(nativeFontFace);\n\n          try {\n            await nativeFontFace.loaded;\n          } catch (ex) {\n            this._onUnsupportedFeature({\n              featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n            });\n\n            (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n            font.disableFontFace = true;\n            throw ex;\n          }\n        }\n\n        return;\n      }\n\n      const rule = font.createFontFaceRule();\n\n      if (rule) {\n        this.insertRule(rule);\n\n        if (this.isSyncFontLoadingSupported) {\n          return;\n        }\n\n        await new Promise(resolve => {\n          const request = this._queueLoadingCallback(resolve);\n\n          this._prepareFontLoadEvent([rule], [font], request);\n        });\n      }\n    }\n\n    _queueLoadingCallback(callback) {\n      (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n    }\n\n    get isFontLoadingAPISupported() {\n      return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", !!(this._document && this._document.fonts)); // lwf\n    }\n\n    get isSyncFontLoadingSupported() {\n      (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n    }\n\n    get _loadTestFont() {\n      (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n    }\n\n    _prepareFontLoadEvent(rules, fontsToLoad, request) {\n      (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n    }\n\n  }\n\n  let FontLoader;\n  exports.FontLoader = FontLoader;\n  {\n    exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n      constructor(params) {\n        super(params);\n        this.loadingContext = {\n          requests: [],\n          nextRequestId: 0\n        };\n        this.loadTestFontId = 0;\n      }\n\n      get isSyncFontLoadingSupported() {\n        let supported = false;\n\n        if (typeof navigator === \"undefined\") {\n          supported = true;\n        } else {\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n          if (m && m[1] >= 14) { // lwf\n            supported = true;\n          }\n        }\n\n        return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n      }\n\n      _queueLoadingCallback(callback) {\n        function completeRequest() {\n          (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n          request.done = true;\n\n          while (context.requests.length > 0 && context.requests[0].done) {\n            const otherRequest = context.requests.shift();\n            setTimeout(otherRequest.callback, 0);\n          }\n        }\n\n        const context = this.loadingContext;\n        const request = {\n          id: `pdfjs-font-loading-${context.nextRequestId++}`,\n          done: false,\n          complete: completeRequest,\n          callback\n        };\n        context.requests.push(request);\n        return request;\n      }\n\n      get _loadTestFont() {\n        const getLoadTestFont = function () {\n          return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n        };\n\n        return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n      }\n\n      _prepareFontLoadEvent(rules, fonts, request) {\n        function int32(data, offset) {\n          return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n        }\n\n        function spliceString(s, offset, remove, insert) {\n          const chunk1 = s.substring(0, offset);\n          const chunk2 = s.substring(offset + remove);\n          return chunk1 + insert + chunk2;\n        }\n\n        let i, ii;\n\n        const canvas = this._document.createElement(\"canvas\");\n\n        canvas.width = 1;\n        canvas.height = 1;\n        const ctx = canvas.getContext(\"2d\");\n        let called = 0;\n\n        function isFontReady(name, callback) {\n          called++;\n\n          if (called > 30) {\n            (0, _util.warn)(\"Load test font never loaded.\");\n            callback();\n            return;\n          }\n\n          ctx.font = \"30px \" + name;\n          ctx.fillText(\".\", 0, 20);\n          const imageData = ctx.getImageData(0, 0, 1, 1);\n\n          if (imageData.data[3] > 0) {\n            callback();\n            return;\n          }\n\n          setTimeout(isFontReady.bind(null, name, callback));\n        }\n\n        const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n        let data = this._loadTestFont;\n        const COMMENT_OFFSET = 976;\n        data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n        const CFF_CHECKSUM_OFFSET = 16;\n        const XXXX_VALUE = 0x58585858;\n        let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n        for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n        }\n\n        if (i < loadTestFontId.length) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n        }\n\n        data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n        const url = `url(data:font/opentype;base64,${btoa(data)});`;\n        const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n        this.insertRule(rule);\n        const names = [];\n\n        for (i = 0, ii = fonts.length; i < ii; i++) {\n          names.push(fonts[i].loadedName);\n        }\n\n        names.push(loadTestFontId);\n\n        const div = this._document.createElement(\"div\");\n\n        div.style.visibility = \"hidden\";\n        div.style.width = div.style.height = \"10px\";\n        div.style.position = \"absolute\";\n        div.style.top = div.style.left = \"0px\";\n\n        for (i = 0, ii = names.length; i < ii; ++i) {\n          const span = this._document.createElement(\"span\");\n\n          span.textContent = \"Hi\";\n          span.style.fontFamily = names[i];\n          div.appendChild(span);\n        }\n\n        this._document.body.appendChild(div);\n\n        isFontReady(loadTestFontId, () => {\n          this._document.body.removeChild(div);\n\n          request.complete();\n        });\n      }\n\n    };\n  }\n\n  class FontFaceObject {\n    constructor(translatedData, {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature = null,\n      fontRegistry = null\n    }) {\n      this.compiledGlyphs = Object.create(null);\n\n      for (const i in translatedData) {\n        this[i] = translatedData[i];\n      }\n\n      this.isEvalSupported = isEvalSupported !== false;\n      this.disableFontFace = disableFontFace === true;\n      this.ignoreErrors = ignoreErrors === true;\n      this._onUnsupportedFeature = onUnsupportedFeature;\n      this.fontRegistry = fontRegistry;\n    }\n\n    createNativeFontFace() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      const nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this);\n      }\n\n      return nativeFontFace;\n    }\n\n    createFontFaceRule() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      const data = (0, _util.bytesToString)(new Uint8Array(this.data));\n      const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this, url);\n      }\n\n      return rule;\n    }\n\n    getPathGenerator(objs, character) {\n      if (this.compiledGlyphs[character] !== undefined) {\n        return this.compiledGlyphs[character];\n      }\n\n      let cmds, current;\n\n      try {\n        cmds = objs.get(this.loadedName + \"_path_\" + character);\n      } catch (ex) {\n        if (!this.ignoreErrors) {\n          throw ex;\n        }\n\n        if (this._onUnsupportedFeature) {\n          this._onUnsupportedFeature({\n            featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n          });\n        }\n\n        (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n        return this.compiledGlyphs[character] = function (c, size) {};\n      }\n\n      if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n        let args,\n            js = \"\";\n\n        for (let i = 0, ii = cmds.length; i < ii; i++) {\n          current = cmds[i];\n\n          if (current.args !== undefined) {\n            args = current.args.join(\",\");\n          } else {\n            args = \"\";\n          }\n\n          js += \"c.\" + current.cmd + \"(\" + args + \");\\n\";\n        }\n\n        return this.compiledGlyphs[character] = new Function(\"c\", \"size\", js);\n      }\n\n      return this.compiledGlyphs[character] = function (c, size) {\n        for (let i = 0, ii = cmds.length; i < ii; i++) {\n          current = cmds[i];\n\n          if (current.cmd === \"scale\") {\n            current.args = [size, -size];\n          }\n\n          c[current.cmd].apply(c, current.args);\n        }\n      };\n    }\n\n  }\n\n  exports.FontFaceObject = FontFaceObject;\n\n  /***/ }),\n  /* 7 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  var _util = __w_pdfjs_require__(2);\n\n  let NodeCanvasFactory = class {\n    constructor() {\n      (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n    }\n\n  };\n  exports.NodeCanvasFactory = NodeCanvasFactory;\n  let NodeCMapReaderFactory = class {\n    constructor() {\n      (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n    }\n\n  };\n  exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\n  if (_is_node.isNodeJS) {\n    exports.NodeCanvasFactory = NodeCanvasFactory = class extends _display_utils.BaseCanvasFactory {\n      create(width, height) {\n        if (width <= 0 || height <= 0) {\n          throw new Error(\"Invalid canvas size\");\n        }\n\n        const Canvas = require(\"canvas\");\n\n        const canvas = Canvas.createCanvas(width, height);\n        return {\n          canvas,\n          context: canvas.getContext(\"2d\")\n        };\n      }\n\n    };\n    exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _display_utils.BaseCMapReaderFactory {\n      _fetchData(url, compressionType) {\n        return new Promise((resolve, reject) => {\n          const fs = require(\"fs\");\n\n          fs.readFile(url, (error, data) => {\n            if (error || !data) {\n              reject(new Error(error));\n              return;\n            }\n\n            resolve({\n              cMapData: new Uint8Array(data),\n              compressionType\n            });\n          });\n        });\n      }\n\n    };\n  }\n\n  /***/ }),\n  /* 8 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.AnnotationStorage = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class AnnotationStorage {\n    constructor() {\n      this._storage = new Map();\n      this._modified = false;\n      this.onSetModified = null;\n      this.onResetModified = null;\n    }\n\n    getOrCreateValue(key, defaultValue) {\n      if (this._storage.has(key)) {\n        return this._storage.get(key);\n      }\n\n      this._storage.set(key, defaultValue);\n\n      return defaultValue;\n    }\n\n    setValue(key, value) {\n      const obj = this._storage.get(key);\n\n      let modified = false;\n\n      if (obj !== undefined) {\n        for (const [entry, val] of Object.entries(value)) {\n          if (obj[entry] !== val) {\n            modified = true;\n            obj[entry] = val;\n          }\n        }\n      } else {\n        this._storage.set(key, value);\n\n        modified = true;\n      }\n\n      if (modified) {\n        this._setModified();\n      }\n    }\n\n    getAll() {\n      if (this._storage.size === 0) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._storage);\n    }\n\n    get size() {\n      return this._storage.size;\n    }\n\n    _setModified() {\n      if (!this._modified) {\n        this._modified = true;\n\n        if (typeof this.onSetModified === \"function\") {\n          this.onSetModified();\n        }\n      }\n    }\n\n    resetModified() {\n      if (this._modified) {\n        this._modified = false;\n\n        if (typeof this.onResetModified === \"function\") {\n          this.onResetModified();\n        }\n      }\n    }\n\n  }\n\n  exports.AnnotationStorage = AnnotationStorage;\n\n  /***/ }),\n  /* 9 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.apiCompatibilityParams = void 0;\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  const compatibilityParams = Object.create(null);\n  {\n    (function checkFontFace() {\n      if (_is_node.isNodeJS) {\n        compatibilityParams.disableFontFace = true;\n      }\n    })();\n  }\n  const apiCompatibilityParams = Object.freeze(compatibilityParams);\n  exports.apiCompatibilityParams = apiCompatibilityParams;\n\n  /***/ }),\n  /* 10 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.CanvasGraphics = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _pattern_helper = __w_pdfjs_require__(11);\n\n  const MIN_FONT_SIZE = 16;\n  const MAX_FONT_SIZE = 100;\n  const MAX_GROUP_SIZE = 4096;\n  const COMPILE_TYPE3_GLYPHS = true;\n  const MAX_SIZE_TO_COMPILE = 1000;\n  const FULL_CHUNK_HEIGHT = 16;\n\n  function addContextCurrentTransform(ctx) {\n    if (!ctx.mozCurrentTransform) {\n      ctx._originalSave = ctx.save;\n      ctx._originalRestore = ctx.restore;\n      ctx._originalRotate = ctx.rotate;\n      ctx._originalScale = ctx.scale;\n      ctx._originalTranslate = ctx.translate;\n      ctx._originalTransform = ctx.transform;\n      ctx._originalSetTransform = ctx.setTransform;\n      ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n      ctx._transformStack = [];\n      Object.defineProperty(ctx, \"mozCurrentTransform\", {\n        get: function getCurrentTransform() {\n          return this._transformMatrix;\n        }\n      });\n      Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n        get: function getCurrentTransformInverse() {\n          const m = this._transformMatrix;\n          const a = m[0],\n                b = m[1],\n                c = m[2],\n                d = m[3],\n                e = m[4],\n                f = m[5];\n          const ad_bc = a * d - b * c;\n          const bc_ad = b * c - a * d;\n          return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n        }\n      });\n\n      ctx.save = function ctxSave() {\n        const old = this._transformMatrix;\n\n        this._transformStack.push(old);\n\n        this._transformMatrix = old.slice(0, 6);\n\n        this._originalSave();\n      };\n\n      ctx.restore = function ctxRestore() {\n        const prev = this._transformStack.pop();\n\n        if (prev) {\n          this._transformMatrix = prev;\n\n          this._originalRestore();\n        }\n      };\n\n      ctx.translate = function ctxTranslate(x, y) {\n        const m = this._transformMatrix;\n        m[4] = m[0] * x + m[2] * y + m[4];\n        m[5] = m[1] * x + m[3] * y + m[5];\n\n        this._originalTranslate(x, y);\n      };\n\n      ctx.scale = function ctxScale(x, y) {\n        const m = this._transformMatrix;\n        m[0] = m[0] * x;\n        m[1] = m[1] * x;\n        m[2] = m[2] * y;\n        m[3] = m[3] * y;\n\n        this._originalScale(x, y);\n      };\n\n      ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n        const m = this._transformMatrix;\n        this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n        ctx._originalTransform(a, b, c, d, e, f);\n      };\n\n      ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n        this._transformMatrix = [a, b, c, d, e, f];\n\n        ctx._originalSetTransform(a, b, c, d, e, f);\n      };\n\n      ctx.rotate = function ctxRotate(angle) {\n        const cosValue = Math.cos(angle);\n        const sinValue = Math.sin(angle);\n        const m = this._transformMatrix;\n        this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n        this._originalRotate(angle);\n      };\n    }\n  }\n\n  const CachedCanvases = function CachedCanvasesClosure() {\n    function CachedCanvases(canvasFactory) {\n      this.canvasFactory = canvasFactory;\n      this.cache = Object.create(null);\n    }\n\n    CachedCanvases.prototype = {\n      getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {\n        let canvasEntry;\n\n        if (this.cache[id] !== undefined) {\n          canvasEntry = this.cache[id];\n          this.canvasFactory.reset(canvasEntry, width, height);\n          canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n        } else {\n          canvasEntry = this.canvasFactory.create(width, height);\n          this.cache[id] = canvasEntry;\n        }\n\n        if (trackTransform) {\n          addContextCurrentTransform(canvasEntry.context);\n        }\n\n        return canvasEntry;\n      },\n\n      clear() {\n        for (const id in this.cache) {\n          const canvasEntry = this.cache[id];\n          this.canvasFactory.destroy(canvasEntry);\n          delete this.cache[id];\n        }\n      }\n\n    };\n    return CachedCanvases;\n  }();\n\n  function compileType3Glyph(imgData) {\n    const POINT_TO_PROCESS_LIMIT = 1000;\n    const width = imgData.width,\n          height = imgData.height,\n          width1 = width + 1;\n    let i, ii, j, j0;\n    const points = new Uint8Array(width1 * (height + 1));\n    const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n    const lineSize = width + 7 & ~7,\n          data0 = imgData.data;\n    const data = new Uint8Array(lineSize * height);\n    let pos = 0;\n\n    for (i = 0, ii = data0.length; i < ii; i++) {\n      const elem = data0[i];\n      let mask = 128;\n\n      while (mask > 0) {\n        data[pos++] = elem & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    let count = 0;\n    pos = 0;\n\n    if (data[pos] !== 0) {\n      points[0] = 1;\n      ++count;\n    }\n\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j] = data[pos] ? 2 : 1;\n        ++count;\n      }\n\n      pos++;\n    }\n\n    if (data[pos] !== 0) {\n      points[j] = 2;\n      ++count;\n    }\n\n    for (i = 1; i < height; i++) {\n      pos = i * lineSize;\n      j0 = i * width1;\n\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0] = data[pos] ? 1 : 8;\n        ++count;\n      }\n\n      let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n      for (j = 1; j < width; j++) {\n        sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n        if (POINT_TYPES[sum]) {\n          points[j0 + j] = POINT_TYPES[sum];\n          ++count;\n        }\n\n        pos++;\n      }\n\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0 + j] = data[pos] ? 2 : 4;\n        ++count;\n      }\n\n      if (count > POINT_TO_PROCESS_LIMIT) {\n        return null;\n      }\n    }\n\n    pos = lineSize * (height - 1);\n    j0 = i * width1;\n\n    if (data[pos] !== 0) {\n      points[j0] = 8;\n      ++count;\n    }\n\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j0 + j] = data[pos] ? 4 : 8;\n        ++count;\n      }\n\n      pos++;\n    }\n\n    if (data[pos] !== 0) {\n      points[j0 + j] = 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n\n    const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n    const outlines = [];\n\n    for (i = 0; count && i <= height; i++) {\n      let p = i * width1;\n      const end = p + width;\n\n      while (p < end && !points[p]) {\n        p++;\n      }\n\n      if (p === end) {\n        continue;\n      }\n\n      const coords = [p % width1, i];\n      const p0 = p;\n      let type = points[p];\n\n      do {\n        const step = steps[type];\n\n        do {\n          p += step;\n        } while (!points[p]);\n\n        const pp = points[p];\n\n        if (pp !== 5 && pp !== 10) {\n          type = pp;\n          points[p] = 0;\n        } else {\n          type = pp & 0x33 * type >> 4;\n          points[p] &= type >> 2 | type << 2;\n        }\n\n        coords.push(p % width1);\n        coords.push(p / width1 | 0);\n\n        if (!points[p]) {\n          --count;\n        }\n      } while (p0 !== p);\n\n      outlines.push(coords);\n      --i;\n    }\n\n    const drawOutline = function (c) {\n      c.save();\n      c.scale(1 / width, -1 / height);\n      c.translate(0, -height);\n      c.beginPath();\n\n      for (let k = 0, kk = outlines.length; k < kk; k++) {\n        const o = outlines[k];\n        c.moveTo(o[0], o[1]);\n\n        for (let l = 2, ll = o.length; l < ll; l += 2) {\n          c.lineTo(o[l], o[l + 1]);\n        }\n      }\n\n      c.fill();\n      c.beginPath();\n      c.restore();\n    };\n\n    return drawOutline;\n  }\n\n  const CanvasExtraState = function CanvasExtraStateClosure() {\n    function CanvasExtraState() {\n      this.alphaIsShape = false;\n      this.fontSize = 0;\n      this.fontSizeScale = 1;\n      this.textMatrix = _util.IDENTITY_MATRIX;\n      this.textMatrixScale = 1;\n      this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.x = 0;\n      this.y = 0;\n      this.lineX = 0;\n      this.lineY = 0;\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRenderingMode = _util.TextRenderingMode.FILL;\n      this.textRise = 0;\n      this.fillColor = \"#000000\";\n      this.strokeColor = \"#000000\";\n      this.patternFill = false;\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.activeSMask = null;\n      this.resumeSMaskCtx = null;\n      this.transferMaps = null;\n    }\n\n    CanvasExtraState.prototype = {\n      clone: function CanvasExtraState_clone() {\n        return Object.create(this);\n      },\n      setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n    };\n    return CanvasExtraState;\n  }();\n\n  const CanvasGraphics = function CanvasGraphicsClosure() {\n    const EXECUTION_TIME = 15;\n    const EXECUTION_STEPS = 10;\n\n    function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {\n      this.ctx = canvasCtx;\n      this.current = new CanvasExtraState();\n      this.stateStack = [];\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n      this.res = null;\n      this.xobjs = null;\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.canvasFactory = canvasFactory;\n      this.webGLContext = webGLContext;\n      this.imageLayer = imageLayer;\n      this.groupStack = [];\n      this.processingType3 = null;\n      this.baseTransform = null;\n      this.baseTransformStack = [];\n      this.groupLevel = 0;\n      this.smaskStack = [];\n      this.smaskCounter = 0;\n      this.tempSMask = null;\n      this.contentVisible = true;\n      this.markedContentStack = [];\n      this.optionalContentConfig = optionalContentConfig;\n      this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n\n      if (canvasCtx) {\n        addContextCurrentTransform(canvasCtx);\n      }\n\n      this._cachedGetSinglePixelWidth = null;\n    }\n\n    function putBinaryImageData(ctx, imgData, transferMaps = null) {\n      if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n        ctx.putImageData(imgData, 0, 0);\n        return;\n      }\n\n      const height = imgData.height,\n            width = imgData.width;\n      const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n      const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n      const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n      const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n      let srcPos = 0,\n          destPos;\n      const src = imgData.data;\n      const dest = chunkImgData.data;\n      let i, j, thisChunkHeight, elemsInThisChunk;\n      let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n      if (transferMaps) {\n        switch (transferMaps.length) {\n          case 1:\n            transferMapRed = transferMaps[0];\n            transferMapGreen = transferMaps[0];\n            transferMapBlue = transferMaps[0];\n            transferMapGray = transferMaps[0];\n            break;\n\n          case 4:\n            transferMapRed = transferMaps[0];\n            transferMapGreen = transferMaps[1];\n            transferMapBlue = transferMaps[2];\n            transferMapGray = transferMaps[3];\n            break;\n        }\n      }\n\n      if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n        const srcLength = src.byteLength;\n        const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n        const dest32DataLength = dest32.length;\n        const fullSrcDiff = width + 7 >> 3;\n        let white = 0xffffffff;\n        let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n        if (transferMapGray) {\n          if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n            [white, black] = [black, white];\n          }\n        }\n\n        for (i = 0; i < totalChunks; i++) {\n          thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n          destPos = 0;\n\n          for (j = 0; j < thisChunkHeight; j++) {\n            const srcDiff = srcLength - srcPos;\n            let k = 0;\n            const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n            const kEndUnrolled = kEnd & ~7;\n            let mask = 0;\n            let srcByte = 0;\n\n            for (; k < kEndUnrolled; k += 8) {\n              srcByte = src[srcPos++];\n              dest32[destPos++] = srcByte & 128 ? white : black;\n              dest32[destPos++] = srcByte & 64 ? white : black;\n              dest32[destPos++] = srcByte & 32 ? white : black;\n              dest32[destPos++] = srcByte & 16 ? white : black;\n              dest32[destPos++] = srcByte & 8 ? white : black;\n              dest32[destPos++] = srcByte & 4 ? white : black;\n              dest32[destPos++] = srcByte & 2 ? white : black;\n              dest32[destPos++] = srcByte & 1 ? white : black;\n            }\n\n            for (; k < kEnd; k++) {\n              if (mask === 0) {\n                srcByte = src[srcPos++];\n                mask = 128;\n              }\n\n              dest32[destPos++] = srcByte & mask ? white : black;\n              mask >>= 1;\n            }\n          }\n\n          while (destPos < dest32DataLength) {\n            dest32[destPos++] = 0;\n          }\n\n          ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n        }\n      } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n        const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n        j = 0;\n        elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n        for (i = 0; i < fullChunks; i++) {\n          dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n          srcPos += elemsInThisChunk;\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < elemsInThisChunk; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, j);\n          j += FULL_CHUNK_HEIGHT;\n        }\n\n        if (i < totalChunks) {\n          elemsInThisChunk = width * partialChunkHeight * 4;\n          dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < elemsInThisChunk; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, j);\n        }\n      } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n        const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n        thisChunkHeight = FULL_CHUNK_HEIGHT;\n        elemsInThisChunk = width * thisChunkHeight;\n\n        for (i = 0; i < totalChunks; i++) {\n          if (i >= fullChunks) {\n            thisChunkHeight = partialChunkHeight;\n            elemsInThisChunk = width * thisChunkHeight;\n          }\n\n          destPos = 0;\n\n          for (j = elemsInThisChunk; j--;) {\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = src[srcPos++];\n            dest[destPos++] = 255;\n          }\n\n          if (hasTransferMaps) {\n            for (let k = 0; k < destPos; k += 4) {\n              if (transferMapRed) {\n                dest[k + 0] = transferMapRed[dest[k + 0]];\n              }\n\n              if (transferMapGreen) {\n                dest[k + 1] = transferMapGreen[dest[k + 1]];\n              }\n\n              if (transferMapBlue) {\n                dest[k + 2] = transferMapBlue[dest[k + 2]];\n              }\n            }\n          }\n\n          ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n        }\n      } else {\n        throw new Error(`bad image kind: ${imgData.kind}`);\n      }\n    }\n\n    function putBinaryImageMask(ctx, imgData) {\n      const height = imgData.height,\n            width = imgData.width;\n      const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n      const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n      const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n      const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n      let srcPos = 0;\n      const src = imgData.data;\n      const dest = chunkImgData.data;\n\n      for (let i = 0; i < totalChunks; i++) {\n        const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        let destPos = 3;\n\n        for (let j = 0; j < thisChunkHeight; j++) {\n          let elem,\n              mask = 0;\n\n          for (let k = 0; k < width; k++) {\n            if (!mask) {\n              elem = src[srcPos++];\n              mask = 128;\n            }\n\n            dest[destPos] = elem & mask ? 0 : 255;\n            destPos += 4;\n            mask >>= 1;\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    }\n\n    function copyCtxState(sourceCtx, destCtx) {\n      const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n      for (let i = 0, ii = properties.length; i < ii; i++) {\n        const property = properties[i];\n\n        if (sourceCtx[property] !== undefined) {\n          destCtx[property] = sourceCtx[property];\n        }\n      }\n\n      if (sourceCtx.setLineDash !== undefined) {\n        destCtx.setLineDash(sourceCtx.getLineDash());\n        destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n      }\n    }\n\n    function resetCtxToDefault(ctx) {\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillRule = \"nonzero\";\n      ctx.globalAlpha = 1;\n      ctx.lineWidth = 1;\n      ctx.lineCap = \"butt\";\n      ctx.lineJoin = \"miter\";\n      ctx.miterLimit = 10;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.font = \"10px sans-serif\";\n\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash([]);\n        ctx.lineDashOffset = 0;\n      }\n    }\n\n    function composeSMaskBackdrop(bytes, r0, g0, b0) {\n      const length = bytes.length;\n\n      for (let i = 3; i < length; i += 4) {\n        const alpha = bytes[i];\n\n        if (alpha === 0) {\n          bytes[i - 3] = r0;\n          bytes[i - 2] = g0;\n          bytes[i - 1] = b0;\n        } else if (alpha < 255) {\n          const alpha_ = 255 - alpha;\n          bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n          bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n          bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n        }\n      }\n    }\n\n    function composeSMaskAlpha(maskData, layerData, transferMap) {\n      const length = maskData.length;\n      const scale = 1 / 255;\n\n      for (let i = 3; i < length; i += 4) {\n        const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n        layerData[i] = layerData[i] * alpha * scale | 0;\n      }\n    }\n\n    function composeSMaskLuminosity(maskData, layerData, transferMap) {\n      const length = maskData.length;\n\n      for (let i = 3; i < length; i += 4) {\n        const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n        layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n      }\n    }\n\n    function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n      const hasBackdrop = !!backdrop;\n      const r0 = hasBackdrop ? backdrop[0] : 0;\n      const g0 = hasBackdrop ? backdrop[1] : 0;\n      const b0 = hasBackdrop ? backdrop[2] : 0;\n      let composeFn;\n\n      if (subtype === \"Luminosity\") {\n        composeFn = composeSMaskLuminosity;\n      } else {\n        composeFn = composeSMaskAlpha;\n      }\n\n      const PIXELS_TO_PROCESS = 1048576;\n      const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n      for (let row = 0; row < height; row += chunkSize) {\n        const chunkHeight = Math.min(chunkSize, height - row);\n        const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n        const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n        if (hasBackdrop) {\n          composeSMaskBackdrop(maskData.data, r0, g0, b0);\n        }\n\n        composeFn(maskData.data, layerData.data, transferMap);\n        maskCtx.putImageData(layerData, 0, row);\n      }\n    }\n\n    function composeSMask(ctx, smask, layerCtx, webGLContext) {\n      const mask = smask.canvas;\n      const maskCtx = smask.context;\n      ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n      const backdrop = smask.backdrop || null;\n\n      if (!smask.transferMap && webGLContext.isEnabled) {\n        const composed = webGLContext.composeSMask({\n          layer: layerCtx.canvas,\n          mask,\n          properties: {\n            subtype: smask.subtype,\n            backdrop\n          }\n        });\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n        return;\n      }\n\n      genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);\n      ctx.drawImage(mask, 0, 0);\n    }\n\n    const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n    const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n    const NORMAL_CLIP = {};\n    const EO_CLIP = {};\n    CanvasGraphics.prototype = {\n      beginDrawing({\n        transform,\n        viewport,\n        transparency = false,\n        background = null\n      }) {\n        const width = this.ctx.canvas.width;\n        const height = this.ctx.canvas.height;\n        this.ctx.save();\n        this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n        this.ctx.fillRect(0, 0, width, height);\n        this.ctx.restore();\n\n        if (transparency) {\n          const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n          this.compositeCtx = this.ctx;\n          this.transparentCanvas = transparentCanvas.canvas;\n          this.ctx = transparentCanvas.context;\n          this.ctx.save();\n          this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n        }\n\n        this.ctx.save();\n        resetCtxToDefault(this.ctx);\n\n        if (transform) {\n          this.ctx.transform.apply(this.ctx, transform);\n        }\n\n        this.ctx.transform.apply(this.ctx, viewport.transform);\n        this.baseTransform = this.ctx.mozCurrentTransform.slice();\n        this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n        if (this.imageLayer) {\n          this.imageLayer.beginLayout();\n        }\n      },\n\n      executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n        const argsArray = operatorList.argsArray;\n        const fnArray = operatorList.fnArray;\n        let i = executionStartIdx || 0;\n        const argsArrayLen = argsArray.length;\n\n        if (argsArrayLen === i) {\n          return i;\n        }\n\n        const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n        const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n        let steps = 0;\n        const commonObjs = this.commonObjs;\n        const objs = this.objs;\n        let fnId;\n\n        while (true) {\n          if (stepper !== undefined && i === stepper.nextBreakPoint) {\n            stepper.breakIt(i, continueCallback);\n            return i;\n          }\n\n          fnId = fnArray[i];\n\n          if (fnId !== _util.OPS.dependency) {\n            this[fnId].apply(this, argsArray[i]);\n          } else {\n            for (const depObjId of argsArray[i]) {\n              const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n              if (!objsPool.has(depObjId)) {\n                objsPool.get(depObjId, continueCallback);\n                return i;\n              }\n            }\n          }\n\n          i++;\n\n          if (i === argsArrayLen) {\n            return i;\n          }\n\n          if (chunkOperations && ++steps > EXECUTION_STEPS) {\n            if (Date.now() > endTime) {\n              continueCallback();\n              return i;\n            }\n\n            steps = 0;\n          }\n        }\n      },\n      endDrawing: function CanvasGraphics_endDrawing() {\n        while (this.stateStack.length || this.current.activeSMask !== null) {\n          this.restore();\n        }\n\n        this.ctx.restore();\n\n        if (this.transparentCanvas) {\n          this.ctx = this.compositeCtx;\n          this.ctx.save();\n          this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n          this.ctx.drawImage(this.transparentCanvas, 0, 0);\n          this.ctx.restore();\n          this.transparentCanvas = null;\n        }\n\n        this.cachedCanvases.clear();\n        this.webGLContext.clear();\n\n        if (this.imageLayer) {\n          this.imageLayer.endLayout();\n        }\n      },\n      setLineWidth: function CanvasGraphics_setLineWidth(width) {\n        this.current.lineWidth = width;\n        this.ctx.lineWidth = width;\n      },\n      setLineCap: function CanvasGraphics_setLineCap(style) {\n        this.ctx.lineCap = LINE_CAP_STYLES[style];\n      },\n      setLineJoin: function CanvasGraphics_setLineJoin(style) {\n        this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n      },\n      setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n        this.ctx.miterLimit = limit;\n      },\n      setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n        const ctx = this.ctx;\n\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash(dashArray);\n          ctx.lineDashOffset = dashPhase;\n        }\n      },\n\n      setRenderingIntent(intent) {},\n\n      setFlatness(flatness) {},\n\n      setGState: function CanvasGraphics_setGState(states) {\n        for (let i = 0, ii = states.length; i < ii; i++) {\n          const state = states[i];\n          const key = state[0];\n          const value = state[1];\n\n          switch (key) {\n            case \"LW\":\n              this.setLineWidth(value);\n              break;\n\n            case \"LC\":\n              this.setLineCap(value);\n              break;\n\n            case \"LJ\":\n              this.setLineJoin(value);\n              break;\n\n            case \"ML\":\n              this.setMiterLimit(value);\n              break;\n\n            case \"D\":\n              this.setDash(value[0], value[1]);\n              break;\n\n            case \"RI\":\n              this.setRenderingIntent(value);\n              break;\n\n            case \"FL\":\n              this.setFlatness(value);\n              break;\n\n            case \"Font\":\n              this.setFont(value[0], value[1]);\n              break;\n\n            case \"CA\":\n              this.current.strokeAlpha = state[1];\n              break;\n\n            case \"ca\":\n              this.current.fillAlpha = state[1];\n              this.ctx.globalAlpha = state[1];\n              break;\n\n            case \"BM\":\n              this.ctx.globalCompositeOperation = value;\n              break;\n\n            case \"SMask\":\n              if (this.current.activeSMask) {\n                if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                  this.suspendSMaskGroup();\n                } else {\n                  this.endSMaskGroup();\n                }\n              }\n\n              this.current.activeSMask = value ? this.tempSMask : null;\n\n              if (this.current.activeSMask) {\n                this.beginSMaskGroup();\n              }\n\n              this.tempSMask = null;\n              break;\n\n            case \"TR\":\n              this.current.transferMaps = value;\n          }\n        }\n      },\n      beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n        const activeSMask = this.current.activeSMask;\n        const drawnWidth = activeSMask.canvas.width;\n        const drawnHeight = activeSMask.canvas.height;\n        const cacheId = \"smaskGroupAt\" + this.groupLevel;\n        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n        const currentCtx = this.ctx;\n        const currentTransform = currentCtx.mozCurrentTransform;\n        this.ctx.save();\n        const groupCtx = scratchCanvas.context;\n        groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n        groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n        groupCtx.transform.apply(groupCtx, currentTransform);\n        activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n        copyCtxState(currentCtx, groupCtx);\n        this.ctx = groupCtx;\n        this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n      },\n      suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n        const groupCtx = this.ctx;\n        this.groupLevel--;\n        this.ctx = this.groupStack.pop();\n        composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n        this.ctx.restore();\n        this.ctx.save();\n        copyCtxState(groupCtx, this.ctx);\n        this.current.resumeSMaskCtx = groupCtx;\n\n        const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n        this.ctx.transform.apply(this.ctx, deltaTransform);\n        groupCtx.save();\n        groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n        groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n        groupCtx.restore();\n      },\n      resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {\n        const groupCtx = this.current.resumeSMaskCtx;\n        const currentCtx = this.ctx;\n        this.ctx = groupCtx;\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n      },\n      endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n        const groupCtx = this.ctx;\n        this.groupLevel--;\n        this.ctx = this.groupStack.pop();\n        composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n        this.ctx.restore();\n        copyCtxState(groupCtx, this.ctx);\n\n        const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n        this.ctx.transform.apply(this.ctx, deltaTransform);\n      },\n      save: function CanvasGraphics_save() {\n        this.ctx.save();\n        const old = this.current;\n        this.stateStack.push(old);\n        this.current = old.clone();\n        this.current.resumeSMaskCtx = null;\n      },\n      restore: function CanvasGraphics_restore() {\n        if (this.current.resumeSMaskCtx) {\n          this.resumeSMaskGroup();\n        }\n\n        if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n          this.endSMaskGroup();\n        }\n\n        if (this.stateStack.length !== 0) {\n          this.current = this.stateStack.pop();\n          this.ctx.restore();\n          this.pendingClip = null;\n          this._cachedGetSinglePixelWidth = null;\n        } else {\n          this.current.activeSMask = null;\n        }\n      },\n      transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n        this.ctx.transform(a, b, c, d, e, f);\n        this._cachedGetSinglePixelWidth = null;\n      },\n      constructPath: function CanvasGraphics_constructPath(ops, args) {\n        const ctx = this.ctx;\n        const current = this.current;\n        let x = current.x,\n            y = current.y;\n\n        for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n          switch (ops[i] | 0) {\n            case _util.OPS.rectangle:\n              x = args[j++];\n              y = args[j++];\n              const width = args[j++];\n              const height = args[j++];\n              const xw = x + width;\n              const yh = y + height;\n              ctx.moveTo(x, y);\n\n              if (width === 0 || height === 0) {\n                ctx.lineTo(xw, yh);\n              } else {\n                ctx.lineTo(xw, y);\n                ctx.lineTo(xw, yh);\n                ctx.lineTo(x, yh);\n              }\n\n              ctx.closePath();\n              break;\n\n            case _util.OPS.moveTo:\n              x = args[j++];\n              y = args[j++];\n              ctx.moveTo(x, y);\n              break;\n\n            case _util.OPS.lineTo:\n              x = args[j++];\n              y = args[j++];\n              ctx.lineTo(x, y);\n              break;\n\n            case _util.OPS.curveTo:\n              x = args[j + 4];\n              y = args[j + 5];\n              ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n              j += 6;\n              break;\n\n            case _util.OPS.curveTo2:\n              ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n              x = args[j + 2];\n              y = args[j + 3];\n              j += 4;\n              break;\n\n            case _util.OPS.curveTo3:\n              x = args[j + 2];\n              y = args[j + 3];\n              ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n              j += 4;\n              break;\n\n            case _util.OPS.closePath:\n              ctx.closePath();\n              break;\n          }\n        }\n\n        current.setCurrentPoint(x, y);\n      },\n      closePath: function CanvasGraphics_closePath() {\n        this.ctx.closePath();\n      },\n      stroke: function CanvasGraphics_stroke(consumePath) {\n        consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n        const ctx = this.ctx;\n        const strokeColor = this.current.strokeColor;\n        ctx.globalAlpha = this.current.strokeAlpha;\n\n        if (this.contentVisible) {\n          if (typeof strokeColor === \"object\" && strokeColor && strokeColor.getPattern) { // lwf\n            ctx.save();\n            const transform = ctx.mozCurrentTransform;\n\n            const scale = _util.Util.singularValueDecompose2dScale(transform)[0];\n\n            ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n            const lineWidth = this.getSinglePixelWidth();\n            const scaledLineWidth = this.current.lineWidth * scale;\n\n            if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            } else {\n              ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);\n            }\n\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            const lineWidth = this.getSinglePixelWidth();\n\n            if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n              ctx.save();\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n              ctx.stroke();\n              ctx.restore();\n            } else {\n              ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n              ctx.stroke();\n            }\n          }\n        }\n\n        if (consumePath) {\n          this.consumePath();\n        }\n\n        ctx.globalAlpha = this.current.fillAlpha;\n      },\n      closeStroke: function CanvasGraphics_closeStroke() {\n        this.closePath();\n        this.stroke();\n      },\n      fill: function CanvasGraphics_fill(consumePath) {\n        consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n        const ctx = this.ctx;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        let needRestore = false;\n\n        if (isPatternFill) {\n          ctx.save();\n\n          if (this.baseTransform) {\n            ctx.setTransform.apply(ctx, this.baseTransform);\n          }\n\n          ctx.fillStyle = fillColor.getPattern(ctx, this);\n          needRestore = true;\n        }\n\n        if (this.contentVisible) {\n          if (this.pendingEOFill) {\n            ctx.fill(\"evenodd\");\n            this.pendingEOFill = false;\n          } else {\n            ctx.fill();\n          }\n        }\n\n        if (needRestore) {\n          ctx.restore();\n        }\n\n        if (consumePath) {\n          this.consumePath();\n        }\n      },\n      eoFill: function CanvasGraphics_eoFill() {\n        this.pendingEOFill = true;\n        this.fill();\n      },\n      fillStroke: function CanvasGraphics_fillStroke() {\n        this.fill(false);\n        this.stroke(false);\n        this.consumePath();\n      },\n      eoFillStroke: function CanvasGraphics_eoFillStroke() {\n        this.pendingEOFill = true;\n        this.fillStroke();\n      },\n      closeFillStroke: function CanvasGraphics_closeFillStroke() {\n        this.closePath();\n        this.fillStroke();\n      },\n      closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n        this.pendingEOFill = true;\n        this.closePath();\n        this.fillStroke();\n      },\n      endPath: function CanvasGraphics_endPath() {\n        this.consumePath();\n      },\n      clip: function CanvasGraphics_clip() {\n        this.pendingClip = NORMAL_CLIP;\n      },\n      eoClip: function CanvasGraphics_eoClip() {\n        this.pendingClip = EO_CLIP;\n      },\n      beginText: function CanvasGraphics_beginText() {\n        this.current.textMatrix = _util.IDENTITY_MATRIX;\n        this.current.textMatrixScale = 1;\n        this.current.x = this.current.lineX = 0;\n        this.current.y = this.current.lineY = 0;\n      },\n      endText: function CanvasGraphics_endText() {\n        const paths = this.pendingTextPaths;\n        const ctx = this.ctx;\n\n        if (paths === undefined) {\n          ctx.beginPath();\n          return;\n        }\n\n        ctx.save();\n        ctx.beginPath();\n\n        for (let i = 0; i < paths.length; i++) {\n          const path = paths[i];\n          ctx.setTransform.apply(ctx, path.transform);\n          ctx.translate(path.x, path.y);\n          path.addToPath(ctx, path.fontSize);\n        }\n\n        ctx.restore();\n        ctx.clip();\n        ctx.beginPath();\n        delete this.pendingTextPaths;\n      },\n      setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n        this.current.charSpacing = spacing;\n      },\n      setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n        this.current.wordSpacing = spacing;\n      },\n      setHScale: function CanvasGraphics_setHScale(scale) {\n        this.current.textHScale = scale / 100;\n      },\n      setLeading: function CanvasGraphics_setLeading(leading) {\n        this.current.leading = -leading;\n      },\n      setFont: function CanvasGraphics_setFont(fontRefName, size) {\n        const fontObj = this.commonObjs.get(fontRefName);\n        const current = this.current;\n\n        if (!fontObj) {\n          throw new Error(`Can't find font for ${fontRefName}`);\n        }\n\n        current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n        if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n          (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n        }\n\n        if (size < 0) {\n          size = -size;\n          current.fontDirection = -1;\n        } else {\n          current.fontDirection = 1;\n        }\n\n        this.current.font = fontObj;\n        this.current.fontSize = size;\n\n        if (fontObj.isType3Font) {\n          return;\n        }\n\n        const name = fontObj.loadedName || \"sans-serif\";\n        let bold = \"normal\";\n\n        if (fontObj.black) {\n          bold = \"900\";\n        } else if (fontObj.bold) {\n          bold = \"bold\";\n        }\n\n        const italic = fontObj.italic ? \"italic\" : \"normal\";\n        const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n        let browserFontSize = size;\n\n        if (size < MIN_FONT_SIZE) {\n          browserFontSize = MIN_FONT_SIZE;\n        } else if (size > MAX_FONT_SIZE) {\n          browserFontSize = MAX_FONT_SIZE;\n        }\n\n        this.current.fontSizeScale = size / browserFontSize;\n        this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n      },\n      setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n        this.current.textRenderingMode = mode;\n      },\n      setTextRise: function CanvasGraphics_setTextRise(rise) {\n        this.current.textRise = rise;\n      },\n      moveText: function CanvasGraphics_moveText(x, y) {\n        this.current.x = this.current.lineX += x;\n        this.current.y = this.current.lineY += y;\n      },\n      setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n        this.setLeading(-y);\n        this.moveText(x, y);\n      },\n      setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n        this.current.textMatrix = [a, b, c, d, e, f];\n        this.current.textMatrixScale = Math.sqrt(a * a + b * b);\n        this.current.x = this.current.lineX = 0;\n        this.current.y = this.current.lineY = 0;\n      },\n      nextLine: function CanvasGraphics_nextLine() {\n        this.moveText(0, this.current.leading);\n      },\n\n      paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n        const ctx = this.ctx;\n        const current = this.current;\n        const font = current.font;\n        const textRenderingMode = current.textRenderingMode;\n        const fontSize = current.fontSize / current.fontSizeScale;\n        const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n        const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n        const patternFill = current.patternFill && !font.missingFile;\n        let addToPath;\n\n        if (font.disableFontFace || isAddToPathSet || patternFill) {\n          addToPath = font.getPathGenerator(this.commonObjs, character);\n        }\n\n        if (font.disableFontFace || patternFill) {\n          ctx.save();\n          ctx.translate(x, y);\n          ctx.beginPath();\n          addToPath(ctx, fontSize);\n\n          if (patternTransform) {\n            ctx.setTransform.apply(ctx, patternTransform);\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            ctx.fill();\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            if (resetLineWidthToOne) {\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            }\n\n            ctx.stroke();\n          }\n\n          ctx.restore();\n        } else {\n          if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            ctx.fillText(character, x, y);\n          }\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            if (resetLineWidthToOne) {\n              ctx.save();\n              ctx.moveTo(x, y);\n              ctx.resetTransform();\n              ctx.lineWidth = Math.round(this._combinedScaleFactor);\n              ctx.strokeText(character, 0, 0);\n              ctx.restore();\n            } else {\n              ctx.strokeText(character, x, y);\n            }\n          }\n        }\n\n        if (isAddToPathSet) {\n          const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n          paths.push({\n            transform: ctx.mozCurrentTransform,\n            x,\n            y,\n            fontSize,\n            addToPath\n          });\n        }\n      },\n\n      get isFontSubpixelAAEnabled() {\n        const {\n          context: ctx\n        } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n        ctx.scale(1.5, 1);\n        ctx.fillText(\"I\", 0, 10);\n        const data = ctx.getImageData(0, 0, 10, 10).data;\n        let enabled = false;\n\n        for (let i = 3; i < data.length; i += 4) {\n          if (data[i] > 0 && data[i] < 255) {\n            enabled = true;\n            break;\n          }\n        }\n\n        return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n      },\n\n      showText: function CanvasGraphics_showText(glyphs) {\n        const current = this.current;\n        const font = current.font;\n\n        if (font.isType3Font) {\n          return this.showType3Text(glyphs);\n        }\n\n        const fontSize = current.fontSize;\n\n        if (fontSize === 0) {\n          return undefined;\n        }\n\n        const ctx = this.ctx;\n        const fontSizeScale = current.fontSizeScale;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const fontDirection = current.fontDirection;\n        const textHScale = current.textHScale * fontDirection;\n        const glyphsLength = glyphs.length;\n        const vertical = font.vertical;\n        const spacingDir = vertical ? 1 : -1;\n        const defaultVMetrics = font.defaultVMetrics;\n        const widthAdvanceScale = fontSize * current.fontMatrix[0];\n        const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n        ctx.save();\n        let patternTransform;\n\n        if (current.patternFill) {\n          ctx.save();\n          const pattern = current.fillColor.getPattern(ctx, this);\n          patternTransform = ctx.mozCurrentTransform;\n          ctx.restore();\n          ctx.fillStyle = pattern;\n        }\n\n        ctx.transform.apply(ctx, current.textMatrix);\n        ctx.translate(current.x, current.y + current.textRise);\n\n        if (fontDirection > 0) {\n          ctx.scale(textHScale, -1);\n        } else {\n          ctx.scale(textHScale, 1);\n        }\n\n        let lineWidth = current.lineWidth;\n        let resetLineWidthToOne = false;\n        const scale = current.textMatrixScale;\n\n        if (scale === 0 || lineWidth === 0) {\n          const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n          if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n            this._cachedGetSinglePixelWidth = null;\n            lineWidth = this.getSinglePixelWidth();\n            resetLineWidthToOne = lineWidth < 0;\n          }\n        } else {\n          lineWidth /= scale;\n        }\n\n        if (fontSizeScale !== 1.0) {\n          ctx.scale(fontSizeScale, fontSizeScale);\n          lineWidth /= fontSizeScale;\n        }\n\n        ctx.lineWidth = lineWidth;\n        let x = 0,\n            i;\n\n        for (i = 0; i < glyphsLength; ++i) {\n          const glyph = glyphs[i];\n\n          if ((0, _util.isNum)(glyph)) {\n            x += spacingDir * glyph * fontSize / 1000;\n            continue;\n          }\n\n          let restoreNeeded = false;\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const character = glyph.fontChar;\n          const accent = glyph.accent;\n          let scaledX, scaledY;\n          let width = glyph.width;\n\n          if (vertical) {\n            const vmetric = glyph.vmetric || defaultVMetrics;\n            const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n            const vy = vmetric[2] * widthAdvanceScale;\n            width = vmetric ? -vmetric[0] : width;\n            scaledX = vx / fontSizeScale;\n            scaledY = (x + vy) / fontSizeScale;\n          } else {\n            scaledX = x / fontSizeScale;\n            scaledY = 0;\n          }\n\n          if (font.remeasure && width > 0) {\n            const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n            if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n              const characterScaleX = width / measuredWidth;\n              restoreNeeded = true;\n              ctx.save();\n              ctx.scale(characterScaleX, 1);\n              scaledX /= characterScaleX;\n            } else if (width !== measuredWidth) {\n              scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n            }\n          }\n\n          if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n            if (simpleFillText && !accent) {\n              ctx.fillText(character, scaledX, scaledY);\n            } else {\n              this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n              if (accent) {\n                const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n              }\n            }\n          }\n\n          let charWidth;\n\n          if (vertical) {\n            charWidth = width * widthAdvanceScale - spacing * fontDirection;\n          } else {\n            charWidth = width * widthAdvanceScale + spacing * fontDirection;\n          }\n\n          x += charWidth;\n\n          if (restoreNeeded) {\n            ctx.restore();\n          }\n        }\n\n        if (vertical) {\n          current.y -= x;\n        } else {\n          current.x += x * textHScale;\n        }\n\n        ctx.restore();\n      },\n      showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n        const ctx = this.ctx;\n        const current = this.current;\n        const font = current.font;\n        const fontSize = current.fontSize;\n        const fontDirection = current.fontDirection;\n        const spacingDir = font.vertical ? 1 : -1;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const textHScale = current.textHScale * fontDirection;\n        const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        const glyphsLength = glyphs.length;\n        const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n        let i, glyph, width, spacingLength;\n\n        if (isTextInvisible || fontSize === 0) {\n          return;\n        }\n\n        this._cachedGetSinglePixelWidth = null;\n        ctx.save();\n        ctx.transform.apply(ctx, current.textMatrix);\n        ctx.translate(current.x, current.y);\n        ctx.scale(textHScale, fontDirection);\n\n        for (i = 0; i < glyphsLength; ++i) {\n          glyph = glyphs[i];\n\n          if ((0, _util.isNum)(glyph)) {\n            spacingLength = spacingDir * glyph * fontSize / 1000;\n            this.ctx.translate(spacingLength, 0);\n            current.x += spacingLength * textHScale;\n            continue;\n          }\n\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n          if (!operatorList) {\n            (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n            continue;\n          }\n\n          if (this.contentVisible) {\n            this.processingType3 = glyph;\n            this.save();\n            ctx.scale(fontSize, fontSize);\n            ctx.transform.apply(ctx, fontMatrix);\n            this.executeOperatorList(operatorList);\n            this.restore();\n          }\n\n          const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n          width = transformed[0] * fontSize + spacing;\n          ctx.translate(width, 0);\n          current.x += width * textHScale;\n        }\n\n        ctx.restore();\n        this.processingType3 = null;\n      },\n      setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},\n      setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n        this.ctx.rect(llx, lly, urx - llx, ury - lly);\n        this.clip();\n        this.endPath();\n      },\n      getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n        let pattern;\n\n        if (IR[0] === \"TilingPattern\") {\n          const color = IR[1];\n          const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n          const canvasGraphicsFactory = {\n            createCanvasGraphics: ctx => {\n              return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext);\n            }\n          };\n          pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n        } else {\n          pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);\n        }\n\n        return pattern;\n      },\n      setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n        this.current.strokeColor = this.getColorN_Pattern(arguments);\n      },\n      setFillColorN: function CanvasGraphics_setFillColorN() {\n        this.current.fillColor = this.getColorN_Pattern(arguments);\n        this.current.patternFill = true;\n      },\n      setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n        const color = _util.Util.makeHexColor(r, g, b);\n\n        this.ctx.strokeStyle = color;\n        this.current.strokeColor = color;\n      },\n      setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n        const color = _util.Util.makeHexColor(r, g, b);\n\n        this.ctx.fillStyle = color;\n        this.current.fillColor = color;\n        this.current.patternFill = false;\n      },\n      shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        this.save();\n        const pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);\n        ctx.fillStyle = pattern.getPattern(ctx, this, true);\n        const inv = ctx.mozCurrentTransformInverse;\n\n        if (inv) {\n          const canvas = ctx.canvas;\n          const width = canvas.width;\n          const height = canvas.height;\n\n          const bl = _util.Util.applyTransform([0, 0], inv);\n\n          const br = _util.Util.applyTransform([0, height], inv);\n\n          const ul = _util.Util.applyTransform([width, 0], inv);\n\n          const ur = _util.Util.applyTransform([width, height], inv);\n\n          const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n          const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n          const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n          const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n          this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n        } else {\n          this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n        }\n\n        this.restore();\n      },\n      beginInlineImage: function CanvasGraphics_beginInlineImage() {\n        (0, _util.unreachable)(\"Should not call beginInlineImage\");\n      },\n      beginImageData: function CanvasGraphics_beginImageData() {\n        (0, _util.unreachable)(\"Should not call beginImageData\");\n      },\n      paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.save();\n        this.baseTransformStack.push(this.baseTransform);\n\n        if (Array.isArray(matrix) && matrix.length === 6) {\n          this.transform.apply(this, matrix);\n        }\n\n        this.baseTransform = this.ctx.mozCurrentTransform;\n\n        if (bbox) {\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          this.ctx.rect(bbox[0], bbox[1], width, height);\n          this.clip();\n          this.endPath();\n        }\n      },\n      paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.restore();\n        this.baseTransform = this.baseTransformStack.pop();\n      },\n      beginGroup: function CanvasGraphics_beginGroup(group) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.save();\n        const currentCtx = this.ctx;\n\n        if (!group.isolated) {\n          (0, _util.info)(\"TODO: Support non-isolated groups.\");\n        }\n\n        if (group.knockout) {\n          (0, _util.warn)(\"Knockout groups not supported.\");\n        }\n\n        const currentTransform = currentCtx.mozCurrentTransform;\n\n        if (group.matrix) {\n          currentCtx.transform.apply(currentCtx, group.matrix);\n        }\n\n        if (!group.bbox) {\n          throw new Error(\"Bounding box is required.\");\n        }\n\n        let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n        const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n        bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n        const offsetX = Math.floor(bounds[0]);\n        const offsetY = Math.floor(bounds[1]);\n        let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n        let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n        let scaleX = 1,\n            scaleY = 1;\n\n        if (drawnWidth > MAX_GROUP_SIZE) {\n          scaleX = drawnWidth / MAX_GROUP_SIZE;\n          drawnWidth = MAX_GROUP_SIZE;\n        }\n\n        if (drawnHeight > MAX_GROUP_SIZE) {\n          scaleY = drawnHeight / MAX_GROUP_SIZE;\n          drawnHeight = MAX_GROUP_SIZE;\n        }\n\n        let cacheId = \"groupAt\" + this.groupLevel;\n\n        if (group.smask) {\n          cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n        }\n\n        const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n        const groupCtx = scratchCanvas.context;\n        groupCtx.scale(1 / scaleX, 1 / scaleY);\n        groupCtx.translate(-offsetX, -offsetY);\n        groupCtx.transform.apply(groupCtx, currentTransform);\n\n        if (group.smask) {\n          this.smaskStack.push({\n            canvas: scratchCanvas.canvas,\n            context: groupCtx,\n            offsetX,\n            offsetY,\n            scaleX,\n            scaleY,\n            subtype: group.smask.subtype,\n            backdrop: group.smask.backdrop,\n            transferMap: group.smask.transferMap || null,\n            startTransformInverse: null\n          });\n        } else {\n          currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n          currentCtx.translate(offsetX, offsetY);\n          currentCtx.scale(scaleX, scaleY);\n        }\n\n        copyCtxState(currentCtx, groupCtx);\n        this.ctx = groupCtx;\n        this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n        this.groupStack.push(currentCtx);\n        this.groupLevel++;\n        this.current.activeSMask = null;\n      },\n      endGroup: function CanvasGraphics_endGroup(group) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.groupLevel--;\n        const groupCtx = this.ctx;\n        this.ctx = this.groupStack.pop();\n\n        if (this.ctx.imageSmoothingEnabled !== undefined) {\n          this.ctx.imageSmoothingEnabled = false;\n        } else {\n          this.ctx.mozImageSmoothingEnabled = false;\n        }\n\n        if (group.smask) {\n          this.tempSMask = this.smaskStack.pop();\n        } else {\n          this.ctx.drawImage(groupCtx.canvas, 0, 0);\n        }\n\n        this.restore();\n      },\n      beginAnnotations: function CanvasGraphics_beginAnnotations() {\n        this.save();\n\n        if (this.baseTransform) {\n          this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n        }\n      },\n      endAnnotations: function CanvasGraphics_endAnnotations() {\n        this.restore();\n      },\n      beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {\n        this.save();\n        resetCtxToDefault(this.ctx);\n        this.current = new CanvasExtraState();\n\n        if (Array.isArray(rect) && rect.length === 4) {\n          const width = rect[2] - rect[0];\n          const height = rect[3] - rect[1];\n          this.ctx.rect(rect[0], rect[1], width, height);\n          this.clip();\n          this.endPath();\n        }\n\n        this.transform.apply(this, transform);\n        this.transform.apply(this, matrix);\n      },\n      endAnnotation: function CanvasGraphics_endAnnotation() {\n        this.restore();\n      },\n      paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const width = img.width,\n              height = img.height;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        const glyph = this.processingType3;\n\n        if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n          if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n            glyph.compiled = compileType3Glyph({\n              data: img.data,\n              width,\n              height\n            });\n          } else {\n            glyph.compiled = null;\n          }\n        }\n\n        if (glyph && glyph.compiled) { // lwf\n          glyph.compiled(ctx);\n          return;\n        }\n\n        const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n        putBinaryImageMask(maskCtx, img);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        this.paintInlineImageXObject(maskCanvas.canvas);\n      },\n\n      paintImageMaskXObjectRepeat(imgData, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n        const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n        putBinaryImageMask(maskCtx, imgData);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        const ctx = this.ctx;\n\n        for (let i = 0, ii = positions.length; i < ii; i += 2) {\n          ctx.save();\n          ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);\n          ctx.scale(1, -1);\n          ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n          ctx.restore();\n        }\n      },\n\n      paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const fillColor = this.current.fillColor;\n        const isPatternFill = this.current.patternFill;\n\n        for (let i = 0, ii = images.length; i < ii; i++) {\n          const image = images[i];\n          const width = image.width,\n                height = image.height;\n          const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n          const maskCtx = maskCanvas.context;\n          maskCtx.save();\n          putBinaryImageMask(maskCtx, image);\n          maskCtx.globalCompositeOperation = \"source-in\";\n          maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n          maskCtx.fillRect(0, 0, width, height);\n          maskCtx.restore();\n          ctx.save();\n          ctx.transform.apply(ctx, image.transform);\n          ctx.scale(1, -1);\n          ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n          ctx.restore();\n        }\n      },\n      paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(\"Dependent image isn't ready yet\");\n          return;\n        }\n\n        this.paintInlineImageXObject(imgData);\n      },\n      paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(\"Dependent image isn't ready yet\");\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const map = [];\n\n        for (let i = 0, ii = positions.length; i < ii; i += 2) {\n          map.push({\n            transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n            x: 0,\n            y: 0,\n            w: width,\n            h: height\n          });\n        }\n\n        this.paintInlineImageXObjectGroup(imgData, map);\n      },\n      paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const width = imgData.width;\n        const height = imgData.height;\n        const ctx = this.ctx;\n        this.save();\n        ctx.scale(1 / width, -1 / height);\n        const currentTransform = ctx.mozCurrentTransformInverse;\n        const a = currentTransform[0],\n              b = currentTransform[1];\n        let widthScale = Math.max(Math.sqrt(a * a + b * b), 1);\n        const c = currentTransform[2],\n              d = currentTransform[3];\n        let heightScale = Math.max(Math.sqrt(c * c + d * d), 1);\n        let imgToPaint, tmpCanvas, tmpCtx;\n\n        if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n          imgToPaint = imgData;\n        } else {\n          tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n          tmpCtx = tmpCanvas.context;\n          putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n          imgToPaint = tmpCanvas.canvas;\n        }\n\n        let paintWidth = width,\n            paintHeight = height;\n        let tmpCanvasId = \"prescale1\";\n\n        while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n          let newWidth = paintWidth,\n              newHeight = paintHeight;\n\n          if (widthScale > 2 && paintWidth > 1) {\n            newWidth = Math.ceil(paintWidth / 2);\n            widthScale /= paintWidth / newWidth;\n          }\n\n          if (heightScale > 2 && paintHeight > 1) {\n            newHeight = Math.ceil(paintHeight / 2);\n            heightScale /= paintHeight / newHeight;\n          }\n\n          tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n          tmpCtx = tmpCanvas.context;\n          tmpCtx.clearRect(0, 0, newWidth, newHeight);\n          tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n          imgToPaint = tmpCanvas.canvas;\n          paintWidth = newWidth;\n          paintHeight = newHeight;\n          tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n        }\n\n        ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);\n\n        if (this.imageLayer) {\n          const position = this.getCanvasPosition(0, -height);\n          this.imageLayer.appendImage({\n            imgData,\n            left: position[0],\n            top: position[1],\n            width: width / currentTransform[0],\n            height: height / currentTransform[3]\n          });\n        }\n\n        this.restore();\n      },\n      paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        const ctx = this.ctx;\n        const w = imgData.width;\n        const h = imgData.height;\n        const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n        const tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n        for (let i = 0, ii = map.length; i < ii; i++) {\n          const entry = map[i];\n          ctx.save();\n          ctx.transform.apply(ctx, entry.transform);\n          ctx.scale(1, -1);\n          ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n          if (this.imageLayer) {\n            const position = this.getCanvasPosition(entry.x, entry.y);\n            this.imageLayer.appendImage({\n              imgData,\n              left: position[0],\n              top: position[1],\n              width: w,\n              height: h\n            });\n          }\n\n          ctx.restore();\n        }\n      },\n      paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n        if (!this.contentVisible) {\n          return;\n        }\n\n        this.ctx.fillRect(0, 0, 1, 1);\n      },\n      markPoint: function CanvasGraphics_markPoint(tag) {},\n      markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},\n      beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n        this.markedContentStack.push({\n          visible: true\n        });\n      },\n      beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {\n        if (tag === \"OC\") {\n          this.markedContentStack.push({\n            visible: this.optionalContentConfig.isVisible(properties)\n          });\n        } else {\n          this.markedContentStack.push({\n            visible: true\n          });\n        }\n\n        this.contentVisible = this.isContentVisible();\n      },\n      endMarkedContent: function CanvasGraphics_endMarkedContent() {\n        this.markedContentStack.pop();\n        this.contentVisible = this.isContentVisible();\n      },\n      beginCompat: function CanvasGraphics_beginCompat() {},\n      endCompat: function CanvasGraphics_endCompat() {},\n      consumePath: function CanvasGraphics_consumePath() {\n        const ctx = this.ctx;\n\n        if (this.pendingClip) {\n          if (this.pendingClip === EO_CLIP) {\n            ctx.clip(\"evenodd\");\n          } else {\n            ctx.clip();\n          }\n\n          this.pendingClip = null;\n        }\n\n        ctx.beginPath();\n      },\n\n      getSinglePixelWidth() {\n        if (this._cachedGetSinglePixelWidth === null) {\n          const m = this.ctx.mozCurrentTransform;\n          const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n          const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n          const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n          const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n          if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n            this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n          } else if (absDet > Number.EPSILON) {\n            this._cachedGetSinglePixelWidth = pixelHeight * 1.0000001;\n          } else {\n            this._cachedGetSinglePixelWidth = 1;\n          }\n        }\n\n        return this._cachedGetSinglePixelWidth;\n      },\n\n      getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n        const transform = this.ctx.mozCurrentTransform;\n        return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n      },\n      isContentVisible: function CanvasGraphics_isContentVisible() {\n        for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n          if (!this.markedContentStack[i].visible) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    };\n\n    for (const op in _util.OPS) {\n      CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n    }\n\n    return CanvasGraphics;\n  }();\n\n  exports.CanvasGraphics = CanvasGraphics;\n\n  /***/ }),\n  /* 11 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getShadingPatternFromIR = getShadingPatternFromIR;\n  exports.TilingPattern = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const ShadingIRs = {};\n\n  function applyBoundingBox(ctx, bbox) {\n    if (!bbox || typeof Path2D === \"undefined\") {\n      return;\n    }\n\n    const width = bbox[2] - bbox[0];\n    const height = bbox[3] - bbox[1];\n    const region = new Path2D();\n    region.rect(bbox[0], bbox[1], width, height);\n    ctx.clip(region);\n  }\n\n  ShadingIRs.RadialAxial = {\n    fromIR: function RadialAxial_fromIR(raw) {\n      const type = raw[1];\n      const bbox = raw[2];\n      const colorStops = raw[3];\n      const p0 = raw[4];\n      const p1 = raw[5];\n      const r0 = raw[6];\n      const r1 = raw[7];\n      return {\n        getPattern: function RadialAxial_getPattern(ctx) {\n          applyBoundingBox(ctx, bbox);\n          let grad;\n\n          if (type === \"axial\") {\n            grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n          } else if (type === \"radial\") {\n            grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n          }\n\n          for (let i = 0, ii = colorStops.length; i < ii; ++i) {\n            const c = colorStops[i];\n            grad.addColorStop(c[0], c[1]);\n          }\n\n          return grad;\n        }\n      };\n    }\n  };\n\n  const createMeshCanvas = function createMeshCanvasClosure() {\n    function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n      const coords = context.coords,\n            colors = context.colors;\n      const bytes = data.data,\n            rowSize = data.width * 4;\n      let tmp;\n\n      if (coords[p1 + 1] > coords[p2 + 1]) {\n        tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n        tmp = c1;\n        c1 = c2;\n        c2 = tmp;\n      }\n\n      if (coords[p2 + 1] > coords[p3 + 1]) {\n        tmp = p2;\n        p2 = p3;\n        p3 = tmp;\n        tmp = c2;\n        c2 = c3;\n        c3 = tmp;\n      }\n\n      if (coords[p1 + 1] > coords[p2 + 1]) {\n        tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n        tmp = c1;\n        c1 = c2;\n        c2 = tmp;\n      }\n\n      const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n      const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n      const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n      const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n      const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n      const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n      if (y1 >= y3) {\n        return;\n      }\n\n      const c1r = colors[c1],\n            c1g = colors[c1 + 1],\n            c1b = colors[c1 + 2];\n      const c2r = colors[c2],\n            c2g = colors[c2 + 1],\n            c2b = colors[c2 + 2];\n      const c3r = colors[c3],\n            c3g = colors[c3 + 1],\n            c3b = colors[c3 + 2];\n      const minY = Math.round(y1),\n            maxY = Math.round(y3);\n      let xa, car, cag, cab;\n      let xb, cbr, cbg, cbb;\n\n      for (let y = minY; y <= maxY; y++) {\n        if (y < y2) {\n          let k;\n\n          if (y < y1) {\n            k = 0;\n          } else if (y1 === y2) {\n            k = 1;\n          } else {\n            k = (y1 - y) / (y1 - y2);\n          }\n\n          xa = x1 - (x1 - x2) * k;\n          car = c1r - (c1r - c2r) * k;\n          cag = c1g - (c1g - c2g) * k;\n          cab = c1b - (c1b - c2b) * k;\n        } else {\n          let k;\n\n          if (y > y3) {\n            k = 1;\n          } else if (y2 === y3) {\n            k = 0;\n          } else {\n            k = (y2 - y) / (y2 - y3);\n          }\n\n          xa = x2 - (x2 - x3) * k;\n          car = c2r - (c2r - c3r) * k;\n          cag = c2g - (c2g - c3g) * k;\n          cab = c2b - (c2b - c3b) * k;\n        }\n\n        let k;\n\n        if (y < y1) {\n          k = 0;\n        } else if (y > y3) {\n          k = 1;\n        } else {\n          k = (y1 - y) / (y1 - y3);\n        }\n\n        xb = x1 - (x1 - x3) * k;\n        cbr = c1r - (c1r - c3r) * k;\n        cbg = c1g - (c1g - c3g) * k;\n        cbb = c1b - (c1b - c3b) * k;\n        const x1_ = Math.round(Math.min(xa, xb));\n        const x2_ = Math.round(Math.max(xa, xb));\n        let j = rowSize * y + x1_ * 4;\n\n        for (let x = x1_; x <= x2_; x++) {\n          k = (xa - x) / (xa - xb);\n\n          if (k < 0) {\n            k = 0;\n          } else if (k > 1) {\n            k = 1;\n          }\n\n          bytes[j++] = car - (car - cbr) * k | 0;\n          bytes[j++] = cag - (cag - cbg) * k | 0;\n          bytes[j++] = cab - (cab - cbb) * k | 0;\n          bytes[j++] = 255;\n        }\n      }\n    }\n\n    function drawFigure(data, figure, context) {\n      const ps = figure.coords;\n      const cs = figure.colors;\n      let i, ii;\n\n      switch (figure.type) {\n        case \"lattice\":\n          const verticesPerRow = figure.verticesPerRow;\n          const rows = Math.floor(ps.length / verticesPerRow) - 1;\n          const cols = verticesPerRow - 1;\n\n          for (i = 0; i < rows; i++) {\n            let q = i * verticesPerRow;\n\n            for (let j = 0; j < cols; j++, q++) {\n              drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n              drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n            }\n          }\n\n          break;\n\n        case \"triangles\":\n          for (i = 0, ii = ps.length; i < ii; i += 3) {\n            drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n          }\n\n          break;\n\n        default:\n          throw new Error(\"illegal figure\");\n      }\n    }\n\n    function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {\n      const EXPECTED_SCALE = 1.1;\n      const MAX_PATTERN_SIZE = 3000;\n      const BORDER_SIZE = 2;\n      const offsetX = Math.floor(bounds[0]);\n      const offsetY = Math.floor(bounds[1]);\n      const boundsWidth = Math.ceil(bounds[2]) - offsetX;\n      const boundsHeight = Math.ceil(bounds[3]) - offsetY;\n      const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const scaleX = boundsWidth / width;\n      const scaleY = boundsHeight / height;\n      const context = {\n        coords,\n        colors,\n        offsetX: -offsetX,\n        offsetY: -offsetY,\n        scaleX: 1 / scaleX,\n        scaleY: 1 / scaleY\n      };\n      const paddedWidth = width + BORDER_SIZE * 2;\n      const paddedHeight = height + BORDER_SIZE * 2;\n      let canvas, tmpCanvas, i, ii;\n\n      if (webGLContext.isEnabled) {\n        canvas = webGLContext.drawFigures({\n          width,\n          height,\n          backgroundColor,\n          figures,\n          context\n        });\n        tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n        tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n        canvas = tmpCanvas.canvas;\n      } else {\n        tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n        const tmpCtx = tmpCanvas.context;\n        const data = tmpCtx.createImageData(width, height);\n\n        if (backgroundColor) {\n          const bytes = data.data;\n\n          for (i = 0, ii = bytes.length; i < ii; i += 4) {\n            bytes[i] = backgroundColor[0];\n            bytes[i + 1] = backgroundColor[1];\n            bytes[i + 2] = backgroundColor[2];\n            bytes[i + 3] = 255;\n          }\n        }\n\n        for (i = 0; i < figures.length; i++) {\n          drawFigure(data, figures[i], context);\n        }\n\n        tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n        canvas = tmpCanvas.canvas;\n      }\n\n      return {\n        canvas,\n        offsetX: offsetX - BORDER_SIZE * scaleX,\n        offsetY: offsetY - BORDER_SIZE * scaleY,\n        scaleX,\n        scaleY\n      };\n    }\n\n    return createMeshCanvas;\n  }();\n\n  ShadingIRs.Mesh = {\n    fromIR: function Mesh_fromIR(raw) {\n      const coords = raw[2];\n      const colors = raw[3];\n      const figures = raw[4];\n      const bounds = raw[5];\n      const matrix = raw[6];\n      const bbox = raw[7];\n      const background = raw[8];\n      return {\n        getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n          applyBoundingBox(ctx, bbox);\n          let scale;\n\n          if (shadingFill) {\n            scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n          } else {\n            scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n            if (matrix) {\n              const matrixScale = _util.Util.singularValueDecompose2dScale(matrix);\n\n              scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n            }\n          }\n\n          const temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);\n\n          if (!shadingFill) {\n            ctx.setTransform.apply(ctx, owner.baseTransform);\n\n            if (matrix) {\n              ctx.transform.apply(ctx, matrix);\n            }\n          }\n\n          ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n          ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n          return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n        }\n      };\n    }\n  };\n  ShadingIRs.Dummy = {\n    fromIR: function Dummy_fromIR() {\n      return {\n        getPattern: function Dummy_fromIR_getPattern() {\n          return \"hotpink\";\n        }\n      };\n    }\n  };\n\n  function getShadingPatternFromIR(raw) {\n    const shadingIR = ShadingIRs[raw[0]];\n\n    if (!shadingIR) {\n      throw new Error(`Unknown IR type: ${raw[0]}`);\n    }\n\n    return shadingIR.fromIR(raw);\n  }\n\n  const TilingPattern = function TilingPatternClosure() {\n    const PaintType = {\n      COLORED: 1,\n      UNCOLORED: 2\n    };\n    const MAX_PATTERN_SIZE = 3000;\n\n    function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n      this.operatorList = IR[2];\n      this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n      this.bbox = IR[4];\n      this.xstep = IR[5];\n      this.ystep = IR[6];\n      this.paintType = IR[7];\n      this.tilingType = IR[8];\n      this.color = color;\n      this.canvasGraphicsFactory = canvasGraphicsFactory;\n      this.baseTransform = baseTransform;\n      this.ctx = ctx;\n    }\n\n    TilingPattern.prototype = {\n      createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n        const operatorList = this.operatorList;\n        const bbox = this.bbox;\n        const xstep = this.xstep;\n        const ystep = this.ystep;\n        const paintType = this.paintType;\n        const tilingType = this.tilingType;\n        const color = this.color;\n        const canvasGraphicsFactory = this.canvasGraphicsFactory;\n        (0, _util.info)(\"TilingType: \" + tilingType);\n        const x0 = bbox[0],\n              y0 = bbox[1],\n              x1 = bbox[2],\n              y1 = bbox[3];\n\n        const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n        const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n        const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n        const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n        const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n        const tmpCtx = tmpCanvas.context;\n        const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n        graphics.groupLevel = owner.groupLevel;\n        this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n        graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n        graphics.transform(1, 0, 0, 1, -x0, -y0);\n        this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n        graphics.executeOperatorList(operatorList);\n        this.ctx.transform(1, 0, 0, 1, x0, y0);\n        this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n        return tmpCanvas.canvas;\n      },\n      getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {\n        step = Math.abs(step);\n        const maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n        let size = Math.ceil(step * scale);\n\n        if (size >= maxSize) {\n          size = maxSize;\n        } else {\n          scale = size / step;\n        }\n\n        return {\n          scale,\n          size\n        };\n      },\n      clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n        if (Array.isArray(bbox) && bbox.length === 4) {\n          const bboxWidth = x1 - x0;\n          const bboxHeight = y1 - y0;\n          graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n          graphics.clip();\n          graphics.endPath();\n        }\n      },\n      setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {\n        const context = graphics.ctx,\n              current = graphics.current;\n\n        switch (paintType) {\n          case PaintType.COLORED:\n            const ctx = this.ctx;\n            context.fillStyle = ctx.fillStyle;\n            context.strokeStyle = ctx.strokeStyle;\n            current.fillColor = ctx.fillStyle;\n            current.strokeColor = ctx.strokeStyle;\n            break;\n\n          case PaintType.UNCOLORED:\n            const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n            context.fillStyle = cssColor;\n            context.strokeStyle = cssColor;\n            current.fillColor = cssColor;\n            current.strokeColor = cssColor;\n            break;\n\n          default:\n            throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n        }\n      },\n      getPattern: function TilingPattern_getPattern(ctx, owner) {\n        ctx = this.ctx;\n        ctx.setTransform.apply(ctx, this.baseTransform);\n        ctx.transform.apply(ctx, this.matrix);\n        const temporaryPatternCanvas = this.createPatternCanvas(owner);\n        return ctx.createPattern(temporaryPatternCanvas, \"repeat\");\n      }\n    };\n    return TilingPattern;\n  }();\n\n  exports.TilingPattern = TilingPattern;\n\n  /***/ }),\n  /* 12 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.GlobalWorkerOptions = void 0;\n  const GlobalWorkerOptions = Object.create(null);\n  exports.GlobalWorkerOptions = GlobalWorkerOptions;\n  GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n  GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n\n  /***/ }),\n  /* 13 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.MessageHandler = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const CallbackKind = {\n    UNKNOWN: 0,\n    DATA: 1,\n    ERROR: 2\n  };\n  const StreamKind = {\n    UNKNOWN: 0,\n    CANCEL: 1,\n    CANCEL_COMPLETE: 2,\n    CLOSE: 3,\n    ENQUEUE: 4,\n    ERROR: 5,\n    PULL: 6,\n    PULL_COMPLETE: 7,\n    START_COMPLETE: 8\n  };\n\n  function wrapReason(reason) {\n    if (typeof reason !== \"object\" || reason === null) {\n      return reason;\n    }\n\n    switch (reason.name) {\n      case \"AbortException\":\n        return new _util.AbortException(reason.message);\n\n      case \"MissingPDFException\":\n        return new _util.MissingPDFException(reason.message);\n\n      case \"UnexpectedResponseException\":\n        return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n      case \"UnknownErrorException\":\n        return new _util.UnknownErrorException(reason.message, reason.details);\n\n      default:\n        return new _util.UnknownErrorException(reason.message, reason.toString());\n    }\n  }\n\n  class MessageHandler {\n    constructor(sourceName, targetName, comObj) {\n      this.sourceName = sourceName;\n      this.targetName = targetName;\n      this.comObj = comObj;\n      this.callbackId = 1;\n      this.streamId = 1;\n      this.postMessageTransfers = true;\n      this.streamSinks = Object.create(null);\n      this.streamControllers = Object.create(null);\n      this.callbackCapabilities = Object.create(null);\n      this.actionHandler = Object.create(null);\n\n      this._onComObjOnMessage = event => {\n        const data = event.data;\n\n        if (data.targetName !== this.sourceName) {\n          return;\n        }\n\n        if (data.stream) {\n          this._processStreamMessage(data);\n\n          return;\n        }\n\n        if (data.callback) {\n          const callbackId = data.callbackId;\n          const capability = this.callbackCapabilities[callbackId];\n\n          if (!capability) {\n            throw new Error(`Cannot resolve callback ${callbackId}`);\n          }\n\n          delete this.callbackCapabilities[callbackId];\n\n          if (data.callback === CallbackKind.DATA) {\n            capability.resolve(data.data);\n          } else if (data.callback === CallbackKind.ERROR) {\n            capability.reject(wrapReason(data.reason));\n          } else {\n            throw new Error(\"Unexpected callback case\");\n          }\n\n          return;\n        }\n\n        const action = this.actionHandler[data.action];\n\n        if (!action) {\n          throw new Error(`Unknown action from worker: ${data.action}`);\n        }\n\n        if (data.callbackId) {\n          const cbSourceName = this.sourceName;\n          const cbTargetName = data.sourceName;\n          new Promise(function (resolve) {\n            resolve(action(data.data));\n          }).then(function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason)\n            });\n          });\n          return;\n        }\n\n        if (data.streamId) {\n          this._createStreamSink(data);\n\n          return;\n        }\n\n        action(data.data);\n      };\n\n      comObj.addEventListener(\"message\", this._onComObjOnMessage);\n    }\n\n    on(actionName, handler) {\n      const ah = this.actionHandler;\n\n      if (ah[actionName]) {\n        throw new Error(`There is already an actionName called \"${actionName}\"`);\n      }\n\n      ah[actionName] = handler;\n    }\n\n    send(actionName, data, transfers) {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data\n      }, transfers);\n    }\n\n    sendWithPromise(actionName, data, transfers) {\n      const callbackId = this.callbackId++;\n      const capability = (0, _util.createPromiseCapability)();\n      this.callbackCapabilities[callbackId] = capability;\n\n      try {\n        this._postMessage({\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data\n        }, transfers);\n      } catch (ex) {\n        capability.reject(ex);\n      }\n\n      return capability.promise;\n    }\n\n    sendWithStream(actionName, data, queueingStrategy, transfers) {\n      const streamId = this.streamId++;\n      const sourceName = this.sourceName;\n      const targetName = this.targetName;\n      const comObj = this.comObj;\n      return new ReadableStream({\n        start: controller => {\n          const startCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false\n          };\n\n          this._postMessage({\n            sourceName,\n            targetName,\n            action: actionName,\n            streamId,\n            data,\n            desiredSize: controller.desiredSize\n          }, transfers);\n\n          return startCapability.promise;\n        },\n        pull: controller => {\n          const pullCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize\n          });\n          return pullCapability.promise;\n        },\n        cancel: reason => {\n          (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = (0, _util.createPromiseCapability)();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason)\n          });\n          return cancelCapability.promise;\n        }\n      }, queueingStrategy);\n    }\n\n    _createStreamSink(data) {\n      const self = this;\n      const action = this.actionHandler[data.action];\n      const streamId = data.streamId;\n      const sourceName = this.sourceName;\n      const targetName = data.sourceName;\n      const comObj = this.comObj;\n      const streamSink = {\n        enqueue(chunk, size = 1, transfers) {\n          if (this.isCancelled) {\n            return;\n          }\n\n          const lastDesiredSize = this.desiredSize;\n          this.desiredSize -= size;\n\n          if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n            this.sinkCapability = (0, _util.createPromiseCapability)();\n            this.ready = this.sinkCapability.promise;\n          }\n\n          self._postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk\n          }, transfers);\n        },\n\n        close() {\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CLOSE,\n            streamId\n          });\n          delete self.streamSinks[streamId];\n        },\n\n        error(reason) {\n          (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ERROR,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        },\n\n        sinkCapability: (0, _util.createPromiseCapability)(),\n        onPull: null,\n        onCancel: null,\n        isCancelled: false,\n        desiredSize: data.desiredSize,\n        ready: null\n      };\n      streamSink.sinkCapability.resolve();\n      streamSink.ready = streamSink.sinkCapability.promise;\n      this.streamSinks[streamId] = streamSink;\n      new Promise(function (resolve) {\n        resolve(action(data.data, streamSink));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      });\n    }\n\n    _processStreamMessage(data) {\n      const streamId = data.streamId;\n      const sourceName = this.sourceName;\n      const targetName = data.sourceName;\n      const comObj = this.comObj;\n\n      switch (data.stream) {\n        case StreamKind.START_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].startCall.resolve();\n          } else {\n            this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].pullCall.resolve();\n          } else {\n            this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL:\n          if (!this.streamSinks[streamId]) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n            break;\n          }\n\n          if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n            this.streamSinks[streamId].sinkCapability.resolve();\n          }\n\n          this.streamSinks[streamId].desiredSize = data.desiredSize;\n          const {\n            onPull\n          } = this.streamSinks[data.streamId];\n          new Promise(function (resolve) {\n            resolve(onPull && onPull());\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          break;\n\n        case StreamKind.ENQUEUE:\n          (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].controller.enqueue(data.chunk);\n          break;\n\n        case StreamKind.CLOSE:\n          (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].isClosed = true;\n          this.streamControllers[streamId].controller.close();\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.ERROR:\n          (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n          this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].cancelCall.resolve();\n          } else {\n            this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n          }\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL:\n          if (!this.streamSinks[streamId]) {\n            break;\n          }\n\n          const {\n            onCancel\n          } = this.streamSinks[data.streamId];\n          new Promise(function (resolve) {\n            resolve(onCancel && onCancel(wrapReason(data.reason)));\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n          this.streamSinks[streamId].isCancelled = true;\n          delete this.streamSinks[streamId];\n          break;\n\n        default:\n          throw new Error(\"Unexpected stream case\");\n      }\n    }\n\n    async _deleteStreamController(streamId) {\n      await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n        return capability && capability.promise;\n      }));\n      delete this.streamControllers[streamId];\n    }\n\n    _postMessage(message, transfers) {\n      if (transfers && this.postMessageTransfers) {\n        this.comObj.postMessage(message, transfers);\n      } else {\n        this.comObj.postMessage(message);\n      }\n    }\n\n    destroy() {\n      this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n    }\n\n  }\n\n  exports.MessageHandler = MessageHandler;\n\n  /***/ }),\n  /* 14 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.Metadata = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _xml_parser = __w_pdfjs_require__(15);\n\n  class Metadata {\n    constructor(data) {\n      (0, _util.assert)(typeof data === \"string\", \"Metadata: input is not a string\");\n      data = this._repair(data);\n      const parser = new _xml_parser.SimpleXMLParser({\n        lowerCaseName: true\n      });\n      const xmlDocument = parser.parseFromString(data);\n      this._metadataMap = new Map();\n\n      if (xmlDocument) {\n        this._parse(xmlDocument);\n      }\n\n      this._data = data;\n    }\n\n    _repair(data) {\n      return data.replace(/^[^<]+/, \"\").replace(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {\n        const bytes = codes.replace(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {\n          return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);\n        }).replace(/&(amp|apos|gt|lt|quot);/g, function (str, name) {\n          switch (name) {\n            case \"amp\":\n              return \"&\";\n\n            case \"apos\":\n              return \"'\";\n\n            case \"gt\":\n              return \">\";\n\n            case \"lt\":\n              return \"<\";\n\n            case \"quot\":\n              return '\"';\n          }\n\n          throw new Error(`_repair: ${name} isn't defined.`);\n        });\n        let chars = \"\";\n\n        for (let i = 0, ii = bytes.length; i < ii; i += 2) {\n          const code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);\n\n          if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {\n            chars += String.fromCharCode(code);\n          } else {\n            chars += \"&#x\" + (0x10000 + code).toString(16).substring(1) + \";\";\n          }\n        }\n\n        return \">\" + chars;\n      });\n    }\n\n    _getSequence(entry) {\n      const name = entry.nodeName;\n\n      if (name !== \"rdf:bag\" && name !== \"rdf:seq\" && name !== \"rdf:alt\") {\n        return null;\n      }\n\n      return entry.childNodes.filter(node => node.nodeName === \"rdf:li\");\n    }\n\n    _getCreators(entry) {\n      if (entry.nodeName !== \"dc:creator\") {\n        return false;\n      }\n\n      if (!entry.hasChildNodes()) {\n        return true;\n      }\n\n      const seqNode = entry.childNodes[0];\n      const authors = this._getSequence(seqNode) || [];\n\n      this._metadataMap.set(entry.nodeName, authors.map(node => node.textContent.trim()));\n\n      return true;\n    }\n\n    _parse(xmlDocument) {\n      let rdf = xmlDocument.documentElement;\n\n      if (rdf.nodeName !== \"rdf:rdf\") {\n        rdf = rdf.firstChild;\n\n        while (rdf && rdf.nodeName !== \"rdf:rdf\") {\n          rdf = rdf.nextSibling;\n        }\n      }\n\n      if (!rdf || rdf.nodeName !== \"rdf:rdf\" || !rdf.hasChildNodes()) {\n        return;\n      }\n\n      for (const desc of rdf.childNodes) {\n        if (desc.nodeName !== \"rdf:description\") {\n          continue;\n        }\n\n        for (const entry of desc.childNodes) {\n          const name = entry.nodeName;\n\n          if (name === \"#text\") {\n            continue;\n          }\n\n          if (this._getCreators(entry)) {\n            continue;\n          }\n\n          this._metadataMap.set(name, entry.textContent.trim());\n        }\n      }\n    }\n\n    getRaw() {\n      return this._data;\n    }\n\n    get(name) {\n      return this._metadataMap.get(name) || null; //lwf\n    }\n\n    getAll() {\n      return (0, _util.objectFromEntries)(this._metadataMap);\n    }\n\n    has(name) {\n      return this._metadataMap.has(name);\n    }\n\n  }\n\n  exports.Metadata = Metadata;\n\n  /***/ }),\n  /* 15 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const XMLParserErrorCode = {\n    NoError: 0,\n    EndOfDocument: -1,\n    UnterminatedCdat: -2,\n    UnterminatedXmlDeclaration: -3,\n    UnterminatedDoctypeDeclaration: -4,\n    UnterminatedComment: -5,\n    MalformedElement: -6,\n    OutOfMemory: -7,\n    UnterminatedAttributeValue: -8,\n    UnterminatedElement: -9,\n    ElementNeverBegun: -10\n  };\n\n  function isWhitespace(s, index) {\n    const ch = s[index];\n    return ch === \" \" || ch === \"\\n\" || ch === \"\\r\" || ch === \"\\t\";\n  }\n\n  function isWhitespaceString(s) {\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (!isWhitespace(s, i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  class XMLParserBase {\n    _resolveEntities(s) {\n      return s.replace(/&([^;]+);/g, (all, entity) => {\n        if (entity.substring(0, 2) === \"#x\") {\n          return String.fromCodePoint(parseInt(entity.substring(2), 16));\n        } else if (entity.substring(0, 1) === \"#\") {\n          return String.fromCodePoint(parseInt(entity.substring(1), 10));\n        }\n\n        switch (entity) {\n          case \"lt\":\n            return \"<\";\n\n          case \"gt\":\n            return \">\";\n\n          case \"amp\":\n            return \"&\";\n\n          case \"quot\":\n            return '\"';\n        }\n\n        return this.onResolveEntity(entity);\n      });\n    }\n\n    _parseContent(s, start) {\n      const attributes = [];\n      let pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      const name = s.substring(start, pos);\n      skipWs();\n\n      while (pos < s.length && s[pos] !== \">\" && s[pos] !== \"/\" && s[pos] !== \"?\") {\n        skipWs();\n        let attrName = \"\",\n            attrValue = \"\";\n\n        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \"=\") {\n          attrName += s[pos];\n          ++pos;\n        }\n\n        skipWs();\n\n        if (s[pos] !== \"=\") {\n          return null;\n        }\n\n        ++pos;\n        skipWs();\n        const attrEndChar = s[pos];\n\n        if (attrEndChar !== '\"' && attrEndChar !== \"'\") {\n          return null;\n        }\n\n        const attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n        if (attrEndIndex < 0) {\n          return null;\n        }\n\n        attrValue = s.substring(pos, attrEndIndex);\n        attributes.push({\n          name: attrName,\n          value: this._resolveEntities(attrValue)\n        });\n        pos = attrEndIndex + 1;\n        skipWs();\n      }\n\n      return {\n        name,\n        attributes,\n        parsed: pos - start\n      };\n    }\n\n    _parseProcessingInstruction(s, start) {\n      let pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      const name = s.substring(start, pos);\n      skipWs();\n      const attrStart = pos;\n\n      while (pos < s.length && (s[pos] !== \"?\" || s[pos + 1] !== \">\")) {\n        ++pos;\n      }\n\n      const value = s.substring(attrStart, pos);\n      return {\n        name,\n        value,\n        parsed: pos - start\n      };\n    }\n\n    parseXml(s) {\n      let i = 0;\n\n      while (i < s.length) {\n        const ch = s[i];\n        let j = i;\n\n        if (ch === \"<\") {\n          ++j;\n          const ch2 = s[j];\n          let q;\n\n          switch (ch2) {\n            case \"/\":\n              ++j;\n              q = s.indexOf(\">\", j);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onEndElement(s.substring(j, q));\n              j = q + 1;\n              break;\n\n            case \"?\":\n              ++j;\n\n              const pi = this._parseProcessingInstruction(s, j);\n\n              if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== \"?>\") {\n                this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n                return;\n              }\n\n              this.onPi(pi.name, pi.value);\n              j += pi.parsed + 2;\n              break;\n\n            case \"!\":\n              if (s.substring(j + 1, j + 3) === \"--\") {\n                q = s.indexOf(\"-->\", j + 3);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedComment);\n                  return;\n                }\n\n                this.onComment(s.substring(j + 3, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"[CDATA[\") {\n                q = s.indexOf(\"]]>\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedCdat);\n                  return;\n                }\n\n                this.onCdata(s.substring(j + 8, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"DOCTYPE\") {\n                const q2 = s.indexOf(\"[\", j + 8);\n                let complexDoctype = false;\n                q = s.indexOf(\">\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                  return;\n                }\n\n                if (q2 > 0 && q > q2) {\n                  q = s.indexOf(\"]>\", j + 8);\n\n                  if (q < 0) {\n                    this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                    return;\n                  }\n\n                  complexDoctype = true;\n                }\n\n                const doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n                this.onDoctype(doctypeContent);\n                j = q + (complexDoctype ? 2 : 1);\n              } else {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              break;\n\n            default:\n              const content = this._parseContent(s, j);\n\n              if (content === null) {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              let isClosed = false;\n\n              if (s.substring(j + content.parsed, j + content.parsed + 2) === \"/>\") {\n                isClosed = true;\n              } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== \">\") {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onBeginElement(content.name, content.attributes, isClosed);\n              j += content.parsed + (isClosed ? 2 : 1);\n              break;\n          }\n        } else {\n          while (j < s.length && s[j] !== \"<\") {\n            j++;\n          }\n\n          const text = s.substring(i, j);\n          this.onText(this._resolveEntities(text));\n        }\n\n        i = j;\n      }\n    }\n\n    onResolveEntity(name) {\n      return `&${name};`;\n    }\n\n    onPi(name, value) {}\n\n    onComment(text) {}\n\n    onCdata(text) {}\n\n    onDoctype(doctypeContent) {}\n\n    onText(text) {}\n\n    onBeginElement(name, attributes, isEmpty) {}\n\n    onEndElement(name) {}\n\n    onError(code) {}\n\n  }\n\n  class SimpleDOMNode {\n    constructor(nodeName, nodeValue) {\n      this.nodeName = nodeName;\n      this.nodeValue = nodeValue;\n      Object.defineProperty(this, \"parentNode\", {\n        value: null,\n        writable: true\n      });\n    }\n\n    get firstChild() {\n      return this.childNodes && this.childNodes[0];\n    }\n\n    get nextSibling() {\n      const childNodes = this.parentNode.childNodes;\n\n      if (!childNodes) {\n        return undefined;\n      }\n\n      const index = childNodes.indexOf(this);\n\n      if (index === -1) {\n        return undefined;\n      }\n\n      return childNodes[index + 1];\n    }\n\n    get textContent() {\n      if (!this.childNodes) {\n        return this.nodeValue || \"\";\n      }\n\n      return this.childNodes.map(function (child) {\n        return child.textContent;\n      }).join(\"\");\n    }\n\n    hasChildNodes() {\n      return this.childNodes && this.childNodes.length > 0;\n    }\n\n    searchNode(paths, pos) {\n      if (pos >= paths.length) {\n        return this;\n      }\n\n      const component = paths[pos];\n      const stack = [];\n      let node = this;\n\n      while (true) {\n        if (component.name === node.nodeName) {\n          if (component.pos === 0) {\n            const res = node.searchNode(paths, pos + 1);\n\n            if (res !== null) {\n              return res;\n            }\n          } else if (stack.length === 0) {\n            return null;\n          } else {\n            const [parent] = stack.pop();\n            let siblingPos = 0;\n\n            for (const child of parent.childNodes) {\n              if (component.name === child.nodeName) {\n                if (siblingPos === component.pos) {\n                  return child.searchNode(paths, pos + 1);\n                }\n\n                siblingPos++;\n              }\n            }\n\n            return node.searchNode(paths, pos + 1);\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length !== 0) {\n          stack.push([node, 0]);\n          node = node.childNodes[0];\n        } else if (stack.length === 0) {\n          return null;\n        } else {\n          while (stack.length !== 0) {\n            const [parent, currentPos] = stack.pop();\n            const newPos = currentPos + 1;\n\n            if (newPos < parent.childNodes.length) {\n              stack.push([parent, newPos]);\n              node = parent.childNodes[newPos];\n              break;\n            }\n          }\n\n          if (stack.length === 0) {\n            return null;\n          }\n        }\n      }\n    }\n\n    dump(buffer) {\n      if (this.nodeName === \"#text\") {\n        buffer.push((0, _util.encodeToXmlString)(this.nodeValue));\n        return;\n      }\n\n      buffer.push(`<${this.nodeName}`);\n\n      if (this.attributes) {\n        for (const attribute of this.attributes) {\n          buffer.push(` ${attribute.name}=\"${(0, _util.encodeToXmlString)(attribute.value)}\"`);\n        }\n      }\n\n      if (this.hasChildNodes()) {\n        buffer.push(\">\");\n\n        for (const child of this.childNodes) {\n          child.dump(buffer);\n        }\n\n        buffer.push(`</${this.nodeName}>`);\n      } else if (this.nodeValue) {\n        buffer.push(`>${(0, _util.encodeToXmlString)(this.nodeValue)}</${this.nodeName}>`);\n      } else {\n        buffer.push(\"/>\");\n      }\n    }\n\n  }\n\n  exports.SimpleDOMNode = SimpleDOMNode;\n\n  class SimpleXMLParser extends XMLParserBase {\n    constructor({\n      hasAttributes = false,\n      lowerCaseName = false\n    }) {\n      super();\n      this._currentFragment = null;\n      this._stack = null;\n      this._errorCode = XMLParserErrorCode.NoError;\n      this._hasAttributes = hasAttributes;\n      this._lowerCaseName = lowerCaseName;\n    }\n\n    parseFromString(data) {\n      this._currentFragment = [];\n      this._stack = [];\n      this._errorCode = XMLParserErrorCode.NoError;\n      this.parseXml(data);\n\n      if (this._errorCode !== XMLParserErrorCode.NoError) {\n        return undefined;\n      }\n\n      const [documentElement] = this._currentFragment;\n\n      if (!documentElement) {\n        return undefined;\n      }\n\n      return {\n        documentElement\n      };\n    }\n\n    onResolveEntity(name) {\n      switch (name) {\n        case \"apos\":\n          return \"'\";\n      }\n\n      return super.onResolveEntity(name);\n    }\n\n    onText(text) {\n      if (isWhitespaceString(text)) {\n        return;\n      }\n\n      const node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n\n    onCdata(text) {\n      const node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n\n    onBeginElement(name, attributes, isEmpty) {\n      if (this._lowerCaseName) {\n        name = name.toLowerCase();\n      }\n\n      const node = new SimpleDOMNode(name);\n      node.childNodes = [];\n\n      if (this._hasAttributes) {\n        node.attributes = attributes;\n      }\n\n      this._currentFragment.push(node);\n\n      if (isEmpty) {\n        return;\n      }\n\n      this._stack.push(this._currentFragment);\n\n      this._currentFragment = node.childNodes;\n    }\n\n    onEndElement(name) {\n      this._currentFragment = this._stack.pop() || [];\n      const lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n      if (!lastElement) {\n        return;\n      }\n\n      for (let i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n        lastElement.childNodes[i].parentNode = lastElement;\n      }\n    }\n\n    onError(code) {\n      this._errorCode = code;\n    }\n\n  }\n\n  exports.SimpleXMLParser = SimpleXMLParser;\n\n  /***/ }),\n  /* 16 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.OptionalContentConfig = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class OptionalContentGroup {\n    constructor(name, intent) {\n      this.visible = true;\n      this.name = name;\n      this.intent = intent;\n    }\n\n  }\n\n  class OptionalContentConfig {\n    constructor(data) {\n      this.name = null;\n      this.creator = null;\n      this._order = null;\n      this._groups = new Map();\n\n      if (data === null) {\n        return;\n      }\n\n      this.name = data.name;\n      this.creator = data.creator;\n      this._order = data.order;\n\n      for (const group of data.groups) {\n        this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n      }\n\n      if (data.baseState === \"OFF\") {\n        for (const group of this._groups) {\n          group.visible = false;\n        }\n      }\n\n      for (const on of data.on) {\n        this._groups.get(on).visible = true;\n      }\n\n      for (const off of data.off) {\n        this._groups.get(off).visible = false;\n      }\n    }\n\n    isVisible(group) {\n      if (group.type === \"OCG\") {\n        if (!this._groups.has(group.id)) {\n          (0, _util.warn)(`Optional content group not found: ${group.id}`);\n          return true;\n        }\n\n        return this._groups.get(group.id).visible;\n      } else if (group.type === \"OCMD\") {\n        if (group.expression) {\n          (0, _util.warn)(\"Visibility expression not supported yet.\");\n        }\n\n        if (!group.policy || group.policy === \"AnyOn\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (this._groups.get(id).visible) {\n              return true;\n            }\n          }\n\n          return false;\n        } else if (group.policy === \"AllOn\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (!this._groups.get(id).visible) {\n              return false;\n            }\n          }\n\n          return true;\n        } else if (group.policy === \"AnyOff\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (!this._groups.get(id).visible) {\n              return true;\n            }\n          }\n\n          return false;\n        } else if (group.policy === \"AllOff\") {\n          for (const id of group.ids) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return true;\n            }\n\n            if (this._groups.get(id).visible) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n        return true;\n      }\n\n      (0, _util.warn)(`Unknown group type ${group.type}.`);\n      return true;\n    }\n\n    setVisibility(id, visible = true) {\n      if (!this._groups.has(id)) {\n        (0, _util.warn)(`Optional content group not found: ${id}`);\n        return;\n      }\n\n      this._groups.get(id).visible = !!visible;\n    }\n\n    getOrder() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      if (this._order) {\n        return this._order.slice();\n      }\n\n      return Array.from(this._groups.keys());\n    }\n\n    getGroups() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._groups);\n    }\n\n    getGroup(id) {\n      return this._groups.get(id) || null;\n    }\n\n  }\n\n  exports.OptionalContentConfig = OptionalContentConfig;\n\n  /***/ }),\n  /* 17 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFDataTransportStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class PDFDataTransportStream {\n    constructor(params, pdfDataRangeTransport) {\n      (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n      this._queuedChunks = [];\n      this._progressiveDone = params.progressiveDone || false;\n      const initialData = params.initialData;\n\n      if (initialData && initialData.length > 0) { // lwf\n        const buffer = new Uint8Array(initialData).buffer;\n\n        this._queuedChunks.push(buffer);\n      }\n\n      this._pdfDataRangeTransport = pdfDataRangeTransport;\n      this._isStreamingSupported = !params.disableStream;\n      this._isRangeSupported = !params.disableRange;\n      this._contentLength = params.length;\n      this._fullRequestReader = null;\n      this._rangeReaders = [];\n\n      this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n        this._onReceiveData({\n          begin,\n          chunk\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n        this._onProgress({\n          loaded,\n          total\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n        this._onReceiveData({\n          chunk\n        });\n      });\n\n      this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n        this._onProgressiveDone();\n      });\n\n      this._pdfDataRangeTransport.transportReady();\n    }\n\n    _onReceiveData(args) {\n      const buffer = new Uint8Array(args.chunk).buffer;\n\n      if (args.begin === undefined) {\n        if (this._fullRequestReader) {\n          this._fullRequestReader._enqueue(buffer);\n        } else {\n          this._queuedChunks.push(buffer);\n        }\n      } else {\n        const found = this._rangeReaders.some(function (rangeReader) {\n          if (rangeReader._begin !== args.begin) {\n            return false;\n          }\n\n          rangeReader._enqueue(buffer);\n\n          return true;\n        });\n\n        (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n      }\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    _onProgress(evt) {\n      if (evt.total === undefined) {\n        const firstReader = this._rangeReaders[0];\n\n        if (firstReader && firstReader.onProgress) { // lwf\n          firstReader.onProgress({\n            loaded: evt.loaded\n          });\n        }\n      } else {\n        const fullReader = this._fullRequestReader;\n\n        if (fullReader && fullReader.onProgress) { // lwf\n          fullReader.onProgress({\n            loaded: evt.loaded,\n            total: evt.total\n          });\n        }\n      }\n    }\n\n    _onProgressiveDone() {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.progressiveDone();\n      }\n\n      this._progressiveDone = true;\n    }\n\n    _removeRangeReader(reader) {\n      const i = this._rangeReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeReaders.splice(i, 1);\n      }\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n      const queuedChunks = this._queuedChunks;\n      this._queuedChunks = null;\n      return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone);\n    }\n\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n      this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n      this._rangeReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeReaders.slice(0);\n\n      readers.forEach(function (rangeReader) {\n        rangeReader.cancel(reason);\n      });\n\n      this._pdfDataRangeTransport.abort();\n    }\n\n  }\n\n  exports.PDFDataTransportStream = PDFDataTransportStream;\n\n  class PDFDataTransportStreamReader {\n    constructor(stream, queuedChunks, progressiveDone = false) {\n      this._stream = stream;\n      this._done = progressiveDone || false;\n      this._filename = null;\n      this._queuedChunks = queuedChunks || [];\n      this._loaded = 0;\n\n      for (const chunk of this._queuedChunks) {\n        this._loaded += chunk.byteLength;\n      }\n\n      this._requests = [];\n      this._headersReady = Promise.resolve();\n      stream._fullRequestReader = this;\n      this.onProgress = null;\n    }\n\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunks.push(chunk);\n      }\n\n      this._loaded += chunk.byteLength;\n    }\n\n    get headersReady() {\n      return this._headersReady;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get isRangeSupported() {\n      return this._stream._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._stream._isStreamingSupported;\n    }\n\n    get contentLength() {\n      return this._stream._contentLength;\n    }\n\n    async read() {\n      if (this._queuedChunks.length > 0) {\n        const chunk = this._queuedChunks.shift();\n\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n\n    progressiveDone() {\n      if (this._done) {\n        return;\n      }\n\n      this._done = true;\n    }\n\n  }\n\n  class PDFDataTransportStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._begin = begin;\n      this._end = end;\n      this._queuedChunk = null;\n      this._requests = [];\n      this._done = false;\n      this.onProgress = null;\n    }\n\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length === 0) {\n        this._queuedChunk = chunk;\n      } else {\n        const requestsCapability = this._requests.shift();\n\n        requestsCapability.resolve({\n          value: chunk,\n          done: false\n        });\n\n        this._requests.forEach(function (requestCapability) {\n          requestCapability.resolve({\n            value: undefined,\n            done: true\n          });\n        });\n\n        this._requests = [];\n      }\n\n      this._done = true;\n\n      this._stream._removeRangeReader(this);\n    }\n\n    get isStreamingSupported() {\n      return false;\n    }\n\n    async read() {\n      if (this._queuedChunk) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._stream._removeRangeReader(this);\n    }\n\n  }\n\n  /***/ }),\n  /* 18 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.WebGLContext = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  class WebGLContext {\n    constructor({\n      enable = false\n    }) {\n      this._enabled = enable === true;\n    }\n\n    get isEnabled() {\n      let enabled = this._enabled;\n\n      if (enabled) {\n        enabled = WebGLUtils.tryInitGL();\n      }\n\n      return (0, _util.shadow)(this, \"isEnabled\", enabled);\n    }\n\n    composeSMask({\n      layer,\n      mask,\n      properties\n    }) {\n      return WebGLUtils.composeSMask(layer, mask, properties);\n    }\n\n    drawFigures({\n      width,\n      height,\n      backgroundColor,\n      figures,\n      context\n    }) {\n      return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);\n    }\n\n    clear() {\n      WebGLUtils.cleanup();\n    }\n\n  }\n\n  exports.WebGLContext = WebGLContext;\n\n  const WebGLUtils = function WebGLUtilsClosure() {\n    function loadShader(gl, code, shaderType) {\n      const shader = gl.createShader(shaderType);\n      gl.shaderSource(shader, code);\n      gl.compileShader(shader);\n      const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n      if (!compiled) {\n        const errorMsg = gl.getShaderInfoLog(shader);\n        throw new Error(\"Error during shader compilation: \" + errorMsg);\n      }\n\n      return shader;\n    }\n\n    function createVertexShader(gl, code) {\n      return loadShader(gl, code, gl.VERTEX_SHADER);\n    }\n\n    function createFragmentShader(gl, code) {\n      return loadShader(gl, code, gl.FRAGMENT_SHADER);\n    }\n\n    function createProgram(gl, shaders) {\n      const program = gl.createProgram();\n\n      for (let i = 0, ii = shaders.length; i < ii; ++i) {\n        gl.attachShader(program, shaders[i]);\n      }\n\n      gl.linkProgram(program);\n      const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n      if (!linked) {\n        const errorMsg = gl.getProgramInfoLog(program);\n        throw new Error(\"Error during program linking: \" + errorMsg);\n      }\n\n      return program;\n    }\n\n    function createTexture(gl, image, textureId) {\n      gl.activeTexture(textureId);\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      return texture;\n    }\n\n    let currentGL, currentCanvas;\n\n    function generateGL() {\n      if (currentGL) {\n        return;\n      }\n\n      currentCanvas = document.createElement(\"canvas\");\n      currentGL = currentCanvas.getContext(\"webgl\", {\n        premultipliedalpha: false\n      });\n    }\n\n    const smaskVertexShaderCode = \"\\\n    attribute vec2 a_position;                                    \\\n    attribute vec2 a_texCoord;                                    \\\n                                                                  \\\n    uniform vec2 u_resolution;                                    \\\n                                                                  \\\n    varying vec2 v_texCoord;                                      \\\n                                                                  \\\n    void main() {                                                 \\\n      vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                  \\\n      v_texCoord = a_texCoord;                                    \\\n    }                                                             \";\n    const smaskFragmentShaderCode = \"\\\n    precision mediump float;                                      \\\n                                                                  \\\n    uniform vec4 u_backdrop;                                      \\\n    uniform int u_subtype;                                        \\\n    uniform sampler2D u_image;                                    \\\n    uniform sampler2D u_mask;                                     \\\n                                                                  \\\n    varying vec2 v_texCoord;                                      \\\n                                                                  \\\n    void main() {                                                 \\\n      vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n      vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n      if (u_backdrop.a > 0.0) {                                   \\\n        maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                        u_backdrop.rgb * (1.0 - maskColor.a);     \\\n      }                                                           \\\n      float lum;                                                  \\\n      if (u_subtype == 0) {                                       \\\n        lum = maskColor.a;                                        \\\n      } else {                                                    \\\n        lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n              maskColor.b * 0.11;                                 \\\n      }                                                           \\\n      imageColor.a *= lum;                                        \\\n      imageColor.rgb *= imageColor.a;                             \\\n      gl_FragColor = imageColor;                                  \\\n    }                                                             \";\n    let smaskCache = null;\n\n    function initSmaskGL() {\n      generateGL();\n      const canvas = currentCanvas;\n      currentCanvas = null;\n      const gl = currentGL;\n      currentGL = null;\n      const vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n      const fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n      const program = createProgram(gl, [vertexShader, fragmentShader]);\n      gl.useProgram(program);\n      const cache = {};\n      cache.gl = gl;\n      cache.canvas = canvas;\n      cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n      cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n      cache.backdropLocation = gl.getUniformLocation(program, \"u_backdrop\");\n      cache.subtypeLocation = gl.getUniformLocation(program, \"u_subtype\");\n      const texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n      const texLayerLocation = gl.getUniformLocation(program, \"u_image\");\n      const texMaskLocation = gl.getUniformLocation(program, \"u_mask\");\n      const texCoordBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(texCoordLocation);\n      gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n      gl.uniform1i(texLayerLocation, 0);\n      gl.uniform1i(texMaskLocation, 1);\n      smaskCache = cache;\n    }\n\n    function composeSMask(layer, mask, properties) {\n      const width = layer.width,\n            height = layer.height;\n\n      if (!smaskCache) {\n        initSmaskGL();\n      }\n\n      const cache = smaskCache,\n            canvas = cache.canvas,\n            gl = cache.gl;\n      canvas.width = width;\n      canvas.height = height;\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n      gl.uniform2f(cache.resolutionLocation, width, height);\n\n      if (properties.backdrop) {\n        gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);\n      } else {\n        gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n      }\n\n      gl.uniform1i(cache.subtypeLocation, properties.subtype === \"Luminosity\" ? 1 : 0);\n      const texture = createTexture(gl, layer, gl.TEXTURE0);\n      const maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.positionLocation);\n      gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n      gl.clearColor(0, 0, 0, 0);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.flush();\n      gl.deleteTexture(texture);\n      gl.deleteTexture(maskTexture);\n      gl.deleteBuffer(buffer);\n      return canvas;\n    }\n\n    const figuresVertexShaderCode = \"\\\n    attribute vec2 a_position;                                    \\\n    attribute vec3 a_color;                                       \\\n                                                                  \\\n    uniform vec2 u_resolution;                                    \\\n    uniform vec2 u_scale;                                         \\\n    uniform vec2 u_offset;                                        \\\n                                                                  \\\n    varying vec4 v_color;                                         \\\n                                                                  \\\n    void main() {                                                 \\\n      vec2 position = (a_position + u_offset) * u_scale;          \\\n      vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                  \\\n      v_color = vec4(a_color / 255.0, 1.0);                       \\\n    }                                                             \";\n    const figuresFragmentShaderCode = \"\\\n    precision mediump float;                                      \\\n                                                                  \\\n    varying vec4 v_color;                                         \\\n                                                                  \\\n    void main() {                                                 \\\n      gl_FragColor = v_color;                                     \\\n    }                                                             \";\n    let figuresCache = null;\n\n    function initFiguresGL() {\n      generateGL();\n      const canvas = currentCanvas;\n      currentCanvas = null;\n      const gl = currentGL;\n      currentGL = null;\n      const vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n      const fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n      const program = createProgram(gl, [vertexShader, fragmentShader]);\n      gl.useProgram(program);\n      const cache = {};\n      cache.gl = gl;\n      cache.canvas = canvas;\n      cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n      cache.scaleLocation = gl.getUniformLocation(program, \"u_scale\");\n      cache.offsetLocation = gl.getUniformLocation(program, \"u_offset\");\n      cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n      cache.colorLocation = gl.getAttribLocation(program, \"a_color\");\n      figuresCache = cache;\n    }\n\n    function drawFigures(width, height, backgroundColor, figures, context) {\n      if (!figuresCache) {\n        initFiguresGL();\n      }\n\n      const cache = figuresCache,\n            canvas = cache.canvas,\n            gl = cache.gl;\n      canvas.width = width;\n      canvas.height = height;\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n      gl.uniform2f(cache.resolutionLocation, width, height);\n      let count = 0;\n\n      for (let i = 0, ii = figures.length; i < ii; i++) {\n        switch (figures[i].type) {\n          case \"lattice\":\n            const rows = figures[i].coords.length / figures[i].verticesPerRow | 0;\n            count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n            break;\n\n          case \"triangles\":\n            count += figures[i].coords.length;\n            break;\n        }\n      }\n\n      const coords = new Float32Array(count * 2);\n      const colors = new Uint8Array(count * 3);\n      const coordsMap = context.coords,\n            colorsMap = context.colors;\n      let pIndex = 0,\n          cIndex = 0;\n\n      for (let i = 0, ii = figures.length; i < ii; i++) {\n        const figure = figures[i],\n              ps = figure.coords,\n              cs = figure.colors;\n\n        switch (figure.type) {\n          case \"lattice\":\n            const cols = figure.verticesPerRow;\n            const rows = ps.length / cols | 0;\n\n            for (let row = 1; row < rows; row++) {\n              let offset = row * cols + 1;\n\n              for (let col = 1; col < cols; col++, offset++) {\n                coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n                coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n                coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n                coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n                coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n                coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n                colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n                colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n                colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n                colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n                colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n                colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n                colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n                colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n                colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n                coords[pIndex + 6] = coords[pIndex + 2];\n                coords[pIndex + 7] = coords[pIndex + 3];\n                coords[pIndex + 8] = coords[pIndex + 4];\n                coords[pIndex + 9] = coords[pIndex + 5];\n                coords[pIndex + 10] = coordsMap[ps[offset]];\n                coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n                colors[cIndex + 9] = colors[cIndex + 3];\n                colors[cIndex + 10] = colors[cIndex + 4];\n                colors[cIndex + 11] = colors[cIndex + 5];\n                colors[cIndex + 12] = colors[cIndex + 6];\n                colors[cIndex + 13] = colors[cIndex + 7];\n                colors[cIndex + 14] = colors[cIndex + 8];\n                colors[cIndex + 15] = colorsMap[cs[offset]];\n                colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n                colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n                pIndex += 12;\n                cIndex += 18;\n              }\n            }\n\n            break;\n\n          case \"triangles\":\n            for (let j = 0, jj = ps.length; j < jj; j++) {\n              coords[pIndex] = coordsMap[ps[j]];\n              coords[pIndex + 1] = coordsMap[ps[j] + 1];\n              colors[cIndex] = colorsMap[cs[j]];\n              colors[cIndex + 1] = colorsMap[cs[j] + 1];\n              colors[cIndex + 2] = colorsMap[cs[j] + 2];\n              pIndex += 2;\n              cIndex += 3;\n            }\n\n            break;\n        }\n      }\n\n      if (backgroundColor) {\n        gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);\n      } else {\n        gl.clearColor(0, 0, 0, 0);\n      }\n\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      const coordsBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.positionLocation);\n      gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n      const colorsBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n      gl.enableVertexAttribArray(cache.colorLocation);\n      gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);\n      gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n      gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n      gl.drawArrays(gl.TRIANGLES, 0, count);\n      gl.flush();\n      gl.deleteBuffer(coordsBuffer);\n      gl.deleteBuffer(colorsBuffer);\n      return canvas;\n    }\n\n    return {\n      tryInitGL() {\n        try {\n          generateGL();\n          return !!currentGL;\n        } catch (ex) {}\n\n        return false;\n      },\n\n      composeSMask,\n      drawFigures,\n\n      cleanup() {\n        if (smaskCache && smaskCache.canvas) { // lwf\n          smaskCache.canvas.width = 0;\n          smaskCache.canvas.height = 0;\n        }\n\n        if (figuresCache && figuresCache.canvas) { // lwf\n          figuresCache.canvas.width = 0;\n          figuresCache.canvas.height = 0;\n        }\n\n        smaskCache = null;\n        figuresCache = null;\n      }\n\n    };\n  }();\n\n  /***/ }),\n  /* 19 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.AnnotationLayer = void 0;\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _annotation_storage = __w_pdfjs_require__(8);\n\n  var _scripting_utils = __w_pdfjs_require__(20);\n\n  class AnnotationElementFactory {\n    static create(parameters) {\n      const subtype = parameters.data.annotationType;\n\n      switch (subtype) {\n        case _util.AnnotationType.LINK:\n          return new LinkAnnotationElement(parameters);\n\n        case _util.AnnotationType.TEXT:\n          return new TextAnnotationElement(parameters);\n\n        case _util.AnnotationType.WIDGET:\n          const fieldType = parameters.data.fieldType;\n\n          switch (fieldType) {\n            case \"Tx\":\n              return new TextWidgetAnnotationElement(parameters);\n\n            case \"Btn\":\n              if (parameters.data.radioButton) {\n                return new RadioButtonWidgetAnnotationElement(parameters);\n              } else if (parameters.data.checkBox) {\n                return new CheckboxWidgetAnnotationElement(parameters);\n              }\n\n              return new PushButtonWidgetAnnotationElement(parameters);\n\n            case \"Ch\":\n              return new ChoiceWidgetAnnotationElement(parameters);\n          }\n\n          return new WidgetAnnotationElement(parameters);\n\n        case _util.AnnotationType.POPUP:\n          return new PopupAnnotationElement(parameters);\n\n        case _util.AnnotationType.FREETEXT:\n          return new FreeTextAnnotationElement(parameters);\n\n        case _util.AnnotationType.LINE:\n          return new LineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUARE:\n          return new SquareAnnotationElement(parameters);\n\n        case _util.AnnotationType.CIRCLE:\n          return new CircleAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYLINE:\n          return new PolylineAnnotationElement(parameters);\n\n        case _util.AnnotationType.CARET:\n          return new CaretAnnotationElement(parameters);\n\n        case _util.AnnotationType.INK:\n          return new InkAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYGON:\n          return new PolygonAnnotationElement(parameters);\n\n        case _util.AnnotationType.HIGHLIGHT:\n          return new HighlightAnnotationElement(parameters);\n\n        case _util.AnnotationType.UNDERLINE:\n          return new UnderlineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUIGGLY:\n          return new SquigglyAnnotationElement(parameters);\n\n        case _util.AnnotationType.STRIKEOUT:\n          return new StrikeOutAnnotationElement(parameters);\n\n        case _util.AnnotationType.STAMP:\n          return new StampAnnotationElement(parameters);\n\n        case _util.AnnotationType.FILEATTACHMENT:\n          return new FileAttachmentAnnotationElement(parameters);\n\n        default:\n          return new AnnotationElement(parameters);\n      }\n    }\n\n  }\n\n  class AnnotationElement {\n    constructor(parameters, {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false\n    } = {}) {\n      this.isRenderable = isRenderable;\n      this.data = parameters.data;\n      this.layer = parameters.layer;\n      this.page = parameters.page;\n      this.viewport = parameters.viewport;\n      this.linkService = parameters.linkService;\n      this.downloadManager = parameters.downloadManager;\n      this.imageResourcesPath = parameters.imageResourcesPath;\n      this.renderInteractiveForms = parameters.renderInteractiveForms;\n      this.svgFactory = parameters.svgFactory;\n      this.annotationStorage = parameters.annotationStorage;\n      this.enableScripting = parameters.enableScripting;\n      this.hasJSActions = parameters.hasJSActions;\n      this._mouseState = parameters.mouseState;\n\n      if (isRenderable) {\n        this.container = this._createContainer(ignoreBorder);\n      }\n\n      if (createQuadrilaterals) {\n        this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n      }\n    }\n\n    _createContainer(ignoreBorder = false) {\n      const data = this.data,\n            page = this.page,\n            viewport = this.viewport;\n      const container = document.createElement(\"section\");\n      let width = data.rect[2] - data.rect[0];\n      let height = data.rect[3] - data.rect[1];\n      container.setAttribute(\"data-annotation-id\", data.id);\n\n      const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n      container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n      container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n      if (!ignoreBorder && data.borderStyle.width > 0) {\n        container.style.borderWidth = `${data.borderStyle.width}px`;\n\n        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n          width = width - 2 * data.borderStyle.width;\n          height = height - 2 * data.borderStyle.width;\n        }\n\n        const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n        const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n        if (horizontalRadius > 0 || verticalRadius > 0) {\n          const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n          container.style.borderRadius = radius;\n        }\n\n        switch (data.borderStyle.style) {\n          case _util.AnnotationBorderStyleType.SOLID:\n            container.style.borderStyle = \"solid\";\n            break;\n\n          case _util.AnnotationBorderStyleType.DASHED:\n            container.style.borderStyle = \"dashed\";\n            break;\n\n          case _util.AnnotationBorderStyleType.BEVELED:\n            (0, _util.warn)(\"Unimplemented border style: beveled\");\n            break;\n\n          case _util.AnnotationBorderStyleType.INSET:\n            (0, _util.warn)(\"Unimplemented border style: inset\");\n            break;\n\n          case _util.AnnotationBorderStyleType.UNDERLINE:\n            container.style.borderBottomStyle = \"solid\";\n            break;\n\n          default:\n            break;\n        }\n\n        if (data.color) {\n          container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n        } else {\n          container.style.borderWidth = 0;\n        }\n      }\n\n      container.style.left = `${rect[0]}px`;\n      container.style.top = `${rect[1]}px`;\n      container.style.width = `${width}px`;\n      container.style.height = `${height}px`;\n      return container;\n    }\n\n    _createQuadrilaterals(ignoreBorder = false) {\n      if (!this.data.quadPoints) {\n        return null;\n      }\n\n      const quadrilaterals = [];\n      const savedRect = this.data.rect;\n\n      for (const quadPoint of this.data.quadPoints) {\n        this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n        quadrilaterals.push(this._createContainer(ignoreBorder));\n      }\n\n      this.data.rect = savedRect;\n      return quadrilaterals;\n    }\n\n    _createPopup(trigger, data) {\n      let container = this.container;\n\n      if (this.quadrilaterals) {\n        trigger = trigger || this.quadrilaterals;\n        container = this.quadrilaterals[0];\n      }\n\n      if (!trigger) {\n        trigger = document.createElement(\"div\");\n        trigger.style.height = container.style.height;\n        trigger.style.width = container.style.width;\n        container.appendChild(trigger);\n      }\n\n      const popupElement = new PopupElement({\n        container,\n        trigger,\n        color: data.color,\n        title: data.title,\n        modificationDate: data.modificationDate,\n        contents: data.contents,\n        hideWrapper: true\n      });\n      const popup = popupElement.render();\n      popup.style.left = container.style.width;\n      container.appendChild(popup);\n    }\n\n    _renderQuadrilaterals(className) {\n      this.quadrilaterals.forEach(quadrilateral => {\n        quadrilateral.className = className;\n      });\n      return this.quadrilaterals;\n    }\n\n    render() {\n      (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n    }\n\n  }\n\n  class LinkAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n      super(parameters, {\n        isRenderable,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      const {\n        data,\n        linkService\n      } = this;\n      const link = document.createElement(\"a\");\n\n      if (data.url) {\n        (0, _display_utils.addLinkAttributes)(link, {\n          url: data.url,\n          target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n          rel: linkService.externalLinkRel,\n          enabled: linkService.externalLinkEnabled\n        });\n      } else if (data.action) {\n        this._bindNamedAction(link, data.action);\n      } else if (data.dest) {\n        this._bindLink(link, data.dest);\n      } else if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n        this._bindJSAction(link, data);\n      } else {\n        this._bindLink(link, \"\");\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        });\n      }\n\n      this.container.className = \"linkAnnotation\";\n      this.container.appendChild(link);\n      return this.container;\n    }\n\n    _bindLink(link, destination) {\n      link.href = this.linkService.getDestinationHash(destination);\n\n      link.onclick = () => {\n        if (destination) {\n          this.linkService.goToDestination(destination);\n        }\n\n        return false;\n      };\n\n      if (destination || destination === \"\") {\n        link.className = \"internalLink\";\n      }\n    }\n\n    _bindNamedAction(link, action) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n\n      link.onclick = () => {\n        this.linkService.executeNamedAction(action);\n        return false;\n      };\n\n      link.className = \"internalLink\";\n    }\n\n    _bindJSAction(link, data) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n      for (const name of Object.keys(data.actions)) {\n        const jsName = map.get(name);\n\n        if (!jsName) {\n          continue;\n        }\n\n        link[jsName] = () => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: data.id,\n              name\n            }\n          });\n          return false;\n        };\n      }\n\n      link.className = \"internalLink\";\n    }\n\n  }\n\n  class TextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      this.container.className = \"textAnnotation\";\n      const image = document.createElement(\"img\");\n      image.style.height = this.container.style.height;\n      image.style.width = this.container.style.width;\n      image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n      image.alt = \"[{{type}} Annotation]\";\n      image.dataset.l10nId = \"text_annotation_type\";\n      image.dataset.l10nArgs = JSON.stringify({\n        type: this.data.name\n      });\n\n      if (!this.data.hasPopup) {\n        this._createPopup(image, this.data);\n      }\n\n      this.container.appendChild(image);\n      return this.container;\n    }\n\n  }\n\n  class WidgetAnnotationElement extends AnnotationElement {\n    render() {\n      if (this.data.alternativeText) {\n        this.container.title = this.data.alternativeText;\n      }\n\n      return this.container;\n    }\n\n    _getKeyModifier(event) {\n      return navigator.platform.includes(\"Win\") && event.ctrlKey || navigator.platform.includes(\"Mac\") && event.metaKey;\n    }\n\n    _setEventListener(element, baseName, eventName, valueGetter) {\n      if (baseName.includes(\"mouse\")) {\n        element.addEventListener(baseName, event => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: valueGetter(event),\n              shift: event.shiftKey,\n              modifier: this._getKeyModifier(event)\n            }\n          });\n        });\n      } else {\n        element.addEventListener(baseName, event => {\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: event.target.checked\n            }\n          });\n        });\n      }\n    }\n\n    _setEventListeners(element, names, getter) {\n      for (const [baseName, eventName] of names) {\n        if (eventName === \"Action\" || this.data.actions && this.data.actions[eventName]) { // lwf\n          this._setEventListener(element, baseName, eventName, getter);\n        }\n      }\n    }\n\n  }\n\n  class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      const isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      this.container.className = \"textWidgetAnnotation\";\n      let element = null;\n\n      if (this.renderInteractiveForms) {\n        const textContent = storage.getOrCreateValue(id, {\n          value: this.data.fieldValue\n        }).value;\n        const elementData = {\n          userValue: null,\n          formattedValue: null,\n          beforeInputSelectionRange: null,\n          beforeInputValue: null\n        };\n\n        if (this.data.multiLine) {\n          element = document.createElement(\"textarea\");\n          element.textContent = textContent;\n        } else {\n          element = document.createElement(\"input\");\n          element.type = \"text\";\n          element.setAttribute(\"value\", textContent);\n        }\n\n        elementData.userValue = textContent;\n        element.setAttribute(\"id\", id);\n        element.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: event.target.value\n          });\n        });\n\n        let blurListener = event => {\n          if (elementData.formattedValue) {\n            event.target.value = elementData.formattedValue;\n          }\n\n          event.target.setSelectionRange(0, 0);\n          elementData.beforeInputSelectionRange = null;\n        };\n\n        if (this.enableScripting && this.hasJSActions) {\n          element.addEventListener(\"focus\", event => {\n            if (elementData.userValue) {\n              event.target.value = elementData.userValue;\n            }\n          });\n          element.addEventListener(\"updatefromsandbox\", function (event) {\n            const {\n              detail\n            } = event;\n            const actions = {\n              value() {\n                elementData.userValue = detail.value || \"\";\n                storage.setValue(id, {\n                  value: elementData.userValue.toString()\n                });\n\n                if (!elementData.formattedValue) {\n                  event.target.value = elementData.userValue;\n                }\n              },\n\n              valueAsString() {\n                elementData.formattedValue = detail.valueAsString || \"\";\n\n                if (event.target !== document.activeElement) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                storage.setValue(id, {\n                  formattedValue: elementData.formattedValue\n                });\n              },\n\n              focus() {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n\n              userName() {\n                event.target.title = detail.userName;\n              },\n\n              hidden() {\n                event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                storage.setValue(id, {\n                  hidden: detail.hidden\n                });\n              },\n\n              editable() {\n                event.target.disabled = !detail.editable;\n              },\n\n              selRange() {\n                const [selStart, selEnd] = detail.selRange;\n\n                if (selStart >= 0 && selEnd < event.target.value.length) {\n                  event.target.setSelectionRange(selStart, selEnd);\n                }\n              },\n\n              strokeColor() {\n                const color = detail.strokeColor;\n                event.target.style.color = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n              }\n\n            };\n            Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n          });\n\n          if (this.data.actions) {\n            element.addEventListener(\"keydown\", event => {\n              elementData.beforeInputValue = event.target.value;\n              let commitKey = -1;\n\n              if (event.key === \"Escape\") {\n                commitKey = 0;\n              } else if (event.key === \"Enter\") {\n                commitKey = 2;\n              } else if (event.key === \"Tab\") {\n                commitKey = 3;\n              }\n\n              if (commitKey === -1) {\n                return;\n              }\n\n              elementData.userValue = event.target.value;\n              this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value: event.target.value,\n                  willCommit: true,\n                  commitKey,\n                  selStart: event.target.selectionStart,\n                  selEnd: event.target.selectionEnd\n                }\n              });\n            });\n            const _blurListener = blurListener;\n            blurListener = null;\n            element.addEventListener(\"blur\", event => {\n              if (this._mouseState.isDown) {\n                elementData.userValue = event.target.value;\n                this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value: event.target.value,\n                    willCommit: true,\n                    commitKey: 1,\n                    selStart: event.target.selectionStart,\n                    selEnd: event.target.selectionEnd\n                  }\n                });\n              }\n\n              _blurListener(event);\n            });\n            element.addEventListener(\"mousedown\", event => {\n              elementData.beforeInputValue = event.target.value;\n              elementData.beforeInputSelectionRange = null;\n            });\n            element.addEventListener(\"keyup\", event => {\n              if (event.target.selectionStart === event.target.selectionEnd) {\n                elementData.beforeInputSelectionRange = null;\n              }\n            });\n            element.addEventListener(\"select\", event => {\n              elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n            });\n\n            if (\"Keystroke\" in this.data.actions) {\n              element.addEventListener(\"input\", event => {\n                let selStart = -1;\n                let selEnd = -1;\n\n                if (elementData.beforeInputSelectionRange) {\n                  [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                }\n\n                this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { // lwf\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value: elementData.beforeInputValue,\n                    change: event.data,\n                    willCommit: false,\n                    selStart,\n                    selEnd\n                  }\n                });\n              });\n            }\n\n            this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n          }\n        }\n\n        if (blurListener) {\n          element.addEventListener(\"blur\", blurListener);\n        }\n\n        element.disabled = this.data.readOnly;\n        element.name = this.data.fieldName;\n\n        if (this.data.maxLen !== null) {\n          element.maxLength = this.data.maxLen;\n        }\n\n        if (this.data.comb) {\n          const fieldWidth = this.data.rect[2] - this.data.rect[0];\n          const combWidth = fieldWidth / this.data.maxLen;\n          element.classList.add(\"comb\");\n          element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n        }\n      } else {\n        element = document.createElement(\"div\");\n        element.textContent = this.data.fieldValue;\n        element.style.verticalAlign = \"middle\";\n        element.style.display = \"table-cell\";\n      }\n\n      this._setTextStyle(element);\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n    _setTextStyle(element) {\n      const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n      const {\n        fontSize,\n        fontColor\n      } = this.data.defaultAppearanceData;\n      const style = element.style;\n\n      if (fontSize) {\n        style.fontSize = `${fontSize}px`;\n      }\n\n      style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n      if (this.data.textAlignment !== null) {\n        style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n      }\n    }\n\n  }\n\n  class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      const value = storage.getOrCreateValue(id, {\n        value: data.fieldValue && data.fieldValue !== \"Off\"\n      }).value;\n      this.container.className = \"buttonWidgetAnnotation checkBox\";\n      const element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"checkbox\";\n      element.name = this.data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        const name = event.target.name;\n\n        for (const checkbox of document.getElementsByName(name)) {\n          if (checkbox !== event.target) {\n            checkbox.checked = false;\n            storage.setValue(checkbox.parentNode.getAttribute(\"data-annotation-id\"), {\n              value: false\n            });\n          }\n        }\n\n        storage.setValue(id, {\n          value: event.target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              event.target.checked = detail.value !== \"Off\";\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n  }\n\n  class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      this.container.className = \"buttonWidgetAnnotation radioButton\";\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      const value = storage.getOrCreateValue(id, {\n        value: data.fieldValue === data.buttonValue\n      }).value;\n      const element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"radio\";\n      element.name = data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"pdfButtonValue\", data.buttonValue);\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        const {\n          target\n        } = event;\n\n        for (const radio of document.getElementsByName(target.name)) {\n          if (radio !== target) {\n            storage.setValue(radio.getAttribute(\"id\"), {\n              value: false\n            });\n          }\n        }\n\n        storage.setValue(id, {\n          value: target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              const fieldValue = detail.value;\n\n              for (const radio of document.getElementsByName(event.target.name)) {\n                const radioId = radio.getAttribute(\"id\");\n\n                if (fieldValue === radio.getAttribute(\"pdfButtonValue\")) {\n                  radio.setAttribute(\"checked\", true);\n                  storage.setValue(radioId, {\n                    value: true\n                  });\n                } else {\n                  storage.setValue(radioId, {\n                    value: false\n                  });\n                }\n              }\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n\n  }\n\n  class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n    render() {\n      const container = super.render();\n      container.className = \"buttonWidgetAnnotation pushButton\";\n\n      if (this.data.alternativeText) {\n        container.title = this.data.alternativeText;\n      }\n\n      return container;\n    }\n\n  }\n\n  class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderInteractiveForms\n      });\n    }\n\n    render() {\n      this.container.className = \"choiceWidgetAnnotation\";\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      storage.getOrCreateValue(id, {\n        value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n      });\n      const selectElement = document.createElement(\"select\");\n      selectElement.disabled = this.data.readOnly;\n      selectElement.name = this.data.fieldName;\n      selectElement.setAttribute(\"id\", id);\n\n      if (!this.data.combo) {\n        selectElement.size = this.data.options.length;\n\n        if (this.data.multiSelect) {\n          selectElement.multiple = true;\n        }\n      }\n\n      for (const option of this.data.options) {\n        const optionElement = document.createElement(\"option\");\n        optionElement.textContent = option.displayValue;\n        optionElement.value = option.exportValue;\n\n        if (this.data.fieldValue.includes(option.exportValue)) {\n          optionElement.setAttribute(\"selected\", true);\n        }\n\n        selectElement.appendChild(optionElement);\n      }\n\n      function getValue(event) {\n        const options = event.target.options;\n        return options[options.selectedIndex].value;\n      }\n\n      if (this.enableScripting && this.hasJSActions) {\n        selectElement.addEventListener(\"updatefromsandbox\", event => {\n          const {\n            detail\n          } = event;\n          const actions = {\n            value() {\n              const options = event.target.options;\n              const value = detail.value;\n              const i = options.indexOf(value);\n\n              if (i !== -1) {\n                options.selectedIndex = i;\n                storage.setValue(id, {\n                  value\n                });\n              }\n            },\n\n            focus() {\n              setTimeout(() => event.target.focus({\n                preventScroll: false\n              }), 0);\n            },\n\n            hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n\n            editable() {\n              event.target.disabled = !detail.editable;\n            }\n\n          };\n          Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n        });\n        selectElement.addEventListener(\"input\", event => {\n          const value = getValue(event);\n          storage.setValue(id, {\n            value\n          });\n          this.linkService.eventBus && this.linkService.eventBus.dispatch(\"dispatcheventinsandbox\", { //lwf\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              changeEx: value,\n              willCommit: true,\n              commitKey: 1,\n              keyDown: false\n            }\n          });\n        });\n\n        this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      } else {\n        selectElement.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: getValue(event)\n          });\n        });\n      }\n\n      this.container.appendChild(selectElement);\n      return this.container;\n    }\n\n  }\n\n  class PopupAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable\n      });\n    }\n\n    render() {\n      const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n      this.container.className = \"popupAnnotation\";\n\n      if (IGNORE_TYPES.includes(this.data.parentType)) {\n        return this.container;\n      }\n\n      const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n      const parentElements = this.layer.querySelectorAll(selector);\n\n      if (parentElements.length === 0) {\n        return this.container;\n      }\n\n      const popup = new PopupElement({\n        container: this.container,\n        trigger: Array.from(parentElements),\n        color: this.data.color,\n        title: this.data.title,\n        modificationDate: this.data.modificationDate,\n        contents: this.data.contents\n      });\n      const page = this.page;\n\n      const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n      const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n      const popupTop = rect[1];\n      this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n      this.container.style.left = `${popupLeft}px`;\n      this.container.style.top = `${popupTop}px`;\n      this.container.appendChild(popup.render());\n      return this.container;\n    }\n\n  }\n\n  class PopupElement {\n    constructor(parameters) {\n      this.container = parameters.container;\n      this.trigger = parameters.trigger;\n      this.color = parameters.color;\n      this.title = parameters.title;\n      this.modificationDate = parameters.modificationDate;\n      this.contents = parameters.contents;\n      this.hideWrapper = parameters.hideWrapper || false;\n      this.pinned = false;\n    }\n\n    render() {\n      const BACKGROUND_ENLIGHT = 0.7;\n      const wrapper = document.createElement(\"div\");\n      wrapper.className = \"popupWrapper\";\n      this.hideElement = this.hideWrapper ? wrapper : this.container;\n      this.hideElement.setAttribute(\"hidden\", true);\n      const popup = document.createElement(\"div\");\n      popup.className = \"popup\";\n      const color = this.color;\n\n      if (color) {\n        const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n        const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n        const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n        popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n      }\n\n      const title = document.createElement(\"h1\");\n      title.textContent = this.title;\n      popup.appendChild(title);\n\n      const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n      if (dateObject) {\n        const modificationDate = document.createElement(\"span\");\n        modificationDate.textContent = \"{{date}}, {{time}}\";\n        modificationDate.dataset.l10nId = \"annotation_date_string\";\n        modificationDate.dataset.l10nArgs = JSON.stringify({\n          date: dateObject.toLocaleDateString(),\n          time: dateObject.toLocaleTimeString()\n        });\n        popup.appendChild(modificationDate);\n      }\n\n      const contents = this._formatContents(this.contents);\n\n      popup.appendChild(contents);\n\n      if (!Array.isArray(this.trigger)) {\n        this.trigger = [this.trigger];\n      }\n\n      this.trigger.forEach(element => {\n        element.addEventListener(\"click\", this._toggle.bind(this));\n        element.addEventListener(\"mouseover\", this._show.bind(this, false));\n        element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n      });\n      popup.addEventListener(\"click\", this._hide.bind(this, true));\n      wrapper.appendChild(popup);\n      return wrapper;\n    }\n\n    _formatContents(contents) {\n      const p = document.createElement(\"p\");\n      const lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n      for (let i = 0, ii = lines.length; i < ii; ++i) {\n        const line = lines[i];\n        p.appendChild(document.createTextNode(line));\n\n        if (i < ii - 1) {\n          p.appendChild(document.createElement(\"br\"));\n        }\n      }\n\n      return p;\n    }\n\n    _toggle() {\n      if (this.pinned) {\n        this._hide(true);\n      } else {\n        this._show(true);\n      }\n    }\n\n    _show(pin = false) {\n      if (pin) {\n        this.pinned = true;\n      }\n\n      if (this.hideElement.hasAttribute(\"hidden\")) {\n        this.hideElement.removeAttribute(\"hidden\");\n        this.container.style.zIndex += 1;\n      }\n    }\n\n    _hide(unpin = true) {\n      if (unpin) {\n        this.pinned = false;\n      }\n\n      if (!this.hideElement.hasAttribute(\"hidden\") && !this.pinned) {\n        this.hideElement.setAttribute(\"hidden\", true);\n        this.container.style.zIndex -= 1;\n      }\n    }\n\n  }\n\n  class FreeTextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"freeTextAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class LineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"lineAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const line = this.svgFactory.createElement(\"svg:line\");\n      line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n      line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n      line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n      line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n      line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      line.setAttribute(\"stroke\", \"transparent\");\n      svg.appendChild(line);\n      this.container.append(svg);\n\n      this._createPopup(line, data);\n\n      return this.container;\n    }\n\n  }\n\n  class SquareAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"squareAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const borderWidth = data.borderStyle.width;\n      const square = this.svgFactory.createElement(\"svg:rect\");\n      square.setAttribute(\"x\", borderWidth / 2);\n      square.setAttribute(\"y\", borderWidth / 2);\n      square.setAttribute(\"width\", width - borderWidth);\n      square.setAttribute(\"height\", height - borderWidth);\n      square.setAttribute(\"stroke-width\", borderWidth || 1);\n      square.setAttribute(\"stroke\", \"transparent\");\n      square.setAttribute(\"fill\", \"none\");\n      svg.appendChild(square);\n      this.container.append(svg);\n\n      this._createPopup(square, data);\n\n      return this.container;\n    }\n\n  }\n\n  class CircleAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"circleAnnotation\";\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      const borderWidth = data.borderStyle.width;\n      const circle = this.svgFactory.createElement(\"svg:ellipse\");\n      circle.setAttribute(\"cx\", width / 2);\n      circle.setAttribute(\"cy\", height / 2);\n      circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n      circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n      circle.setAttribute(\"stroke-width\", borderWidth || 1);\n      circle.setAttribute(\"stroke\", \"transparent\");\n      circle.setAttribute(\"fill\", \"none\");\n      svg.appendChild(circle);\n      this.container.append(svg);\n\n      this._createPopup(circle, data);\n\n      return this.container;\n    }\n\n  }\n\n  class PolylineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"polylineAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n    }\n\n    render() {\n      this.container.className = this.containerClassName;\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n      let points = [];\n\n      for (const coordinate of data.vertices) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(x + \",\" + y);\n      }\n\n      points = points.join(\" \");\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n      svg.appendChild(polyline);\n      this.container.append(svg);\n\n      this._createPopup(polyline, data);\n\n      return this.container;\n    }\n\n  }\n\n  class PolygonAnnotationElement extends PolylineAnnotationElement {\n    constructor(parameters) {\n      super(parameters);\n      this.containerClassName = \"polygonAnnotation\";\n      this.svgElementName = \"svg:polygon\";\n    }\n\n  }\n\n  class CaretAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"caretAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class InkAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"inkAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n    }\n\n    render() {\n      this.container.className = this.containerClassName;\n      const data = this.data;\n      const width = data.rect[2] - data.rect[0];\n      const height = data.rect[3] - data.rect[1];\n      const svg = this.svgFactory.create(width, height);\n\n      for (const inkList of data.inkLists) {\n        let points = [];\n\n        for (const coordinate of inkList) {\n          const x = coordinate.x - data.rect[0];\n          const y = data.rect[3] - coordinate.y;\n          points.push(`${x},${y}`);\n        }\n\n        points = points.join(\" \");\n        const polyline = this.svgFactory.createElement(this.svgElementName);\n        polyline.setAttribute(\"points\", points);\n        polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n        polyline.setAttribute(\"stroke\", \"transparent\");\n        polyline.setAttribute(\"fill\", \"none\");\n\n        this._createPopup(polyline, data);\n\n        svg.appendChild(polyline);\n      }\n\n      this.container.append(svg);\n      return this.container;\n    }\n\n  }\n\n  class HighlightAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"highlightAnnotation\");\n      }\n\n      this.container.className = \"highlightAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class UnderlineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"underlineAnnotation\");\n      }\n\n      this.container.className = \"underlineAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class SquigglyAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"squigglyAnnotation\");\n      }\n\n      this.container.className = \"squigglyAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class StrikeOutAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n\n    render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n      }\n\n      this.container.className = \"strikeoutAnnotation\";\n      return this.container;\n    }\n\n  }\n\n  class StampAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n      super(parameters, {\n        isRenderable,\n        ignoreBorder: true\n      });\n    }\n\n    render() {\n      this.container.className = \"stampAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n\n  }\n\n  class FileAttachmentAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true\n      });\n      const {\n        filename,\n        content\n      } = this.data.file;\n      this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n      this.content = content;\n      this.linkService.eventBus && this.linkService.eventBus.dispatch(\"fileattachmentannotation\", { // lwf\n        source: this,\n        id: (0, _util.stringToPDFString)(filename),\n        filename,\n        content\n      });\n    }\n\n    render() {\n      this.container.className = \"fileAttachmentAnnotation\";\n      const trigger = document.createElement(\"div\");\n      trigger.style.height = this.container.style.height;\n      trigger.style.width = this.container.style.width;\n      trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n      if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n        this._createPopup(trigger, this.data);\n      }\n\n      this.container.appendChild(trigger);\n      return this.container;\n    }\n\n    _download() {\n      if (!this.downloadManager) {\n        (0, _util.warn)(\"Download cannot be started due to unavailable download manager\");\n        return;\n      }\n\n      this.downloadManager.downloadData(this.content, this.filename, \"\");\n    }\n\n  }\n\n  class AnnotationLayer {\n    static render(parameters) {\n      const sortedAnnotations = [],\n            popupAnnotations = [];\n\n      for (const data of parameters.annotations) {\n        if (!data) {\n          continue;\n        }\n\n        if (data.annotationType === _util.AnnotationType.POPUP) {\n          popupAnnotations.push(data);\n          continue;\n        }\n\n        sortedAnnotations.push(data);\n      }\n\n      if (popupAnnotations.length) {\n        sortedAnnotations.push(...popupAnnotations);\n      }\n\n      for (const data of sortedAnnotations) {\n        const element = AnnotationElementFactory.create({\n          data,\n          layer: parameters.div,\n          page: parameters.page,\n          viewport: parameters.viewport,\n          linkService: parameters.linkService,\n          downloadManager: parameters.downloadManager,\n          imageResourcesPath: parameters.imageResourcesPath || \"\",\n          renderInteractiveForms: typeof parameters.renderInteractiveForms === \"boolean\" ? parameters.renderInteractiveForms : true,\n          svgFactory: new _display_utils.DOMSVGFactory(),\n          annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n          enableScripting: parameters.enableScripting,\n          hasJSActions: parameters.hasJSActions,\n          mouseState: parameters.mouseState || {\n            isDown: false\n          }\n        });\n\n        if (element.isRenderable) {\n          const rendered = element.render();\n\n          if (data.hidden) {\n            rendered.style.visibility = \"hidden\";\n          }\n\n          if (Array.isArray(rendered)) {\n            for (const renderedElement of rendered) {\n              parameters.div.appendChild(renderedElement);\n            }\n          } else {\n            if (element instanceof PopupAnnotationElement) {\n              parameters.div.prepend(rendered);\n            } else {\n              parameters.div.appendChild(rendered);\n            }\n          }\n        }\n      }\n    }\n\n    static update(parameters) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n      for (const data of parameters.annotations) {\n        const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n        if (elements) {\n          elements.forEach(element => {\n            element.style.transform = transform;\n          });\n        }\n      }\n\n      parameters.div.removeAttribute(\"hidden\");\n    }\n\n  }\n\n  exports.AnnotationLayer = AnnotationLayer;\n\n  /***/ }),\n  /* 20 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.ColorConverters = void 0;\n\n  function makeColorComp(n) {\n    return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n  }\n\n  class ColorConverters {\n    static CMYK_G([c, y, m, k]) {\n      return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n    }\n\n    static G_CMYK([g]) {\n      return [\"CMYK\", 0, 0, 0, 1 - g];\n    }\n\n    static G_RGB([g]) {\n      return [\"RGB\", g, g, g];\n    }\n\n    static G_HTML([g]) {\n      const G = makeColorComp(g);\n      return `#${G}${G}${G}`;\n    }\n\n    static RGB_G([r, g, b]) {\n      return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n    }\n\n    static RGB_HTML([r, g, b]) {\n      const R = makeColorComp(r);\n      const G = makeColorComp(g);\n      const B = makeColorComp(b);\n      return `#${R}${G}${B}`;\n    }\n\n    static T_HTML() {\n      return \"#00000000\";\n    }\n\n    static CMYK_RGB([c, y, m, k]) {\n      return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n    }\n\n    static CMYK_HTML(components) {\n      return this.RGB_HTML(this.CMYK_RGB(components));\n    }\n\n    static RGB_CMYK([r, g, b]) {\n      const c = 1 - r;\n      const m = 1 - g;\n      const y = 1 - b;\n      const k = Math.min(c, m, y);\n      return [\"CMYK\", c, m, y, k];\n    }\n\n  }\n\n  exports.ColorConverters = ColorConverters;\n\n  /***/ }),\n  /* 21 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.renderTextLayer = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  const renderTextLayer = function renderTextLayerClosure() {\n    const MAX_TEXT_DIVS_TO_RENDER = 100000;\n    const NonWhitespaceRegexp = /\\S/;\n\n    function isAllWhitespace(str) {\n      return !NonWhitespaceRegexp.test(str);\n    }\n\n    function appendText(task, geom, styles) {\n      const textDiv = document.createElement(\"span\");\n      const textDivProperties = {\n        angle: 0,\n        canvasWidth: 0,\n        isWhitespace: false,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1\n      };\n\n      task._textDivs.push(textDiv);\n\n      if (isAllWhitespace(geom.str)) {\n        textDivProperties.isWhitespace = true;\n\n        task._textDivProperties.set(textDiv, textDivProperties);\n\n        return;\n      }\n\n      const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n      let angle = Math.atan2(tx[1], tx[0]);\n      const style = styles[geom.fontName];\n\n      if (style.vertical) {\n        angle += Math.PI / 2;\n      }\n\n      const fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);\n      let fontAscent = fontHeight;\n\n      if (style.ascent) {\n        fontAscent = style.ascent * fontAscent;\n      } else if (style.descent) {\n        fontAscent = (1 + style.descent) * fontAscent;\n      }\n\n      let left, top;\n\n      if (angle === 0) {\n        left = tx[4];\n        top = tx[5] - fontAscent;\n      } else {\n        left = tx[4] + fontAscent * Math.sin(angle);\n        top = tx[5] - fontAscent * Math.cos(angle);\n      }\n\n      textDiv.style.left = `${left}px`;\n      textDiv.style.top = `${top}px`;\n      textDiv.style.fontSize = `${fontHeight}px`;\n      textDiv.style.fontFamily = style.fontFamily;\n      textDiv.textContent = geom.str;\n\n      if (task._fontInspectorEnabled) {\n        textDiv.dataset.fontName = geom.fontName;\n      }\n\n      if (angle !== 0) {\n        textDivProperties.angle = angle * (180 / Math.PI);\n      }\n\n      let shouldScaleText = false;\n\n      if (geom.str.length > 1) {\n        shouldScaleText = true;\n      } else if (geom.transform[0] !== geom.transform[3]) {\n        const absScaleX = Math.abs(geom.transform[0]),\n              absScaleY = Math.abs(geom.transform[3]);\n\n        if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n          shouldScaleText = true;\n        }\n      }\n\n      if (shouldScaleText) {\n        if (style.vertical) {\n          textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n        } else {\n          textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n        }\n      }\n\n      task._textDivProperties.set(textDiv, textDivProperties);\n\n      if (task._textContentStream) {\n        task._layoutText(textDiv);\n      }\n\n      if (task._enhanceTextSelection) {\n        let angleCos = 1,\n            angleSin = 0;\n\n        if (angle !== 0) {\n          angleCos = Math.cos(angle);\n          angleSin = Math.sin(angle);\n        }\n\n        const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n        const divHeight = fontHeight;\n        let m, b;\n\n        if (angle !== 0) {\n          m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n          b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n        } else {\n          b = [left, top, left + divWidth, top + divHeight];\n        }\n\n        task._bounds.push({\n          left: b[0],\n          top: b[1],\n          right: b[2],\n          bottom: b[3],\n          div: textDiv,\n          size: [divWidth, divHeight],\n          m\n        });\n      }\n    }\n\n    function render(task) {\n      if (task._canceled) {\n        return;\n      }\n\n      const textDivs = task._textDivs;\n      const capability = task._capability;\n      const textDivsLength = textDivs.length;\n\n      if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n        task._renderingDone = true;\n        capability.resolve();\n        return;\n      }\n\n      if (!task._textContentStream) {\n        for (let i = 0; i < textDivsLength; i++) {\n          task._layoutText(textDivs[i]);\n        }\n      }\n\n      task._renderingDone = true;\n      capability.resolve();\n    }\n\n    function findPositiveMin(ts, offset, count) {\n      let result = 0;\n\n      for (let i = 0; i < count; i++) {\n        const t = ts[offset++];\n\n        if (t > 0) {\n          result = result ? Math.min(t, result) : t;\n        }\n      }\n\n      return result;\n    }\n\n    function expand(task) {\n      const bounds = task._bounds;\n      const viewport = task._viewport;\n      const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n      for (let i = 0; i < expanded.length; i++) {\n        const div = bounds[i].div;\n\n        const divProperties = task._textDivProperties.get(div);\n\n        if (divProperties.angle === 0) {\n          divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n          divProperties.paddingTop = bounds[i].top - expanded[i].top;\n          divProperties.paddingRight = expanded[i].right - bounds[i].right;\n          divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n          task._textDivProperties.set(div, divProperties);\n\n          continue;\n        }\n\n        const e = expanded[i],\n              b = bounds[i];\n        const m = b.m,\n              c = m[0],\n              s = m[1];\n        const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n        const ts = new Float64Array(64);\n        points.forEach(function (p, j) {\n          const t = _util.Util.applyTransform(p, m);\n\n          ts[j + 0] = c && (e.left - t[0]) / c;\n          ts[j + 4] = s && (e.top - t[1]) / s;\n          ts[j + 8] = c && (e.right - t[0]) / c;\n          ts[j + 12] = s && (e.bottom - t[1]) / s;\n          ts[j + 16] = s && (e.left - t[0]) / -s;\n          ts[j + 20] = c && (e.top - t[1]) / c;\n          ts[j + 24] = s && (e.right - t[0]) / -s;\n          ts[j + 28] = c && (e.bottom - t[1]) / c;\n          ts[j + 32] = c && (e.left - t[0]) / -c;\n          ts[j + 36] = s && (e.top - t[1]) / -s;\n          ts[j + 40] = c && (e.right - t[0]) / -c;\n          ts[j + 44] = s && (e.bottom - t[1]) / -s;\n          ts[j + 48] = s && (e.left - t[0]) / s;\n          ts[j + 52] = c && (e.top - t[1]) / -c;\n          ts[j + 56] = s && (e.right - t[0]) / s;\n          ts[j + 60] = c && (e.bottom - t[1]) / -c;\n        });\n        const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n        divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n        divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n        divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n        divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n        task._textDivProperties.set(div, divProperties);\n      }\n    }\n\n    function expandBounds(width, height, boxes) {\n      const bounds = boxes.map(function (box, i) {\n        return {\n          x1: box.left,\n          y1: box.top,\n          x2: box.right,\n          y2: box.bottom,\n          index: i,\n          x1New: undefined,\n          x2New: undefined\n        };\n      });\n      expandBoundsLTR(width, bounds);\n      const expanded = new Array(boxes.length);\n      bounds.forEach(function (b) {\n        const i = b.index;\n        expanded[i] = {\n          left: b.x1New,\n          top: 0,\n          right: b.x2New,\n          bottom: 0\n        };\n      });\n      boxes.map(function (box, i) {\n        const e = expanded[i],\n              b = bounds[i];\n        b.x1 = box.top;\n        b.y1 = width - e.right;\n        b.x2 = box.bottom;\n        b.y2 = width - e.left;\n        b.index = i;\n        b.x1New = undefined;\n        b.x2New = undefined;\n      });\n      expandBoundsLTR(height, bounds);\n      bounds.forEach(function (b) {\n        const i = b.index;\n        expanded[i].top = b.x1New;\n        expanded[i].bottom = b.x2New;\n      });\n      return expanded;\n    }\n\n    function expandBoundsLTR(width, bounds) {\n      bounds.sort(function (a, b) {\n        return a.x1 - b.x1 || a.index - b.index;\n      });\n      const fakeBoundary = {\n        x1: -Infinity,\n        y1: -Infinity,\n        x2: 0,\n        y2: Infinity,\n        index: -1,\n        x1New: 0,\n        x2New: 0\n      };\n      const horizon = [{\n        start: -Infinity,\n        end: Infinity,\n        boundary: fakeBoundary\n      }];\n      bounds.forEach(function (boundary) {\n        let i = 0;\n\n        while (i < horizon.length && horizon[i].end <= boundary.y1) {\n          i++;\n        }\n\n        let j = horizon.length - 1;\n\n        while (j >= 0 && horizon[j].start >= boundary.y2) {\n          j--;\n        }\n\n        let horizonPart, affectedBoundary;\n        let q,\n            k,\n            maxXNew = -Infinity;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n          let xNew;\n\n          if (affectedBoundary.x2 > boundary.x1) {\n            xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n          } else if (affectedBoundary.x2New === undefined) {\n            xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n          } else {\n            xNew = affectedBoundary.x2New;\n          }\n\n          if (xNew > maxXNew) {\n            maxXNew = xNew;\n          }\n        }\n\n        boundary.x1New = maxXNew;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n\n          if (affectedBoundary.x2New === undefined) {\n            if (affectedBoundary.x2 > boundary.x1) {\n              if (affectedBoundary.index > boundary.index) {\n                affectedBoundary.x2New = affectedBoundary.x2;\n              }\n            } else {\n              affectedBoundary.x2New = maxXNew;\n            }\n          } else if (affectedBoundary.x2New > maxXNew) {\n            affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n          }\n        }\n\n        const changedHorizon = [];\n        let lastBoundary = null;\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n          const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n          if (lastBoundary === useBoundary) {\n            changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n          } else {\n            changedHorizon.push({\n              start: horizonPart.start,\n              end: horizonPart.end,\n              boundary: useBoundary\n            });\n            lastBoundary = useBoundary;\n          }\n        }\n\n        if (horizon[i].start < boundary.y1) {\n          changedHorizon[0].start = boundary.y1;\n          changedHorizon.unshift({\n            start: horizon[i].start,\n            end: boundary.y1,\n            boundary: horizon[i].boundary\n          });\n        }\n\n        if (boundary.y2 < horizon[j].end) {\n          changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n          changedHorizon.push({\n            start: boundary.y2,\n            end: horizon[j].end,\n            boundary: horizon[j].boundary\n          });\n        }\n\n        for (q = i; q <= j; q++) {\n          horizonPart = horizon[q];\n          affectedBoundary = horizonPart.boundary;\n\n          if (affectedBoundary.x2New !== undefined) {\n            continue;\n          }\n\n          let used = false;\n\n          for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n            used = horizon[k].boundary === affectedBoundary;\n          }\n\n          for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n            used = horizon[k].boundary === affectedBoundary;\n          }\n\n          for (k = 0; !used && k < changedHorizon.length; k++) {\n            used = changedHorizon[k].boundary === affectedBoundary;\n          }\n\n          if (!used) {\n            affectedBoundary.x2New = maxXNew;\n          }\n        }\n\n        Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n      });\n      horizon.forEach(function (horizonPart) {\n        const affectedBoundary = horizonPart.boundary;\n\n        if (affectedBoundary.x2New === undefined) {\n          affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n        }\n      });\n    }\n\n    function TextLayerRenderTask({\n      textContent,\n      textContentStream,\n      container,\n      viewport,\n      textDivs,\n      textContentItemsStr,\n      enhanceTextSelection\n    }) {\n      this._textContent = textContent;\n      this._textContentStream = textContentStream;\n      this._container = container;\n      this._document = container.ownerDocument;\n      this._viewport = viewport;\n      this._textDivs = textDivs || [];\n      this._textContentItemsStr = textContentItemsStr || [];\n      this._enhanceTextSelection = !!enhanceTextSelection;\n      this._fontInspectorEnabled = !!(globalThis.FontInspector && globalThis.FontInspector.enabled); // lwf\n      this._reader = null;\n      this._layoutTextLastFontSize = null;\n      this._layoutTextLastFontFamily = null;\n      this._layoutTextCtx = null;\n      this._textDivProperties = new WeakMap();\n      this._renderingDone = false;\n      this._canceled = false;\n      this._capability = (0, _util.createPromiseCapability)();\n      this._renderTimer = null;\n      this._bounds = [];\n\n      this._capability.promise.finally(() => {\n        if (this._layoutTextCtx) {\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      }).catch(() => {});\n    }\n\n    TextLayerRenderTask.prototype = {\n      get promise() {\n        return this._capability.promise;\n      },\n\n      cancel: function TextLayer_cancel() {\n        this._canceled = true;\n\n        if (this._reader) {\n          this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"));\n\n          this._reader = null;\n        }\n\n        if (this._renderTimer !== null) {\n          clearTimeout(this._renderTimer);\n          this._renderTimer = null;\n        }\n\n        this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n      },\n\n      _processItems(items, styleCache) {\n        for (let i = 0, len = items.length; i < len; i++) {\n          this._textContentItemsStr.push(items[i].str);\n\n          appendText(this, items[i], styleCache);\n        }\n      },\n\n      _layoutText(textDiv) {\n        const textDivProperties = this._textDivProperties.get(textDiv);\n\n        if (textDivProperties.isWhitespace) {\n          return;\n        }\n\n        let transform = \"\";\n\n        if (textDivProperties.canvasWidth !== 0) {\n          const {\n            fontSize,\n            fontFamily\n          } = textDiv.style;\n\n          if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n            this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n            this._layoutTextLastFontSize = fontSize;\n            this._layoutTextLastFontFamily = fontFamily;\n          }\n\n          const {\n            width\n          } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n          if (width > 0) {\n            textDivProperties.scale = textDivProperties.canvasWidth / width;\n            transform = `scaleX(${textDivProperties.scale})`;\n          }\n        }\n\n        if (textDivProperties.angle !== 0) {\n          transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n        }\n\n        if (transform.length > 0) {\n          if (this._enhanceTextSelection) {\n            textDivProperties.originalTransform = transform;\n          }\n\n          textDiv.style.transform = transform;\n        }\n\n        this._textDivProperties.set(textDiv, textDivProperties);\n\n        this._container.appendChild(textDiv);\n      },\n\n      _render: function TextLayer_render(timeout) {\n        const capability = (0, _util.createPromiseCapability)();\n        let styleCache = Object.create(null);\n\n        const canvas = this._document.createElement(\"canvas\");\n\n        canvas.mozOpaque = true;\n        this._layoutTextCtx = canvas.getContext(\"2d\", {\n          alpha: false\n        });\n\n        if (this._textContent) {\n          const textItems = this._textContent.items;\n          const textStyles = this._textContent.styles;\n\n          this._processItems(textItems, textStyles);\n\n          capability.resolve();\n        } else if (this._textContentStream) {\n          const pump = () => {\n            this._reader.read().then(({\n              value,\n              done\n            }) => {\n              if (done) {\n                capability.resolve();\n                return;\n              }\n\n              Object.assign(styleCache, value.styles);\n\n              this._processItems(value.items, styleCache);\n\n              pump();\n            }, capability.reject);\n          };\n\n          this._reader = this._textContentStream.getReader();\n          pump();\n        } else {\n          throw new Error('Neither \"textContent\" nor \"textContentStream\"' + \" parameters specified.\");\n        }\n\n        capability.promise.then(() => {\n          styleCache = null;\n\n          if (!timeout) {\n            render(this);\n          } else {\n            this._renderTimer = setTimeout(() => {\n              render(this);\n              this._renderTimer = null;\n            }, timeout);\n          }\n        }, this._capability.reject);\n      },\n      expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n        if (!this._enhanceTextSelection || !this._renderingDone) {\n          return;\n        }\n\n        if (this._bounds !== null) {\n          expand(this);\n          this._bounds = null;\n        }\n\n        const transformBuf = [],\n              paddingBuf = [];\n\n        for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n          const div = this._textDivs[i];\n\n          const divProps = this._textDivProperties.get(div);\n\n          if (divProps.isWhitespace) {\n            continue;\n          }\n\n          if (expandDivs) {\n            transformBuf.length = 0;\n            paddingBuf.length = 0;\n\n            if (divProps.originalTransform) {\n              transformBuf.push(divProps.originalTransform);\n            }\n\n            if (divProps.paddingTop > 0) {\n              paddingBuf.push(`${divProps.paddingTop}px`);\n              transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingRight > 0) {\n              paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingBottom > 0) {\n              paddingBuf.push(`${divProps.paddingBottom}px`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            if (divProps.paddingLeft > 0) {\n              paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n              transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n            } else {\n              paddingBuf.push(0);\n            }\n\n            div.style.padding = paddingBuf.join(\" \");\n\n            if (transformBuf.length) {\n              div.style.transform = transformBuf.join(\" \");\n            }\n          } else {\n            div.style.padding = null;\n            div.style.transform = divProps.originalTransform;\n          }\n        }\n      }\n    };\n\n    function renderTextLayer(renderParameters) {\n      const task = new TextLayerRenderTask({\n        textContent: renderParameters.textContent,\n        textContentStream: renderParameters.textContentStream,\n        container: renderParameters.container,\n        viewport: renderParameters.viewport,\n        textDivs: renderParameters.textDivs,\n        textContentItemsStr: renderParameters.textContentItemsStr,\n        enhanceTextSelection: renderParameters.enhanceTextSelection\n      });\n\n      task._render(renderParameters.timeout);\n\n      return task;\n    }\n\n    return renderTextLayer;\n  }();\n\n  exports.renderTextLayer = renderTextLayer;\n\n  /***/ }),\n  /* 22 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.SVGGraphics = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _display_utils = __w_pdfjs_require__(1);\n\n  var _is_node = __w_pdfjs_require__(4);\n\n  let SVGGraphics = function () {\n    throw new Error(\"Not implemented: SVGGraphics\");\n  };\n\n  exports.SVGGraphics = SVGGraphics;\n  {\n    const SVG_DEFAULTS = {\n      fontStyle: \"normal\",\n      fontWeight: \"normal\",\n      fillColor: \"#000000\"\n    };\n    const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n    const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n    const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n    const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n    const convertImgDataToPng = function () {\n      const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n      const CHUNK_WRAPPER_SIZE = 12;\n      const crcTable = new Int32Array(256);\n\n      for (let i = 0; i < 256; i++) {\n        let c = i;\n\n        for (let h = 0; h < 8; h++) {\n          if (c & 1) {\n            c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n          } else {\n            c = c >> 1 & 0x7fffffff;\n          }\n        }\n\n        crcTable[i] = c;\n      }\n\n      function crc32(data, start, end) {\n        let crc = -1;\n\n        for (let i = start; i < end; i++) {\n          const a = (crc ^ data[i]) & 0xff;\n          const b = crcTable[a];\n          crc = crc >>> 8 ^ b;\n        }\n\n        return crc ^ -1;\n      }\n\n      function writePngChunk(type, body, data, offset) {\n        let p = offset;\n        const len = body.length;\n        data[p] = len >> 24 & 0xff;\n        data[p + 1] = len >> 16 & 0xff;\n        data[p + 2] = len >> 8 & 0xff;\n        data[p + 3] = len & 0xff;\n        p += 4;\n        data[p] = type.charCodeAt(0) & 0xff;\n        data[p + 1] = type.charCodeAt(1) & 0xff;\n        data[p + 2] = type.charCodeAt(2) & 0xff;\n        data[p + 3] = type.charCodeAt(3) & 0xff;\n        p += 4;\n        data.set(body, p);\n        p += body.length;\n        const crc = crc32(data, offset + 4, p);\n        data[p] = crc >> 24 & 0xff;\n        data[p + 1] = crc >> 16 & 0xff;\n        data[p + 2] = crc >> 8 & 0xff;\n        data[p + 3] = crc & 0xff;\n      }\n\n      function adler32(data, start, end) {\n        let a = 1;\n        let b = 0;\n\n        for (let i = start; i < end; ++i) {\n          a = (a + (data[i] & 0xff)) % 65521;\n          b = (b + a) % 65521;\n        }\n\n        return b << 16 | a;\n      }\n\n      function deflateSync(literals) {\n        if (!_is_node.isNodeJS) {\n          return deflateSyncUncompressed(literals);\n        }\n\n        try {\n          let input;\n\n          if (parseInt(process.versions.node) >= 8) {\n            input = literals;\n          } else {\n            input = Buffer.from(literals);\n          }\n\n          const output = require(\"zlib\").deflateSync(input, {\n            level: 9\n          });\n\n          return output instanceof Uint8Array ? output : new Uint8Array(output);\n        } catch (e) {\n          (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n        }\n\n        return deflateSyncUncompressed(literals);\n      }\n\n      function deflateSyncUncompressed(literals) {\n        let len = literals.length;\n        const maxBlockLength = 0xffff;\n        const deflateBlocks = Math.ceil(len / maxBlockLength);\n        const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n        let pi = 0;\n        idat[pi++] = 0x78;\n        idat[pi++] = 0x9c;\n        let pos = 0;\n\n        while (len > maxBlockLength) {\n          idat[pi++] = 0x00;\n          idat[pi++] = 0xff;\n          idat[pi++] = 0xff;\n          idat[pi++] = 0x00;\n          idat[pi++] = 0x00;\n          idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n          pi += maxBlockLength;\n          pos += maxBlockLength;\n          len -= maxBlockLength;\n        }\n\n        idat[pi++] = 0x01;\n        idat[pi++] = len & 0xff;\n        idat[pi++] = len >> 8 & 0xff;\n        idat[pi++] = ~len & 0xffff & 0xff;\n        idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n        idat.set(literals.subarray(pos), pi);\n        pi += literals.length - pos;\n        const adler = adler32(literals, 0, literals.length);\n        idat[pi++] = adler >> 24 & 0xff;\n        idat[pi++] = adler >> 16 & 0xff;\n        idat[pi++] = adler >> 8 & 0xff;\n        idat[pi++] = adler & 0xff;\n        return idat;\n      }\n\n      function encode(imgData, kind, forceDataSchema, isMask) {\n        const width = imgData.width;\n        const height = imgData.height;\n        let bitDepth, colorType, lineSize;\n        const bytes = imgData.data;\n\n        switch (kind) {\n          case _util.ImageKind.GRAYSCALE_1BPP:\n            colorType = 0;\n            bitDepth = 1;\n            lineSize = width + 7 >> 3;\n            break;\n\n          case _util.ImageKind.RGB_24BPP:\n            colorType = 2;\n            bitDepth = 8;\n            lineSize = width * 3;\n            break;\n\n          case _util.ImageKind.RGBA_32BPP:\n            colorType = 6;\n            bitDepth = 8;\n            lineSize = width * 4;\n            break;\n\n          default:\n            throw new Error(\"invalid format\");\n        }\n\n        const literals = new Uint8Array((1 + lineSize) * height);\n        let offsetLiterals = 0,\n            offsetBytes = 0;\n\n        for (let y = 0; y < height; ++y) {\n          literals[offsetLiterals++] = 0;\n          literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n          offsetBytes += lineSize;\n          offsetLiterals += lineSize;\n        }\n\n        if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n          offsetLiterals = 0;\n\n          for (let y = 0; y < height; y++) {\n            offsetLiterals++;\n\n            for (let i = 0; i < lineSize; i++) {\n              literals[offsetLiterals++] ^= 0xff;\n            }\n          }\n        }\n\n        const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n        const idat = deflateSync(literals);\n        const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n        const data = new Uint8Array(pngLength);\n        let offset = 0;\n        data.set(PNG_HEADER, offset);\n        offset += PNG_HEADER.length;\n        writePngChunk(\"IHDR\", ihdr, data, offset);\n        offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n        writePngChunk(\"IDATA\", idat, data, offset);\n        offset += CHUNK_WRAPPER_SIZE + idat.length;\n        writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n        return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n      }\n\n      return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n        const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n        return encode(imgData, kind, forceDataSchema, isMask);\n      };\n    }();\n\n    class SVGExtraState {\n      constructor() {\n        this.fontSizeScale = 1;\n        this.fontWeight = SVG_DEFAULTS.fontWeight;\n        this.fontSize = 0;\n        this.textMatrix = _util.IDENTITY_MATRIX;\n        this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n        this.leading = 0;\n        this.textRenderingMode = _util.TextRenderingMode.FILL;\n        this.textMatrixScale = 1;\n        this.x = 0;\n        this.y = 0;\n        this.lineX = 0;\n        this.lineY = 0;\n        this.charSpacing = 0;\n        this.wordSpacing = 0;\n        this.textHScale = 1;\n        this.textRise = 0;\n        this.fillColor = SVG_DEFAULTS.fillColor;\n        this.strokeColor = \"#000000\";\n        this.fillAlpha = 1;\n        this.strokeAlpha = 1;\n        this.lineWidth = 1;\n        this.lineJoin = \"\";\n        this.lineCap = \"\";\n        this.miterLimit = 0;\n        this.dashArray = [];\n        this.dashPhase = 0;\n        this.dependencies = [];\n        this.activeClipUrl = null;\n        this.clipGroup = null;\n        this.maskId = \"\";\n      }\n\n      clone() {\n        return Object.create(this);\n      }\n\n      setCurrentPoint(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n    }\n\n    function opListToTree(opList) {\n      let opTree = [];\n      const tmp = [];\n\n      for (const opListElement of opList) {\n        if (opListElement.fn === \"save\") {\n          opTree.push({\n            fnId: 92,\n            fn: \"group\",\n            items: []\n          });\n          tmp.push(opTree);\n          opTree = opTree[opTree.length - 1].items;\n          continue;\n        }\n\n        if (opListElement.fn === \"restore\") {\n          opTree = tmp.pop();\n        } else {\n          opTree.push(opListElement);\n        }\n      }\n\n      return opTree;\n    }\n\n    function pf(value) {\n      if (Number.isInteger(value)) {\n        return value.toString();\n      }\n\n      const s = value.toFixed(10);\n      let i = s.length - 1;\n\n      if (s[i] !== \"0\") {\n        return s;\n      }\n\n      do {\n        i--;\n      } while (s[i] === \"0\");\n\n      return s.substring(0, s[i] === \".\" ? i : i + 1);\n    }\n\n    function pm(m) {\n      if (m[4] === 0 && m[5] === 0) {\n        if (m[1] === 0 && m[2] === 0) {\n          if (m[0] === 1 && m[3] === 1) {\n            return \"\";\n          }\n\n          return `scale(${pf(m[0])} ${pf(m[3])})`;\n        }\n\n        if (m[0] === m[3] && m[1] === -m[2]) {\n          const a = Math.acos(m[0]) * 180 / Math.PI;\n          return `rotate(${pf(a)})`;\n        }\n      } else {\n        if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n          return `translate(${pf(m[4])} ${pf(m[5])})`;\n        }\n      }\n\n      return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n    }\n\n    let clipCount = 0;\n    let maskCount = 0;\n    let shadingCount = 0;\n    exports.SVGGraphics = SVGGraphics = class SVGGraphics {\n      constructor(commonObjs, objs, forceDataSchema = false) {\n        this.svgFactory = new _display_utils.DOMSVGFactory();\n        this.current = new SVGExtraState();\n        this.transformMatrix = _util.IDENTITY_MATRIX;\n        this.transformStack = [];\n        this.extraStack = [];\n        this.commonObjs = commonObjs;\n        this.objs = objs;\n        this.pendingClip = null;\n        this.pendingEOFill = false;\n        this.embedFonts = false;\n        this.embeddedFonts = Object.create(null);\n        this.cssStyle = null;\n        this.forceDataSchema = !!forceDataSchema;\n        this._operatorIdMapping = [];\n\n        for (const op in _util.OPS) {\n          this._operatorIdMapping[_util.OPS[op]] = op;\n        }\n      }\n\n      save() {\n        this.transformStack.push(this.transformMatrix);\n        const old = this.current;\n        this.extraStack.push(old);\n        this.current = old.clone();\n      }\n\n      restore() {\n        this.transformMatrix = this.transformStack.pop();\n        this.current = this.extraStack.pop();\n        this.pendingClip = null;\n        this.tgrp = null;\n      }\n\n      group(items) {\n        this.save();\n        this.executeOpTree(items);\n        this.restore();\n      }\n\n      loadDependencies(operatorList) {\n        const fnArray = operatorList.fnArray;\n        const argsArray = operatorList.argsArray;\n\n        for (let i = 0, ii = fnArray.length; i < ii; i++) {\n          if (fnArray[i] !== _util.OPS.dependency) {\n            continue;\n          }\n\n          for (const obj of argsArray[i]) {\n            const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n            const promise = new Promise(resolve => {\n              objsPool.get(obj, resolve);\n            });\n            this.current.dependencies.push(promise);\n          }\n        }\n\n        return Promise.all(this.current.dependencies);\n      }\n\n      transform(a, b, c, d, e, f) {\n        const transformMatrix = [a, b, c, d, e, f];\n        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n        this.tgrp = null;\n      }\n\n      getSVG(operatorList, viewport) {\n        this.viewport = viewport;\n\n        const svgElement = this._initialize(viewport);\n\n        return this.loadDependencies(operatorList).then(() => {\n          this.transformMatrix = _util.IDENTITY_MATRIX;\n          this.executeOpTree(this.convertOpList(operatorList));\n          return svgElement;\n        });\n      }\n\n      convertOpList(operatorList) {\n        const operatorIdMapping = this._operatorIdMapping;\n        const argsArray = operatorList.argsArray;\n        const fnArray = operatorList.fnArray;\n        const opList = [];\n\n        for (let i = 0, ii = fnArray.length; i < ii; i++) {\n          const fnId = fnArray[i];\n          opList.push({\n            fnId,\n            fn: operatorIdMapping[fnId],\n            args: argsArray[i]\n          });\n        }\n\n        return opListToTree(opList);\n      }\n\n      executeOpTree(opTree) {\n        for (const opTreeElement of opTree) {\n          const fn = opTreeElement.fn;\n          const fnId = opTreeElement.fnId;\n          const args = opTreeElement.args;\n\n          switch (fnId | 0) {\n            case _util.OPS.beginText:\n              this.beginText();\n              break;\n\n            case _util.OPS.dependency:\n              break;\n\n            case _util.OPS.setLeading:\n              this.setLeading(args);\n              break;\n\n            case _util.OPS.setLeadingMoveText:\n              this.setLeadingMoveText(args[0], args[1]);\n              break;\n\n            case _util.OPS.setFont:\n              this.setFont(args);\n              break;\n\n            case _util.OPS.showText:\n              this.showText(args[0]);\n              break;\n\n            case _util.OPS.showSpacedText:\n              this.showText(args[0]);\n              break;\n\n            case _util.OPS.endText:\n              this.endText();\n              break;\n\n            case _util.OPS.moveText:\n              this.moveText(args[0], args[1]);\n              break;\n\n            case _util.OPS.setCharSpacing:\n              this.setCharSpacing(args[0]);\n              break;\n\n            case _util.OPS.setWordSpacing:\n              this.setWordSpacing(args[0]);\n              break;\n\n            case _util.OPS.setHScale:\n              this.setHScale(args[0]);\n              break;\n\n            case _util.OPS.setTextMatrix:\n              this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.setTextRise:\n              this.setTextRise(args[0]);\n              break;\n\n            case _util.OPS.setTextRenderingMode:\n              this.setTextRenderingMode(args[0]);\n              break;\n\n            case _util.OPS.setLineWidth:\n              this.setLineWidth(args[0]);\n              break;\n\n            case _util.OPS.setLineJoin:\n              this.setLineJoin(args[0]);\n              break;\n\n            case _util.OPS.setLineCap:\n              this.setLineCap(args[0]);\n              break;\n\n            case _util.OPS.setMiterLimit:\n              this.setMiterLimit(args[0]);\n              break;\n\n            case _util.OPS.setFillRGBColor:\n              this.setFillRGBColor(args[0], args[1], args[2]);\n              break;\n\n            case _util.OPS.setStrokeRGBColor:\n              this.setStrokeRGBColor(args[0], args[1], args[2]);\n              break;\n\n            case _util.OPS.setStrokeColorN:\n              this.setStrokeColorN(args);\n              break;\n\n            case _util.OPS.setFillColorN:\n              this.setFillColorN(args);\n              break;\n\n            case _util.OPS.shadingFill:\n              this.shadingFill(args[0]);\n              break;\n\n            case _util.OPS.setDash:\n              this.setDash(args[0], args[1]);\n              break;\n\n            case _util.OPS.setRenderingIntent:\n              this.setRenderingIntent(args[0]);\n              break;\n\n            case _util.OPS.setFlatness:\n              this.setFlatness(args[0]);\n              break;\n\n            case _util.OPS.setGState:\n              this.setGState(args[0]);\n              break;\n\n            case _util.OPS.fill:\n              this.fill();\n              break;\n\n            case _util.OPS.eoFill:\n              this.eoFill();\n              break;\n\n            case _util.OPS.stroke:\n              this.stroke();\n              break;\n\n            case _util.OPS.fillStroke:\n              this.fillStroke();\n              break;\n\n            case _util.OPS.eoFillStroke:\n              this.eoFillStroke();\n              break;\n\n            case _util.OPS.clip:\n              this.clip(\"nonzero\");\n              break;\n\n            case _util.OPS.eoClip:\n              this.clip(\"evenodd\");\n              break;\n\n            case _util.OPS.paintSolidColorImageMask:\n              this.paintSolidColorImageMask();\n              break;\n\n            case _util.OPS.paintImageXObject:\n              this.paintImageXObject(args[0]);\n              break;\n\n            case _util.OPS.paintInlineImageXObject:\n              this.paintInlineImageXObject(args[0]);\n              break;\n\n            case _util.OPS.paintImageMaskXObject:\n              this.paintImageMaskXObject(args[0]);\n              break;\n\n            case _util.OPS.paintFormXObjectBegin:\n              this.paintFormXObjectBegin(args[0], args[1]);\n              break;\n\n            case _util.OPS.paintFormXObjectEnd:\n              this.paintFormXObjectEnd();\n              break;\n\n            case _util.OPS.closePath:\n              this.closePath();\n              break;\n\n            case _util.OPS.closeStroke:\n              this.closeStroke();\n              break;\n\n            case _util.OPS.closeFillStroke:\n              this.closeFillStroke();\n              break;\n\n            case _util.OPS.closeEOFillStroke:\n              this.closeEOFillStroke();\n              break;\n\n            case _util.OPS.nextLine:\n              this.nextLine();\n              break;\n\n            case _util.OPS.transform:\n              this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.constructPath:\n              this.constructPath(args[0], args[1]);\n              break;\n\n            case _util.OPS.endPath:\n              this.endPath();\n              break;\n\n            case 92:\n              this.group(opTreeElement.items);\n              break;\n\n            default:\n              (0, _util.warn)(`Unimplemented operator ${fn}`);\n              break;\n          }\n        }\n      }\n\n      setWordSpacing(wordSpacing) {\n        this.current.wordSpacing = wordSpacing;\n      }\n\n      setCharSpacing(charSpacing) {\n        this.current.charSpacing = charSpacing;\n      }\n\n      nextLine() {\n        this.moveText(0, this.current.leading);\n      }\n\n      setTextMatrix(a, b, c, d, e, f) {\n        const current = this.current;\n        current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n        current.textMatrixScale = Math.sqrt(a * a + b * b);\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtElement.appendChild(current.tspan);\n      }\n\n      beginText() {\n        const current = this.current;\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.textMatrix = _util.IDENTITY_MATRIX;\n        current.lineMatrix = _util.IDENTITY_MATRIX;\n        current.textMatrixScale = 1;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n\n      moveText(x, y) {\n        const current = this.current;\n        current.x = current.lineX += x;\n        current.y = current.lineY += y;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      showText(glyphs) {\n        const current = this.current;\n        const font = current.font;\n        const fontSize = current.fontSize;\n\n        if (fontSize === 0) {\n          return;\n        }\n\n        const fontSizeScale = current.fontSizeScale;\n        const charSpacing = current.charSpacing;\n        const wordSpacing = current.wordSpacing;\n        const fontDirection = current.fontDirection;\n        const textHScale = current.textHScale * fontDirection;\n        const vertical = font.vertical;\n        const spacingDir = vertical ? 1 : -1;\n        const defaultVMetrics = font.defaultVMetrics;\n        const widthAdvanceScale = fontSize * current.fontMatrix[0];\n        let x = 0;\n\n        for (const glyph of glyphs) {\n          if (glyph === null) {\n            x += fontDirection * wordSpacing;\n            continue;\n          } else if ((0, _util.isNum)(glyph)) {\n            x += spacingDir * glyph * fontSize / 1000;\n            continue;\n          }\n\n          const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n          const character = glyph.fontChar;\n          let scaledX, scaledY;\n          let width = glyph.width;\n\n          if (vertical) {\n            let vx;\n            const vmetric = glyph.vmetric || defaultVMetrics;\n            vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n            vx = -vx * widthAdvanceScale;\n            const vy = vmetric[2] * widthAdvanceScale;\n            width = vmetric ? -vmetric[0] : width;\n            scaledX = vx / fontSizeScale;\n            scaledY = (x + vy) / fontSizeScale;\n          } else {\n            scaledX = x / fontSizeScale;\n            scaledY = 0;\n          }\n\n          if (glyph.isInFont || font.missingFile) {\n            current.xcoords.push(current.x + scaledX);\n\n            if (vertical) {\n              current.ycoords.push(-current.y + scaledY);\n            }\n\n            current.tspan.textContent += character;\n          } else {}\n\n          let charWidth;\n\n          if (vertical) {\n            charWidth = width * widthAdvanceScale - spacing * fontDirection;\n          } else {\n            charWidth = width * widthAdvanceScale + spacing * fontDirection;\n          }\n\n          x += charWidth;\n        }\n\n        current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n        if (vertical) {\n          current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n        } else {\n          current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        }\n\n        if (vertical) {\n          current.y -= x;\n        } else {\n          current.x += x * textHScale;\n        }\n\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n          current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n        }\n\n        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n          current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n        }\n\n        const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n            current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n          }\n\n          if (current.fillAlpha < 1) {\n            current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          }\n        } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n          current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n        } else {\n          current.tspan.setAttributeNS(null, \"fill\", \"none\");\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n          this._setStrokeAttributes(current.tspan, lineWidthScale);\n        }\n\n        let textMatrix = current.textMatrix;\n\n        if (current.textRise !== 0) {\n          textMatrix = textMatrix.slice();\n          textMatrix[5] += current.textRise;\n        }\n\n        current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n        current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n        current.txtElement.appendChild(current.tspan);\n        current.txtgrp.appendChild(current.txtElement);\n\n        this._ensureTransformGroup().appendChild(current.txtElement);\n      }\n\n      setLeadingMoveText(x, y) {\n        this.setLeading(-y);\n        this.moveText(x, y);\n      }\n\n      addFontStyle(fontObj) {\n        if (!fontObj.data) {\n          throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n        }\n\n        if (!this.cssStyle) {\n          this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n          this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n          this.defs.appendChild(this.cssStyle);\n        }\n\n        const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n        this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n      }\n\n      setFont(details) {\n        const current = this.current;\n        const fontObj = this.commonObjs.get(details[0]);\n        let size = details[1];\n        current.font = fontObj;\n\n        if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n          this.addFontStyle(fontObj);\n          this.embeddedFonts[fontObj.loadedName] = fontObj;\n        }\n\n        current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        let bold = \"normal\";\n\n        if (fontObj.black) {\n          bold = \"900\";\n        } else if (fontObj.bold) {\n          bold = \"bold\";\n        }\n\n        const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n        if (size < 0) {\n          size = -size;\n          current.fontDirection = -1;\n        } else {\n          current.fontDirection = 1;\n        }\n\n        current.fontSize = size;\n        current.fontFamily = fontObj.loadedName;\n        current.fontWeight = bold;\n        current.fontStyle = italic;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n\n      endText() {\n        const current = this.current;\n\n        if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement && current.txtElement.hasChildNodes()) { // lwf\n          current.element = current.txtElement;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n\n      setLineWidth(width) {\n        if (width > 0) {\n          this.current.lineWidth = width;\n        }\n      }\n\n      setLineCap(style) {\n        this.current.lineCap = LINE_CAP_STYLES[style];\n      }\n\n      setLineJoin(style) {\n        this.current.lineJoin = LINE_JOIN_STYLES[style];\n      }\n\n      setMiterLimit(limit) {\n        this.current.miterLimit = limit;\n      }\n\n      setStrokeAlpha(strokeAlpha) {\n        this.current.strokeAlpha = strokeAlpha;\n      }\n\n      setStrokeRGBColor(r, g, b) {\n        this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n      }\n\n      setFillAlpha(fillAlpha) {\n        this.current.fillAlpha = fillAlpha;\n      }\n\n      setFillRGBColor(r, g, b) {\n        this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n        this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        this.current.xcoords = [];\n        this.current.ycoords = [];\n      }\n\n      setStrokeColorN(args) {\n        this.current.strokeColor = this._makeColorN_Pattern(args);\n      }\n\n      setFillColorN(args) {\n        this.current.fillColor = this._makeColorN_Pattern(args);\n      }\n\n      shadingFill(args) {\n        const width = this.viewport.width;\n        const height = this.viewport.height;\n\n        const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n        const bl = _util.Util.applyTransform([0, 0], inv);\n\n        const br = _util.Util.applyTransform([0, height], inv);\n\n        const ul = _util.Util.applyTransform([width, 0], inv);\n\n        const ur = _util.Util.applyTransform([width, height], inv);\n\n        const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", x0);\n        rect.setAttributeNS(null, \"y\", y0);\n        rect.setAttributeNS(null, \"width\", x1 - x0);\n        rect.setAttributeNS(null, \"height\", y1 - y0);\n        rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n        if (this.current.fillAlpha < 1) {\n          rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n        }\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n\n      _makeColorN_Pattern(args) {\n        if (args[0] === \"TilingPattern\") {\n          return this._makeTilingPattern(args);\n        }\n\n        return this._makeShadingPattern(args);\n      }\n\n      _makeTilingPattern(args) {\n        const color = args[1];\n        const operatorList = args[2];\n        const matrix = args[3] || _util.IDENTITY_MATRIX;\n        const [x0, y0, x1, y1] = args[4];\n        const xstep = args[5];\n        const ystep = args[6];\n        const paintType = args[7];\n        const tilingId = `shading${shadingCount++}`;\n\n        const [tx0, ty0] = _util.Util.applyTransform([x0, y0], matrix);\n\n        const [tx1, ty1] = _util.Util.applyTransform([x1, y1], matrix);\n\n        const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n        const txstep = xstep * xscale;\n        const tystep = ystep * yscale;\n        const tiling = this.svgFactory.createElement(\"svg:pattern\");\n        tiling.setAttributeNS(null, \"id\", tilingId);\n        tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n        tiling.setAttributeNS(null, \"width\", txstep);\n        tiling.setAttributeNS(null, \"height\", tystep);\n        tiling.setAttributeNS(null, \"x\", `${tx0}`);\n        tiling.setAttributeNS(null, \"y\", `${ty0}`);\n        const svg = this.svg;\n        const transformMatrix = this.transformMatrix;\n        const fillColor = this.current.fillColor;\n        const strokeColor = this.current.strokeColor;\n        const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n        this.svg = bbox;\n        this.transformMatrix = matrix;\n\n        if (paintType === 2) {\n          const cssColor = _util.Util.makeHexColor(...color);\n\n          this.current.fillColor = cssColor;\n          this.current.strokeColor = cssColor;\n        }\n\n        this.executeOpTree(this.convertOpList(operatorList));\n        this.svg = svg;\n        this.transformMatrix = transformMatrix;\n        this.current.fillColor = fillColor;\n        this.current.strokeColor = strokeColor;\n        tiling.appendChild(bbox.childNodes[0]);\n        this.defs.appendChild(tiling);\n        return `url(#${tilingId})`;\n      }\n\n      _makeShadingPattern(args) {\n        switch (args[0]) {\n          case \"RadialAxial\":\n            const shadingId = `shading${shadingCount++}`;\n            const colorStops = args[3];\n            let gradient;\n\n            switch (args[1]) {\n              case \"axial\":\n                const point0 = args[4];\n                const point1 = args[5];\n                gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"x1\", point0[0]);\n                gradient.setAttributeNS(null, \"y1\", point0[1]);\n                gradient.setAttributeNS(null, \"x2\", point1[0]);\n                gradient.setAttributeNS(null, \"y2\", point1[1]);\n                break;\n\n              case \"radial\":\n                const focalPoint = args[4];\n                const circlePoint = args[5];\n                const focalRadius = args[6];\n                const circleRadius = args[7];\n                gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                gradient.setAttributeNS(null, \"r\", circleRadius);\n                gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                gradient.setAttributeNS(null, \"fr\", focalRadius);\n                break;\n\n              default:\n                throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n            }\n\n            for (const colorStop of colorStops) {\n              const stop = this.svgFactory.createElement(\"svg:stop\");\n              stop.setAttributeNS(null, \"offset\", colorStop[0]);\n              stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n              gradient.appendChild(stop);\n            }\n\n            this.defs.appendChild(gradient);\n            return `url(#${shadingId})`;\n\n          case \"Mesh\":\n            (0, _util.warn)(\"Unimplemented pattern Mesh\");\n            return null;\n\n          case \"Dummy\":\n            return \"hotpink\";\n\n          default:\n            throw new Error(`Unknown IR type: ${args[0]}`);\n        }\n      }\n\n      setDash(dashArray, dashPhase) {\n        this.current.dashArray = dashArray;\n        this.current.dashPhase = dashPhase;\n      }\n\n      constructPath(ops, args) {\n        const current = this.current;\n        let x = current.x,\n            y = current.y;\n        let d = [];\n        let j = 0;\n\n        for (const op of ops) {\n          switch (op | 0) {\n            case _util.OPS.rectangle:\n              x = args[j++];\n              y = args[j++];\n              const width = args[j++];\n              const height = args[j++];\n              const xw = x + width;\n              const yh = y + height;\n              d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n              break;\n\n            case _util.OPS.moveTo:\n              x = args[j++];\n              y = args[j++];\n              d.push(\"M\", pf(x), pf(y));\n              break;\n\n            case _util.OPS.lineTo:\n              x = args[j++];\n              y = args[j++];\n              d.push(\"L\", pf(x), pf(y));\n              break;\n\n            case _util.OPS.curveTo:\n              x = args[j + 4];\n              y = args[j + 5];\n              d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n              j += 6;\n              break;\n\n            case _util.OPS.curveTo2:\n              d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n              x = args[j + 2];\n              y = args[j + 3];\n              j += 4;\n              break;\n\n            case _util.OPS.curveTo3:\n              x = args[j + 2];\n              y = args[j + 3];\n              d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n              j += 4;\n              break;\n\n            case _util.OPS.closePath:\n              d.push(\"Z\");\n              break;\n          }\n        }\n\n        d = d.join(\" \");\n\n        if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n          d = current.path.getAttributeNS(null, \"d\") + d;\n        } else {\n          current.path = this.svgFactory.createElement(\"svg:path\");\n\n          this._ensureTransformGroup().appendChild(current.path);\n        }\n\n        current.path.setAttributeNS(null, \"d\", d);\n        current.path.setAttributeNS(null, \"fill\", \"none\");\n        current.element = current.path;\n        current.setCurrentPoint(x, y);\n      }\n\n      endPath() {\n        const current = this.current;\n        current.path = null;\n\n        if (!this.pendingClip) {\n          return;\n        }\n\n        if (!current.element) {\n          this.pendingClip = null;\n          return;\n        }\n\n        const clipId = `clippath${clipCount++}`;\n        const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n        clipPath.setAttributeNS(null, \"id\", clipId);\n        clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        const clipElement = current.element.cloneNode(true);\n\n        if (this.pendingClip === \"evenodd\") {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n        } else {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n        }\n\n        this.pendingClip = null;\n        clipPath.appendChild(clipElement);\n        this.defs.appendChild(clipPath);\n\n        if (current.activeClipUrl) {\n          current.clipGroup = null;\n          this.extraStack.forEach(function (prev) {\n            prev.clipGroup = null;\n          });\n          clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n        }\n\n        current.activeClipUrl = `url(#${clipId})`;\n        this.tgrp = null;\n      }\n\n      clip(type) {\n        this.pendingClip = type;\n      }\n\n      closePath() {\n        const current = this.current;\n\n        if (current.path) {\n          const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n          current.path.setAttributeNS(null, \"d\", d);\n        }\n      }\n\n      setLeading(leading) {\n        this.current.leading = -leading;\n      }\n\n      setTextRise(textRise) {\n        this.current.textRise = textRise;\n      }\n\n      setTextRenderingMode(textRenderingMode) {\n        this.current.textRenderingMode = textRenderingMode;\n      }\n\n      setHScale(scale) {\n        this.current.textHScale = scale / 100;\n      }\n\n      setRenderingIntent(intent) {}\n\n      setFlatness(flatness) {}\n\n      setGState(states) {\n        for (const [key, value] of states) {\n          switch (key) {\n            case \"LW\":\n              this.setLineWidth(value);\n              break;\n\n            case \"LC\":\n              this.setLineCap(value);\n              break;\n\n            case \"LJ\":\n              this.setLineJoin(value);\n              break;\n\n            case \"ML\":\n              this.setMiterLimit(value);\n              break;\n\n            case \"D\":\n              this.setDash(value[0], value[1]);\n              break;\n\n            case \"RI\":\n              this.setRenderingIntent(value);\n              break;\n\n            case \"FL\":\n              this.setFlatness(value);\n              break;\n\n            case \"Font\":\n              this.setFont(value);\n              break;\n\n            case \"CA\":\n              this.setStrokeAlpha(value);\n              break;\n\n            case \"ca\":\n              this.setFillAlpha(value);\n              break;\n\n            default:\n              (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n              break;\n          }\n        }\n      }\n\n      fill() {\n        const current = this.current;\n\n        if (current.element) {\n          current.element.setAttributeNS(null, \"fill\", current.fillColor);\n          current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          this.endPath();\n        }\n      }\n\n      stroke() {\n        const current = this.current;\n\n        if (current.element) {\n          this._setStrokeAttributes(current.element);\n\n          current.element.setAttributeNS(null, \"fill\", \"none\");\n          this.endPath();\n        }\n      }\n\n      _setStrokeAttributes(element, lineWidthScale = 1) {\n        const current = this.current;\n        let dashArray = current.dashArray;\n\n        if (lineWidthScale !== 1 && dashArray.length > 0) {\n          dashArray = dashArray.map(function (value) {\n            return lineWidthScale * value;\n          });\n        }\n\n        element.setAttributeNS(null, \"stroke\", current.strokeColor);\n        element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n        element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n        element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n        element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n        element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n        element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n        element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n      }\n\n      eoFill() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fill();\n      }\n\n      fillStroke() {\n        this.stroke();\n        this.fill();\n      }\n\n      eoFillStroke() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fillStroke();\n      }\n\n      closeStroke() {\n        this.closePath();\n        this.stroke();\n      }\n\n      closeFillStroke() {\n        this.closePath();\n        this.fillStroke();\n      }\n\n      closeEOFillStroke() {\n        this.closePath();\n        this.eoFillStroke();\n      }\n\n      paintSolidColorImageMask() {\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", \"1px\");\n        rect.setAttributeNS(null, \"height\", \"1px\");\n        rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n\n      paintImageXObject(objId) {\n        const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n          return;\n        }\n\n        this.paintInlineImageXObject(imgData);\n      }\n\n      paintInlineImageXObject(imgData, mask) {\n        const width = imgData.width;\n        const height = imgData.height;\n        const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", \"0\");\n        cliprect.setAttributeNS(null, \"y\", \"0\");\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        const imgEl = this.svgFactory.createElement(\"svg:image\");\n        imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n        imgEl.setAttributeNS(null, \"x\", \"0\");\n        imgEl.setAttributeNS(null, \"y\", pf(-height));\n        imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n        imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n        imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n        if (mask) {\n          mask.appendChild(imgEl);\n        } else {\n          this._ensureTransformGroup().appendChild(imgEl);\n        }\n      }\n\n      paintImageMaskXObject(imgData) {\n        const current = this.current;\n        const width = imgData.width;\n        const height = imgData.height;\n        const fillColor = current.fillColor;\n        current.maskId = `mask${maskCount++}`;\n        const mask = this.svgFactory.createElement(\"svg:mask\");\n        mask.setAttributeNS(null, \"id\", current.maskId);\n        const rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", pf(width));\n        rect.setAttributeNS(null, \"height\", pf(height));\n        rect.setAttributeNS(null, \"fill\", fillColor);\n        rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n        this.defs.appendChild(mask);\n\n        this._ensureTransformGroup().appendChild(rect);\n\n        this.paintInlineImageXObject(imgData, mask);\n      }\n\n      paintFormXObjectBegin(matrix, bbox) {\n        if (Array.isArray(matrix) && matrix.length === 6) {\n          this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n        }\n\n        if (bbox) {\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const cliprect = this.svgFactory.createElement(\"svg:rect\");\n          cliprect.setAttributeNS(null, \"x\", bbox[0]);\n          cliprect.setAttributeNS(null, \"y\", bbox[1]);\n          cliprect.setAttributeNS(null, \"width\", pf(width));\n          cliprect.setAttributeNS(null, \"height\", pf(height));\n          this.current.element = cliprect;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n\n      paintFormXObjectEnd() {}\n\n      _initialize(viewport) {\n        const svg = this.svgFactory.create(viewport.width, viewport.height);\n        const definitions = this.svgFactory.createElement(\"svg:defs\");\n        svg.appendChild(definitions);\n        this.defs = definitions;\n        const rootGroup = this.svgFactory.createElement(\"svg:g\");\n        rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n        svg.appendChild(rootGroup);\n        this.svg = rootGroup;\n        return svg;\n      }\n\n      _ensureClipGroup() {\n        if (!this.current.clipGroup) {\n          const clipGroup = this.svgFactory.createElement(\"svg:g\");\n          clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n          this.svg.appendChild(clipGroup);\n          this.current.clipGroup = clipGroup;\n        }\n\n        return this.current.clipGroup;\n      }\n\n      _ensureTransformGroup() {\n        if (!this.tgrp) {\n          this.tgrp = this.svgFactory.createElement(\"svg:g\");\n          this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n          if (this.current.activeClipUrl) {\n            this._ensureClipGroup().appendChild(this.tgrp);\n          } else {\n            this.svg.appendChild(this.tgrp);\n          }\n        }\n\n        return this.tgrp;\n      }\n\n    };\n  }\n\n  /***/ }),\n  /* 23 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFNodeStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n\n  const fs = require(\"fs\");\n\n  const http = require(\"http\");\n\n  const https = require(\"https\");\n\n  const url = require(\"url\");\n\n  const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n  function parseUrl(sourceUrl) {\n    const parsedUrl = url.parse(sourceUrl);\n\n    if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n      return parsedUrl;\n    }\n\n    if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n      return url.parse(`file:///${sourceUrl}`);\n    }\n\n    if (!parsedUrl.host) {\n      parsedUrl.protocol = \"file:\";\n    }\n\n    return parsedUrl;\n  }\n\n  class PDFNodeStream {\n    constructor(source) {\n      this.source = source;\n      this.url = parseUrl(source.url);\n      this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n      this.isFsUrl = this.url.protocol === \"file:\";\n      this.httpHeaders = this.isHttp && source.httpHeaders || {};\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n      this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(start, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n      this._rangeRequestReaders.push(rangeReader);\n\n      return rangeReader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFNodeStream = PDFNodeStream;\n\n  class BaseFullReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      const source = stream.source;\n      this._contentLength = source.length;\n      this._loaded = 0;\n      this._filename = null;\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      this._readableStream = null;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      this._headersCapability = (0, _util.createPromiseCapability)();\n    }\n\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      const chunk = this._readableStream.read();\n\n      if (chunk === null) {\n        this._readCapability = (0, _util.createPromiseCapability)();\n        return this.read();\n      }\n\n      this._loaded += chunk.length;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded,\n          total: this._contentLength\n        });\n      }\n\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n\n    _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n\n      if (!this._isStreamingSupported && this._isRangeSupported) {\n        this._error(new _util.AbortException(\"streaming is disabled\"));\n      }\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n\n  }\n\n  class BaseRangeReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      this._loaded = 0;\n      this._readableStream = null;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      const source = stream.source;\n      this._isStreamingSupported = !source.disableStream;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      const chunk = this._readableStream.read();\n\n      if (chunk === null) {\n        this._readCapability = (0, _util.createPromiseCapability)();\n        return this.read();\n      }\n\n      this._loaded += chunk.length;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded\n        });\n      }\n\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n\n    _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n\n  }\n\n  function createRequestOptions(parsedUrl, headers) {\n    return {\n      protocol: parsedUrl.protocol,\n      auth: parsedUrl.auth,\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      path: parsedUrl.path,\n      method: \"GET\",\n      headers\n    };\n  }\n\n  class PDFNodeStreamFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n\n          this._headersCapability.reject(error);\n\n          return;\n        }\n\n        this._headersCapability.resolve();\n\n        this._setReadableStream(response);\n\n        const getResponseHeader = name => {\n          return this._readableStream.headers[name.toLowerCase()];\n        };\n\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = (0, _network_utils.validateRangeRequestCapabilities)({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n      };\n\n      this._request = null;\n\n      if (this._url.protocol === \"http:\") {\n        this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n      } else {\n        this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n      }\n\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n\n        this._headersCapability.reject(reason);\n      });\n\n      this._request.end();\n    }\n\n  }\n\n  class PDFNodeStreamRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      this._httpHeaders = {};\n\n      for (const property in stream.httpHeaders) {\n        const value = stream.httpHeaders[property];\n\n        if (typeof value === \"undefined\") {\n          continue;\n        }\n\n        this._httpHeaders[property] = value;\n      }\n\n      this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n          return;\n        }\n\n        this._setReadableStream(response);\n      };\n\n      this._request = null;\n\n      if (this._url.protocol === \"http:\") {\n        this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n      } else {\n        this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n      }\n\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n      });\n\n      this._request.end();\n    }\n\n  }\n\n  class PDFNodeStreamFsFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n      let path = decodeURIComponent(this._url.path);\n\n      if (fileUriRegex.test(this._url.href)) {\n        path = path.replace(/^\\//, \"\");\n      }\n\n      fs.lstat(path, (error, stat) => {\n        if (error) {\n          if (error.code === \"ENOENT\") {\n            error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n          }\n\n          this._storedError = error;\n\n          this._headersCapability.reject(error);\n\n          return;\n        }\n\n        this._contentLength = stat.size;\n\n        this._setReadableStream(fs.createReadStream(path));\n\n        this._headersCapability.resolve();\n      });\n    }\n\n  }\n\n  class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      let path = decodeURIComponent(this._url.path);\n\n      if (fileUriRegex.test(this._url.href)) {\n        path = path.replace(/^\\//, \"\");\n      }\n\n      this._setReadableStream(fs.createReadStream(path, {\n        start,\n        end: end - 1\n      }));\n    }\n\n  }\n\n  /***/ }),\n  /* 24 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.createResponseStatusError = createResponseStatusError;\n  exports.extractFilenameFromHeader = extractFilenameFromHeader;\n  exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n  exports.validateResponseStatus = validateResponseStatus;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _content_disposition = __w_pdfjs_require__(25);\n\n  function validateRangeRequestCapabilities({\n    getResponseHeader,\n    isHttp,\n    rangeChunkSize,\n    disableRange\n  }) {\n    (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n    const returnValues = {\n      allowRangeRequests: false,\n      suggestedLength: undefined\n    };\n    const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n    if (!Number.isInteger(length)) {\n      return returnValues;\n    }\n\n    returnValues.suggestedLength = length;\n\n    if (length <= 2 * rangeChunkSize) {\n      return returnValues;\n    }\n\n    if (disableRange || !isHttp) {\n      return returnValues;\n    }\n\n    if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n      return returnValues;\n    }\n\n    const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n    if (contentEncoding !== \"identity\") {\n      return returnValues;\n    }\n\n    returnValues.allowRangeRequests = true;\n    return returnValues;\n  }\n\n  function extractFilenameFromHeader(getResponseHeader) {\n    const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n    if (contentDisposition) {\n      let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n      if (filename.includes(\"%\")) {\n        try {\n          filename = decodeURIComponent(filename);\n        } catch (ex) {}\n      }\n\n      if (/\\.pdf$/i.test(filename)) {\n        return filename;\n      }\n    }\n\n    return null;\n  }\n\n  function createResponseStatusError(status, url) {\n    if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n      return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n    }\n\n    return new _util.UnexpectedResponseException(\"Unexpected server response (\" + status + ') while retrieving PDF \"' + url + '\".', status);\n  }\n\n  function validateResponseStatus(status) {\n    return status === 200 || status === 206;\n  }\n\n  /***/ }),\n  /* 25 */\n  /***/ ((__unused_webpack_module, exports) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n  function getFilenameFromContentDispositionHeader(contentDisposition) {\n    let needsEncodingFixup = true;\n    let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = unescape(filename);\n      filename = rfc5987decode(filename);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n\n    tmp = rfc2231getparam(contentDisposition);\n\n    if (tmp) {\n      const filename = rfc2047decode(tmp);\n      return fixupEncoding(filename);\n    }\n\n    tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n\n    function toParamRegExp(attributePattern, flags) {\n      return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n    }\n\n    function textdecode(encoding, value) {\n      if (encoding) {\n        if (!/^[\\x00-\\xFF]+$/.test(value)) {\n          return value;\n        }\n\n        try {\n          const decoder = new TextDecoder(encoding, {\n            fatal: true\n          });\n          const bytes = Array.from(value, function (ch) {\n            return ch.charCodeAt(0) & 0xff;\n          });\n          value = decoder.decode(new Uint8Array(bytes));\n          needsEncodingFixup = false;\n        } catch (e) {\n          if (/^utf-?8$/i.test(encoding)) {\n            try {\n              value = decodeURIComponent(escape(value));\n              needsEncodingFixup = false;\n            } catch (err) {}\n          }\n        }\n      }\n\n      return value;\n    }\n\n    function fixupEncoding(value) {\n      if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n        value = textdecode(\"utf-8\", value);\n\n        if (needsEncodingFixup) {\n          value = textdecode(\"iso-8859-1\", value);\n        }\n      }\n\n      return value;\n    }\n\n    function rfc2231getparam(contentDispositionStr) {\n      const matches = [];\n      let match;\n      const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n      while ((match = iter.exec(contentDispositionStr)) !== null) {\n        let [, n, quot, part] = match;\n        n = parseInt(n, 10);\n\n        if (n in matches) {\n          if (n === 0) {\n            break;\n          }\n\n          continue;\n        }\n\n        matches[n] = [quot, part];\n      }\n\n      const parts = [];\n\n      for (let n = 0; n < matches.length; ++n) {\n        if (!(n in matches)) {\n          break;\n        }\n\n        let [quot, part] = matches[n];\n        part = rfc2616unquote(part);\n\n        if (quot) {\n          part = unescape(part);\n\n          if (n === 0) {\n            part = rfc5987decode(part);\n          }\n        }\n\n        parts.push(part);\n      }\n\n      return parts.join(\"\");\n    }\n\n    function rfc2616unquote(value) {\n      if (value.startsWith('\"')) {\n        const parts = value.slice(1).split('\\\\\"');\n\n        for (let i = 0; i < parts.length; ++i) {\n          const quotindex = parts[i].indexOf('\"');\n\n          if (quotindex !== -1) {\n            parts[i] = parts[i].slice(0, quotindex);\n            parts.length = i + 1;\n          }\n\n          parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n        }\n\n        value = parts.join('\"');\n      }\n\n      return value;\n    }\n\n    function rfc5987decode(extvalue) {\n      const encodingend = extvalue.indexOf(\"'\");\n\n      if (encodingend === -1) {\n        return extvalue;\n      }\n\n      const encoding = extvalue.slice(0, encodingend);\n      const langvalue = extvalue.slice(encodingend + 1);\n      const value = langvalue.replace(/^[^']*'/, \"\");\n      return textdecode(encoding, value);\n    }\n\n    function rfc2047decode(value) {\n      if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n        return value;\n      }\n\n      return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        }\n\n        try {\n          text = atob(text);\n        } catch (e) {}\n\n        return textdecode(charset, text);\n      });\n    }\n\n    return \"\";\n  }\n\n  /***/ }),\n  /* 26 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFNetworkStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n  const OK_RESPONSE = 200;\n  const PARTIAL_CONTENT_RESPONSE = 206;\n\n  function getArrayBuffer(xhr) {\n    const data = xhr.response;\n\n    if (typeof data !== \"string\") {\n      return data;\n    }\n\n    const array = (0, _util.stringToBytes)(data);\n    return array.buffer;\n  }\n\n  class NetworkManager {\n    constructor(url, args) {\n      this.url = url;\n      args = args || {};\n      this.isHttp = /^https?:/i.test(url);\n      this.httpHeaders = this.isHttp && args.httpHeaders || {};\n      this.withCredentials = args.withCredentials || false;\n\n      this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n      this.currXhrId = 0;\n      this.pendingRequests = Object.create(null);\n    }\n\n    requestRange(begin, end, listeners) {\n      const args = {\n        begin,\n        end\n      };\n\n      for (const prop in listeners) {\n        args[prop] = listeners[prop];\n      }\n\n      return this.request(args);\n    }\n\n    requestFull(listeners) {\n      return this.request(listeners);\n    }\n\n    request(args) {\n      const xhr = this.getXhr();\n      const xhrId = this.currXhrId++;\n      const pendingRequest = this.pendingRequests[xhrId] = {\n        xhr\n      };\n      xhr.open(\"GET\", this.url);\n      xhr.withCredentials = this.withCredentials;\n\n      for (const property in this.httpHeaders) {\n        const value = this.httpHeaders[property];\n\n        if (typeof value === \"undefined\") {\n          continue;\n        }\n\n        xhr.setRequestHeader(property, value);\n      }\n\n      if (this.isHttp && \"begin\" in args && \"end\" in args) {\n        xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n        pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n      } else {\n        pendingRequest.expectedStatus = OK_RESPONSE;\n      }\n\n      xhr.responseType = \"arraybuffer\";\n\n      if (args.onError) {\n        xhr.onerror = function (evt) {\n          args.onError(xhr.status);\n        };\n      }\n\n      xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n      xhr.onprogress = this.onProgress.bind(this, xhrId);\n      pendingRequest.onHeadersReceived = args.onHeadersReceived;\n      pendingRequest.onDone = args.onDone;\n      pendingRequest.onError = args.onError;\n      pendingRequest.onProgress = args.onProgress;\n      xhr.send(null);\n      return xhrId;\n    }\n\n    onProgress(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      if (pendingRequest.onProgress) {\n        pendingRequest.onProgress(evt);\n      }\n    }\n\n    onStateChange(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      const xhr = pendingRequest.xhr;\n\n      if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n        pendingRequest.onHeadersReceived();\n        delete pendingRequest.onHeadersReceived;\n      }\n\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (!(xhrId in this.pendingRequests)) {\n        return;\n      }\n\n      delete this.pendingRequests[xhrId];\n\n      if (xhr.status === 0 && this.isHttp) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      const xhrStatus = xhr.status || OK_RESPONSE;\n      const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n      if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      const chunk = getArrayBuffer(xhr);\n\n      if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n        const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n        const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n        pendingRequest.onDone({\n          begin: parseInt(matches[1], 10),\n          chunk\n        });\n      } else if (chunk) {\n        pendingRequest.onDone({\n          begin: 0,\n          chunk\n        });\n      } else if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n    }\n\n    getRequestXhr(xhrId) {\n      return this.pendingRequests[xhrId].xhr;\n    }\n\n    isPendingRequest(xhrId) {\n      return xhrId in this.pendingRequests;\n    }\n\n    abortRequest(xhrId) {\n      const xhr = this.pendingRequests[xhrId].xhr;\n      delete this.pendingRequests[xhrId];\n      xhr.abort();\n    }\n\n  }\n\n  class PDFNetworkStream {\n    constructor(source) {\n      this._source = source;\n      this._manager = new NetworkManager(source.url, {\n        httpHeaders: source.httpHeaders,\n        withCredentials: source.withCredentials\n      });\n      this._rangeChunkSize = source.rangeChunkSize;\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    _onRangeRequestReaderClosed(reader) {\n      const i = this._rangeRequestReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeRequestReaders.splice(i, 1);\n      }\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(begin, end) {\n      const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n      reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFNetworkStream = PDFNetworkStream;\n\n  class PDFNetworkStreamFullRequestReader {\n    constructor(manager, source) {\n      this._manager = manager;\n      const args = {\n        onHeadersReceived: this._onHeadersReceived.bind(this),\n        onDone: this._onDone.bind(this),\n        onError: this._onError.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._url = source.url;\n      this._fullRequestId = manager.requestFull(args);\n      this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n      this._disableRange = source.disableRange || false;\n      this._contentLength = source.length;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      this._isStreamingSupported = false;\n      this._isRangeSupported = false;\n      this._cachedChunks = [];\n      this._requests = [];\n      this._done = false;\n      this._storedError = undefined;\n      this._filename = null;\n      this.onProgress = null;\n    }\n\n    _onHeadersReceived() {\n      const fullRequestXhrId = this._fullRequestId;\n\n      const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n      const getResponseHeader = name => {\n        return fullRequestXhr.getResponseHeader(name);\n      };\n\n      const {\n        allowRangeRequests,\n        suggestedLength\n      } = (0, _network_utils.validateRangeRequestCapabilities)({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange\n      });\n\n      if (allowRangeRequests) {\n        this._isRangeSupported = true;\n      }\n\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n      if (this._isRangeSupported) {\n        this._manager.abortRequest(fullRequestXhrId);\n      }\n\n      this._headersReceivedCapability.resolve();\n    }\n\n    _onDone(args) {\n      if (args) {\n        if (this._requests.length > 0) {\n          const requestCapability = this._requests.shift();\n\n          requestCapability.resolve({\n            value: args.chunk,\n            done: false\n          });\n        } else {\n          this._cachedChunks.push(args.chunk);\n        }\n      }\n\n      this._done = true;\n\n      if (this._cachedChunks.length > 0) {\n        return;\n      }\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n\n    _onError(status) {\n      const url = this._url;\n      const exception = (0, _network_utils.createResponseStatusError)(status, url);\n      this._storedError = exception;\n\n      this._headersReceivedCapability.reject(exception);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.reject(exception);\n      });\n\n      this._requests = [];\n      this._cachedChunks = [];\n    }\n\n    _onProgress(data) {\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: data.loaded,\n          total: data.lengthComputable ? data.total : this._contentLength\n        });\n      }\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get headersReady() {\n      return this._headersReceivedCapability.promise;\n    }\n\n    async read() {\n      if (this._storedError) {\n        throw this._storedError;\n      }\n\n      if (this._cachedChunks.length > 0) {\n        const chunk = this._cachedChunks.shift();\n\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._headersReceivedCapability.reject(reason);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._fullRequestId)) {\n        this._manager.abortRequest(this._fullRequestId);\n      }\n\n      this._fullRequestReader = null;\n    }\n\n  }\n\n  class PDFNetworkStreamRangeRequestReader {\n    constructor(manager, begin, end) {\n      this._manager = manager;\n      const args = {\n        onDone: this._onDone.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._requestId = manager.requestRange(begin, end, args);\n      this._requests = [];\n      this._queuedChunk = null;\n      this._done = false;\n      this.onProgress = null;\n      this.onClosed = null;\n    }\n\n    _close() {\n      if (this.onClosed) {\n        this.onClosed(this);\n      }\n    }\n\n    _onDone(data) {\n      const chunk = data.chunk;\n\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunk = chunk;\n      }\n\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._close();\n    }\n\n    _onProgress(evt) {\n      if (!this.isStreamingSupported && this.onProgress) {\n        this.onProgress({\n          loaded: evt.loaded\n        });\n      }\n    }\n\n    get isStreamingSupported() {\n      return false;\n    }\n\n    async read() {\n      if (this._queuedChunk !== null) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const requestCapability = (0, _util.createPromiseCapability)();\n\n      this._requests.push(requestCapability);\n\n      return requestCapability.promise;\n    }\n\n    cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._requestId)) {\n        this._manager.abortRequest(this._requestId);\n      }\n\n      this._close();\n    }\n\n  }\n\n  /***/ }),\n  /* 27 */\n  /***/ ((__unused_webpack_module, exports, __w_pdfjs_require__) => {\n\n\n\n  Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n  }));\n  exports.PDFFetchStream = void 0;\n\n  var _util = __w_pdfjs_require__(2);\n\n  var _network_utils = __w_pdfjs_require__(24);\n\n  ;\n\n  function createFetchOptions(headers, withCredentials, abortController) {\n    return {\n      method: \"GET\",\n      headers,\n      signal: abortController && abortController.signal, // lwf\n      mode: \"cors\",\n      credentials: withCredentials ? \"include\" : \"same-origin\",\n      redirect: \"follow\"\n    };\n  }\n\n  function createHeaders(httpHeaders) {\n    const headers = new Headers();\n\n    for (const property in httpHeaders) {\n      const value = httpHeaders[property];\n\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n\n      headers.append(property, value);\n    }\n\n    return headers;\n  }\n\n  class PDFFetchStream {\n    constructor(source) {\n      this.source = source;\n      this.isHttp = /^https?:/i.test(source.url);\n      this.httpHeaders = this.isHttp && source.httpHeaders || {};\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n\n    get _progressiveDataLength() {\n      return this._fullRequestReader && this._fullRequestReader._loaded || 0; // lwf\n    }\n\n    getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFFetchStreamReader(this);\n      return this._fullRequestReader;\n    }\n\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n\n    cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      const readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n\n  }\n\n  exports.PDFFetchStream = PDFFetchStream;\n\n  class PDFFetchStreamReader {\n    constructor(stream) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      this._filename = null;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._contentLength = source.length;\n      this._headersCapability = (0, _util.createPromiseCapability)();\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n\n      if (typeof AbortController !== \"undefined\") {\n        this._abortController = new AbortController();\n      }\n\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      this._headers = createHeaders(this._stream.httpHeaders);\n      const url = source.url;\n      fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n        if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n          throw (0, _network_utils.createResponseStatusError)(response.status, url);\n        }\n\n        this._reader = response.body.getReader();\n\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = (0, _network_utils.validateRangeRequestCapabilities)({\n          getResponseHeader,\n          isHttp: this._stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n        }\n      }).catch(this._headersCapability.reject);\n      this.onProgress = null;\n    }\n\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n\n    get filename() {\n      return this._filename;\n    }\n\n    get contentLength() {\n      return this._contentLength;\n    }\n\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._headersCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n\n      this._loaded += value.byteLength;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded,\n          total: this._contentLength\n        });\n      }\n\n      const buffer = new Uint8Array(value).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n\n  }\n\n  class PDFFetchStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._readCapability = (0, _util.createPromiseCapability)();\n      this._isStreamingSupported = !source.disableStream;\n\n      if (typeof AbortController !== \"undefined\") {\n        this._abortController = new AbortController();\n      }\n\n      this._headers = createHeaders(this._stream.httpHeaders);\n\n      this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n      const url = source.url;\n      fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n        if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n          throw (0, _network_utils.createResponseStatusError)(response.status, url);\n        }\n\n        this._readCapability.resolve();\n\n        this._reader = response.body.getReader();\n      }).catch(reason => {\n        if (reason && reason.name === \"AbortError\") { // lwf\n          return;\n        }\n\n        throw reason;\n      });\n      this.onProgress = null;\n    }\n\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n\n    async read() {\n      await this._readCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n\n      this._loaded += value.byteLength;\n\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: this._loaded\n        });\n      }\n\n      const buffer = new Uint8Array(value).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n\n    cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n\n  }\n/***/ })\n/******/  ]);\n/************************************************************************/\n/******/  // The module cache\n/******/  var __webpack_module_cache__ = {};\n/******/  \n/******/  // The require function\n/******/  function __w_pdfjs_require__(moduleId) {\n/******/    // Check if module is in cache\n/******/    if(__webpack_module_cache__[moduleId]) {\n/******/      return __webpack_module_cache__[moduleId].exports;\n/******/    }\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = __webpack_module_cache__[moduleId] = {\n/******/      // no module.id needed\n/******/      // no module.loaded needed\n/******/      exports: {}\n/******/    };\n/******/  \n/******/    // Execute the module function\n/******/    __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n/******/  \n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n/******/  \n/************************************************************************/\n/******/  // module exports must be returned from runtime so entry inlining is disabled\n/******/  // startup\n/******/  // Load entry module and return exports\n/******/  return __w_pdfjs_require__(0);\n/******/ })()\n;\n});\n\ndefine('skylark-pdfjs-display/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./pdf\"\r\n],function(skylark,pdfjs) {\r\n\treturn skylark.attach(\"intg.pdfjs.display\",pdfjs);\r\n});\ndefine('skylark-pdfjs-display', ['skylark-pdfjs-display/main'], function (main) { return main; });\n\n"]}